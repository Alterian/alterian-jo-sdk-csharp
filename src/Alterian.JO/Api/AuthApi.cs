/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of all permissions
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionList</returns>
        PermissionList AuthPermissionGet(int? from = default(int?), int? to = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of all permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionList</returns>
        ApiResponse<PermissionList> AuthPermissionGetWithHttpInfo(int? from = default(int?), int? to = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a list of roles
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoleList</returns>
        RoleList AuthRoleGet(int? from = default(int?), int? to = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoleList</returns>
        ApiResponse<RoleList> AuthRoleGetWithHttpInfo(int? from = default(int?), int? to = default(int?), int operationIndex = 0);
        /// <summary>
        /// Remove client from a role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthRoleNameClientClientNameDelete(string name, string clientName, int operationIndex = 0);

        /// <summary>
        /// Remove client from a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthRoleNameClientClientNameDeleteWithHttpInfo(string name, string clientName, int operationIndex = 0);
        /// <summary>
        /// Add client to a role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthRoleNameClientClientNamePost(string name, string clientName, int operationIndex = 0);

        /// <summary>
        /// Add client to a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthRoleNameClientClientNamePostWithHttpInfo(string name, string clientName, int operationIndex = 0);
        /// <summary>
        /// Get the list of clients for a role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        RefList AuthRoleNameClientGet(string name, int operationIndex = 0);

        /// <summary>
        /// Get the list of clients for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        ApiResponse<RefList> AuthRoleNameClientGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Remove a role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthRoleNameDelete(string name, int operationIndex = 0);

        /// <summary>
        /// Remove a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthRoleNameDeleteWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Get information about a specific role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoleList</returns>
        RoleList AuthRoleNameGet(string name, int operationIndex = 0);

        /// <summary>
        /// Get information about a specific role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoleList</returns>
        ApiResponse<RoleList> AuthRoleNameGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Remove permission from a role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthRoleNamePermissionDelete(string name, string permission, int operationIndex = 0);

        /// <summary>
        /// Remove permission from a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthRoleNamePermissionDeleteWithHttpInfo(string name, string permission, int operationIndex = 0);
        /// <summary>
        /// Get the list of permissions granted by a specific role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionList</returns>
        PermissionList AuthRoleNamePermissionGet(string name, int operationIndex = 0);

        /// <summary>
        /// Get the list of permissions granted by a specific role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionList</returns>
        ApiResponse<PermissionList> AuthRoleNamePermissionGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Add permission to a role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthRoleNamePermissionPost(string name, string permission, int operationIndex = 0);

        /// <summary>
        /// Add permission to a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthRoleNamePermissionPostWithHttpInfo(string name, string permission, int operationIndex = 0);
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthRolePost(Role role, int operationIndex = 0);

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthRolePostWithHttpInfo(Role role, int operationIndex = 0);
        /// <summary>
        /// Get a list of sites
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SiteList</returns>
        SiteList AuthSiteGet(int? from = default(int?), int? to = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SiteList</returns>
        ApiResponse<SiteList> AuthSiteGetWithHttpInfo(int? from = default(int?), int? to = default(int?), int operationIndex = 0);
        /// <summary>
        /// Remove a site
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthSiteIdDelete(string id, int operationIndex = 0);

        /// <summary>
        /// Remove a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthSiteIdDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get information about specified site
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SiteList</returns>
        SiteList AuthSiteIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// Get information about specified site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SiteList</returns>
        ApiResponse<SiteList> AuthSiteIdGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get the list of site users
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        RefList AuthSiteIdUserGet(string id, int operationIndex = 0);

        /// <summary>
        /// Get the list of site users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        ApiResponse<RefList> AuthSiteIdUserGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove user from a site
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthSiteIdUserNameDelete(string id, string name, int operationIndex = 0);

        /// <summary>
        /// Remove user from a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthSiteIdUserNameDeleteWithHttpInfo(string id, string name, int operationIndex = 0);
        /// <summary>
        /// Add user to a site
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthSiteIdUserNamePost(string id, string name, int operationIndex = 0);

        /// <summary>
        /// Add user to a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthSiteIdUserNamePostWithHttpInfo(string id, string name, int operationIndex = 0);
        /// <summary>
        /// Create a new site
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthSitePost(string body, int operationIndex = 0);

        /// <summary>
        /// Create a new site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthSitePostWithHttpInfo(string body, int operationIndex = 0);
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserList</returns>
        UserList AuthUserGet(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserList</returns>
        ApiResponse<UserList> AuthUserGetWithHttpInfo(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove client access from user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameClientClientNameDelete(string name, string clientName, int operationIndex = 0);

        /// <summary>
        /// Remove client access from user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameClientClientNameDeleteWithHttpInfo(string name, string clientName, int operationIndex = 0);
        /// <summary>
        /// Add client access to user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameClientClientNamePost(string name, string clientName, int operationIndex = 0);

        /// <summary>
        /// Add client access to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameClientClientNamePostWithHttpInfo(string name, string clientName, int operationIndex = 0);
        /// <summary>
        /// Get the list of clients to which a user has been granted access
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        RefList AuthUserNameClientGet(string name, int operationIndex = 0);

        /// <summary>
        /// Get the list of clients to which a user has been granted access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        ApiResponse<RefList> AuthUserNameClientGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Remove a user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameDelete(string name, int operationIndex = 0);

        /// <summary>
        /// Remove a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameDeleteWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Get information about specified user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserList</returns>
        UserList AuthUserNameGet(string name, bool? getAllDetails = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get information about specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserList</returns>
        ApiResponse<UserList> AuthUserNameGetWithHttpInfo(string name, bool? getAllDetails = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get the list of user permission
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionList</returns>
        PermissionList AuthUserNamePermissionGet(string name, int operationIndex = 0);

        /// <summary>
        /// Get the list of user permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionList</returns>
        ApiResponse<PermissionList> AuthUserNamePermissionGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Remove permission from a user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNamePermissionPermissionDelete(string name, string permission, int operationIndex = 0);

        /// <summary>
        /// Remove permission from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNamePermissionPermissionDeleteWithHttpInfo(string name, string permission, int operationIndex = 0);
        /// <summary>
        /// Add permission to a user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNamePermissionPermissionPost(string name, string permission, int operationIndex = 0);

        /// <summary>
        /// Add permission to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNamePermissionPermissionPostWithHttpInfo(string name, string permission, int operationIndex = 0);
        /// <summary>
        /// Get the list of the roles which have been assigned to a user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        RefList AuthUserNameRoleGet(string name, int operationIndex = 0);

        /// <summary>
        /// Get the list of the roles which have been assigned to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        ApiResponse<RefList> AuthUserNameRoleGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Remove role from a user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameRoleRoleNameDelete(string name, string roleName, int operationIndex = 0);

        /// <summary>
        /// Remove role from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameRoleRoleNameDeleteWithHttpInfo(string name, string roleName, int operationIndex = 0);
        /// <summary>
        /// Assign role to user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameRoleRoleNamePost(string name, string roleName, int operationIndex = 0);

        /// <summary>
        /// Assign role to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameRoleRoleNamePostWithHttpInfo(string name, string roleName, int operationIndex = 0);
        /// <summary>
        /// Remove static access token from user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameTokenTokenNameDelete(string name, string tokenName, int operationIndex = 0);

        /// <summary>
        /// Remove static access token from user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameTokenTokenNameDeleteWithHttpInfo(string name, string tokenName, int operationIndex = 0);
        /// <summary>
        /// Add static access token to user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserNameTokenTokenNamePost(string name, string tokenName, int operationIndex = 0);

        /// <summary>
        /// Add static access token to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserNameTokenTokenNamePostWithHttpInfo(string name, string tokenName, int operationIndex = 0);
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse AuthUserPost(string body, int operationIndex = 0);

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> AuthUserPostWithHttpInfo(string body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of all permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionList</returns>
        System.Threading.Tasks.Task<PermissionList> AuthPermissionGetAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionList>> AuthPermissionGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleList</returns>
        System.Threading.Tasks.Task<RoleList> AuthRoleGetAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleList>> AuthRoleGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove client from a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthRoleNameClientClientNameDeleteAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove client from a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthRoleNameClientClientNameDeleteWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add client to a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthRoleNameClientClientNamePostAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add client to a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthRoleNameClientClientNamePostWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of clients for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        System.Threading.Tasks.Task<RefList> AuthRoleNameClientGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of clients for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefList>> AuthRoleNameClientGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthRoleNameDeleteAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthRoleNameDeleteWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about a specific role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleList</returns>
        System.Threading.Tasks.Task<RoleList> AuthRoleNameGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about a specific role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleList>> AuthRoleNameGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove permission from a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthRoleNamePermissionDeleteAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove permission from a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthRoleNamePermissionDeleteWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of permissions granted by a specific role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionList</returns>
        System.Threading.Tasks.Task<PermissionList> AuthRoleNamePermissionGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of permissions granted by a specific role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionList>> AuthRoleNamePermissionGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add permission to a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthRoleNamePermissionPostAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add permission to a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthRoleNamePermissionPostWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthRolePostAsync(Role role, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthRolePostWithHttpInfoAsync(Role role, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SiteList</returns>
        System.Threading.Tasks.Task<SiteList> AuthSiteGetAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SiteList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteList>> AuthSiteGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthSiteIdDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthSiteIdDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about specified site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SiteList</returns>
        System.Threading.Tasks.Task<SiteList> AuthSiteIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about specified site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SiteList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteList>> AuthSiteIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of site users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        System.Threading.Tasks.Task<RefList> AuthSiteIdUserGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of site users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefList>> AuthSiteIdUserGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove user from a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthSiteIdUserNameDeleteAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove user from a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthSiteIdUserNameDeleteWithHttpInfoAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add user to a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthSiteIdUserNamePostAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add user to a site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthSiteIdUserNamePostWithHttpInfoAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthSitePostAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new site
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthSitePostWithHttpInfoAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserList</returns>
        System.Threading.Tasks.Task<UserList> AuthUserGetAsync(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserList>> AuthUserGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove client access from user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameClientClientNameDeleteAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove client access from user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameClientClientNameDeleteWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add client access to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameClientClientNamePostAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add client access to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameClientClientNamePostWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of clients to which a user has been granted access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        System.Threading.Tasks.Task<RefList> AuthUserNameClientGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of clients to which a user has been granted access
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefList>> AuthUserNameClientGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameDeleteAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameDeleteWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserList</returns>
        System.Threading.Tasks.Task<UserList> AuthUserNameGetAsync(string name, bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserList>> AuthUserNameGetWithHttpInfoAsync(string name, bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of user permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionList</returns>
        System.Threading.Tasks.Task<PermissionList> AuthUserNamePermissionGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of user permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionList>> AuthUserNamePermissionGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove permission from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNamePermissionPermissionDeleteAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove permission from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNamePermissionPermissionDeleteWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add permission to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNamePermissionPermissionPostAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add permission to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNamePermissionPermissionPostWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of the roles which have been assigned to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        System.Threading.Tasks.Task<RefList> AuthUserNameRoleGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of the roles which have been assigned to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefList>> AuthUserNameRoleGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove role from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameRoleRoleNameDeleteAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove role from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameRoleRoleNameDeleteWithHttpInfoAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign role to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameRoleRoleNamePostAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign role to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameRoleRoleNamePostWithHttpInfoAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove static access token from user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameTokenTokenNameDeleteAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove static access token from user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameTokenTokenNameDeleteWithHttpInfoAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add static access token to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserNameTokenTokenNamePostAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add static access token to user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserNameTokenTokenNamePostWithHttpInfoAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> AuthUserPostAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> AuthUserPostWithHttpInfoAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApi : IAuthApiSync, IAuthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthApi : IAuthApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a list of all permissions 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionList</returns>
        public PermissionList AuthPermissionGet(int? from = default(int?), int? to = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<PermissionList> localVarResponse = AuthPermissionGetWithHttpInfo(from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all permissions 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionList</returns>
        public Alterian.JO.Client.ApiResponse<PermissionList> AuthPermissionGetWithHttpInfo(int? from = default(int?), int? to = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthPermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionList>("/auth/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all permissions 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionList</returns>
        public async System.Threading.Tasks.Task<PermissionList> AuthPermissionGetAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<PermissionList> localVarResponse = await AuthPermissionGetWithHttpInfoAsync(from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all permissions 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<PermissionList>> AuthPermissionGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthPermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionList>("/auth/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of roles 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoleList</returns>
        public RoleList AuthRoleGet(int? from = default(int?), int? to = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RoleList> localVarResponse = AuthRoleGetWithHttpInfo(from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of roles 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoleList</returns>
        public Alterian.JO.Client.ApiResponse<RoleList> AuthRoleGetWithHttpInfo(int? from = default(int?), int? to = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthRoleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoleList>("/auth/role", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of roles 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleList</returns>
        public async System.Threading.Tasks.Task<RoleList> AuthRoleGetAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RoleList> localVarResponse = await AuthRoleGetWithHttpInfoAsync(from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of roles 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RoleList>> AuthRoleGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthRoleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleList>("/auth/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthRoleNameClientClientNameDelete(string name, string clientName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthRoleNameClientClientNameDeleteWithHttpInfo(name, clientName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove client from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthRoleNameClientClientNameDeleteWithHttpInfo(string name, string clientName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameClientClientNameDelete");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthRoleNameClientClientNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameClientClientNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/role/{name}/client/{clientName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameClientClientNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthRoleNameClientClientNameDeleteAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthRoleNameClientClientNameDeleteWithHttpInfoAsync(name, clientName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove client from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client that will have this role removed from it</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthRoleNameClientClientNameDeleteWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameClientClientNameDelete");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthRoleNameClientClientNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameClientClientNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/role/{name}/client/{clientName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameClientClientNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthRoleNameClientClientNamePost(string name, string clientName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthRoleNameClientClientNamePostWithHttpInfo(name, clientName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add client to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthRoleNameClientClientNamePostWithHttpInfo(string name, string clientName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameClientClientNamePost");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthRoleNameClientClientNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameClientClientNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/role/{name}/client/{clientName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameClientClientNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthRoleNameClientClientNamePostAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthRoleNameClientClientNamePostWithHttpInfoAsync(name, clientName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add client to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="clientName">Client to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthRoleNameClientClientNamePostWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameClientClientNamePost");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthRoleNameClientClientNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameClientClientNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/role/{name}/client/{clientName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameClientClientNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of clients for a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        public RefList AuthRoleNameClientGet(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = AuthRoleNameClientGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of clients for a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        public Alterian.JO.Client.ApiResponse<RefList> AuthRoleNameClientGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefList>("/auth/role/{name}/client", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of clients for a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        public async System.Threading.Tasks.Task<RefList> AuthRoleNameClientGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = await AuthRoleNameClientGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of clients for a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RefList>> AuthRoleNameClientGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefList>("/auth/role/{name}/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthRoleNameDelete(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthRoleNameDeleteWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthRoleNameDeleteWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/role/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthRoleNameDeleteAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthRoleNameDeleteWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of role to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthRoleNameDeleteWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoleList</returns>
        public RoleList AuthRoleNameGet(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RoleList> localVarResponse = AuthRoleNameGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoleList</returns>
        public Alterian.JO.Client.ApiResponse<RoleList> AuthRoleNameGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoleList>("/auth/role/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoleList</returns>
        public async System.Threading.Tasks.Task<RoleList> AuthRoleNameGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RoleList> localVarResponse = await AuthRoleNameGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The role to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RoleList>> AuthRoleNameGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleList>("/auth/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove permission from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthRoleNamePermissionDelete(string name, string permission, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthRoleNamePermissionDeleteWithHttpInfo(name, permission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove permission from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthRoleNamePermissionDeleteWithHttpInfo(string name, string permission, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNamePermissionDelete");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthRoleNamePermissionDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNamePermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/role/{name}/{permission}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNamePermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove permission from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthRoleNamePermissionDeleteAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthRoleNamePermissionDeleteWithHttpInfoAsync(name, permission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove permission from a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to remove from role</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthRoleNamePermissionDeleteWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNamePermissionDelete");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthRoleNamePermissionDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNamePermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/role/{name}/{permission}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNamePermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of permissions granted by a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionList</returns>
        public PermissionList AuthRoleNamePermissionGet(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<PermissionList> localVarResponse = AuthRoleNamePermissionGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of permissions granted by a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionList</returns>
        public Alterian.JO.Client.ApiResponse<PermissionList> AuthRoleNamePermissionGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNamePermissionGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNamePermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionList>("/auth/role/{name}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNamePermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of permissions granted by a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionList</returns>
        public async System.Threading.Tasks.Task<PermissionList> AuthRoleNamePermissionGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<PermissionList> localVarResponse = await AuthRoleNamePermissionGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of permissions granted by a specific role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<PermissionList>> AuthRoleNamePermissionGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNamePermissionGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNamePermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionList>("/auth/role/{name}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNamePermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add permission to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthRoleNamePermissionPost(string name, string permission, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthRoleNamePermissionPostWithHttpInfo(name, permission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add permission to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthRoleNamePermissionPostWithHttpInfo(string name, string permission, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNamePermissionPost");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthRoleNamePermissionPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNamePermissionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/role/{name}/{permission}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNamePermissionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add permission to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthRoleNamePermissionPostAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthRoleNamePermissionPostWithHttpInfoAsync(name, permission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add permission to a role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Role to alter</param>
        /// <param name="permission">Permission to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthRoleNamePermissionPostWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthRoleNamePermissionPost");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthRoleNamePermissionPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthRoleNamePermissionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/role/{name}/{permission}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRoleNamePermissionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthRolePost(Role role, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthRolePostWithHttpInfo(role);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthRolePostWithHttpInfo(Role role, int operationIndex = 0)
        {
            // verify the required parameter 'role' is set
            if (role == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->AuthRolePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = role;

            localVarRequestOptions.Operation = "AuthApi.AuthRolePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/role", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRolePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthRolePostAsync(Role role, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthRolePostWithHttpInfoAsync(role, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthRolePostWithHttpInfoAsync(Role role, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->AuthRolePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = role;

            localVarRequestOptions.Operation = "AuthApi.AuthRolePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthRolePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of sites 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SiteList</returns>
        public SiteList AuthSiteGet(int? from = default(int?), int? to = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<SiteList> localVarResponse = AuthSiteGetWithHttpInfo(from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of sites 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SiteList</returns>
        public Alterian.JO.Client.ApiResponse<SiteList> AuthSiteGetWithHttpInfo(int? from = default(int?), int? to = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthSiteGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SiteList>("/auth/site", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of sites 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SiteList</returns>
        public async System.Threading.Tasks.Task<SiteList> AuthSiteGetAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<SiteList> localVarResponse = await AuthSiteGetWithHttpInfoAsync(from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of sites 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SiteList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<SiteList>> AuthSiteGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthSiteGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SiteList>("/auth/site", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthSiteIdDelete(string id, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthSiteIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthSiteIdDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/site/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthSiteIdDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthSiteIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthSiteIdDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/site/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about specified site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SiteList</returns>
        public SiteList AuthSiteIdGet(string id, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<SiteList> localVarResponse = AuthSiteIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about specified site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SiteList</returns>
        public Alterian.JO.Client.ApiResponse<SiteList> AuthSiteIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SiteList>("/auth/site/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about specified site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SiteList</returns>
        public async System.Threading.Tasks.Task<SiteList> AuthSiteIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<SiteList> localVarResponse = await AuthSiteIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about specified site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The site to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SiteList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<SiteList>> AuthSiteIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SiteList>("/auth/site/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of site users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        public RefList AuthSiteIdUserGet(string id, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = AuthSiteIdUserGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of site users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        public Alterian.JO.Client.ApiResponse<RefList> AuthSiteIdUserGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdUserGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefList>("/auth/site/{id}/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of site users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        public async System.Threading.Tasks.Task<RefList> AuthSiteIdUserGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = await AuthSiteIdUserGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of site users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RefList>> AuthSiteIdUserGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdUserGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefList>("/auth/site/{id}/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove user from a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthSiteIdUserNameDelete(string id, string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthSiteIdUserNameDeleteWithHttpInfo(id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthSiteIdUserNameDeleteWithHttpInfo(string id, string name, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdUserNameDelete");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthSiteIdUserNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdUserNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/site/{id}/user/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdUserNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove user from a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthSiteIdUserNameDeleteAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthSiteIdUserNameDeleteWithHttpInfoAsync(id, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User to remove from site</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthSiteIdUserNameDeleteWithHttpInfoAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdUserNameDelete");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthSiteIdUserNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdUserNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/site/{id}/user/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdUserNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add user to a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthSiteIdUserNamePost(string id, string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthSiteIdUserNamePostWithHttpInfo(id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add user to a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthSiteIdUserNamePostWithHttpInfo(string id, string name, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdUserNamePost");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthSiteIdUserNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdUserNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/site/{id}/user/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdUserNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add user to a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthSiteIdUserNamePostAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthSiteIdUserNamePostWithHttpInfoAsync(id, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add user to a site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Site identifier</param>
        /// <param name="name">User Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthSiteIdUserNamePostWithHttpInfoAsync(string id, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'id' when calling AuthApi->AuthSiteIdUserNamePost");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthSiteIdUserNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Alterian.JO.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthSiteIdUserNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/site/{id}/user/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSiteIdUserNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthSitePost(string body, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthSitePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthSitePostWithHttpInfo(string body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling AuthApi->AuthSitePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AuthApi.AuthSitePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/site", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSitePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthSitePostAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthSitePostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new site 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthSitePostWithHttpInfoAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling AuthApi->AuthSitePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AuthApi.AuthSitePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/site", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthSitePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserList</returns>
        public UserList AuthUserGet(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<UserList> localVarResponse = AuthUserGetWithHttpInfo(from, to, getAllDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserList</returns>
        public Alterian.JO.Client.ApiResponse<UserList> AuthUserGetWithHttpInfo(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserList>("/auth/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserList</returns>
        public async System.Threading.Tasks.Task<UserList> AuthUserGetAsync(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<UserList> localVarResponse = await AuthUserGetWithHttpInfoAsync(from, to, getAllDetails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<UserList>> AuthUserGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserList>("/auth/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client access from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameClientClientNameDelete(string name, string clientName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameClientClientNameDeleteWithHttpInfo(name, clientName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove client access from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameClientClientNameDeleteWithHttpInfo(string name, string clientName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameClientClientNameDelete");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthUserNameClientClientNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameClientClientNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/user/{name}/client/{clientName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameClientClientNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove client access from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameClientClientNameDeleteAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameClientClientNameDeleteWithHttpInfoAsync(name, clientName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove client access from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="clientName">Client to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameClientClientNameDeleteWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameClientClientNameDelete");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthUserNameClientClientNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameClientClientNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/user/{name}/client/{clientName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameClientClientNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client access to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameClientClientNamePost(string name, string clientName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameClientClientNamePostWithHttpInfo(name, clientName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add client access to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameClientClientNamePostWithHttpInfo(string name, string clientName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameClientClientNamePost");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthUserNameClientClientNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameClientClientNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/user/{name}/client/{clientName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameClientClientNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add client access to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameClientClientNamePostAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameClientClientNamePostWithHttpInfoAsync(name, clientName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add client access to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="clientName">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameClientClientNamePostWithHttpInfoAsync(string name, string clientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameClientClientNamePost");
            }

            // verify the required parameter 'clientName' is set
            if (clientName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'clientName' when calling AuthApi->AuthUserNameClientClientNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("clientName", Alterian.JO.Client.ClientUtils.ParameterToString(clientName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameClientClientNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/user/{name}/client/{clientName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameClientClientNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of clients to which a user has been granted access 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        public RefList AuthUserNameClientGet(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = AuthUserNameClientGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of clients to which a user has been granted access 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        public Alterian.JO.Client.ApiResponse<RefList> AuthUserNameClientGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefList>("/auth/user/{name}/client", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of clients to which a user has been granted access 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        public async System.Threading.Tasks.Task<RefList> AuthUserNameClientGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = await AuthUserNameClientGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of clients to which a user has been granted access 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RefList>> AuthUserNameClientGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefList>("/auth/user/{name}/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameDelete(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameDeleteWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameDeleteWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/user/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameDeleteAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameDeleteWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameDeleteWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/user/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about specified user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserList</returns>
        public UserList AuthUserNameGet(string name, bool? getAllDetails = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<UserList> localVarResponse = AuthUserNameGetWithHttpInfo(name, getAllDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about specified user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserList</returns>
        public Alterian.JO.Client.ApiResponse<UserList> AuthUserNameGetWithHttpInfo(string name, bool? getAllDetails = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserList>("/auth/user/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about specified user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserList</returns>
        public async System.Threading.Tasks.Task<UserList> AuthUserNameGetAsync(string name, bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<UserList> localVarResponse = await AuthUserNameGetWithHttpInfoAsync(name, getAllDetails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about specified user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The user to retrieve</param>
        /// <param name="getAllDetails">Do we want to retrieve details of user tokens. (default) false will return only token names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<UserList>> AuthUserNameGetWithHttpInfoAsync(string name, bool? getAllDetails = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserList>("/auth/user/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of user permission 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionList</returns>
        public PermissionList AuthUserNamePermissionGet(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<PermissionList> localVarResponse = AuthUserNamePermissionGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of user permission 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionList</returns>
        public Alterian.JO.Client.ApiResponse<PermissionList> AuthUserNamePermissionGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNamePermissionGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNamePermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionList>("/auth/user/{name}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNamePermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of user permission 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionList</returns>
        public async System.Threading.Tasks.Task<PermissionList> AuthUserNamePermissionGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<PermissionList> localVarResponse = await AuthUserNamePermissionGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of user permission 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<PermissionList>> AuthUserNamePermissionGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNamePermissionGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNamePermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionList>("/auth/user/{name}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNamePermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove permission from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNamePermissionPermissionDelete(string name, string permission, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNamePermissionPermissionDeleteWithHttpInfo(name, permission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove permission from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNamePermissionPermissionDeleteWithHttpInfo(string name, string permission, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNamePermissionPermissionDelete");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthUserNamePermissionPermissionDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNamePermissionPermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/user/{name}/permission/{permission}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNamePermissionPermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove permission from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNamePermissionPermissionDeleteAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNamePermissionPermissionDeleteWithHttpInfoAsync(name, permission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove permission from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="permission">Permission to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNamePermissionPermissionDeleteWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNamePermissionPermissionDelete");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthUserNamePermissionPermissionDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNamePermissionPermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/user/{name}/permission/{permission}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNamePermissionPermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add permission to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNamePermissionPermissionPost(string name, string permission, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNamePermissionPermissionPostWithHttpInfo(name, permission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add permission to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNamePermissionPermissionPostWithHttpInfo(string name, string permission, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNamePermissionPermissionPost");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthUserNamePermissionPermissionPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNamePermissionPermissionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/user/{name}/permission/{permission}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNamePermissionPermissionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add permission to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNamePermissionPermissionPostAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNamePermissionPermissionPostWithHttpInfoAsync(name, permission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add permission to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="permission">Permission to add to user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNamePermissionPermissionPostWithHttpInfoAsync(string name, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNamePermissionPermissionPost");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'permission' when calling AuthApi->AuthUserNamePermissionPermissionPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("permission", Alterian.JO.Client.ClientUtils.ParameterToString(permission)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNamePermissionPermissionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/user/{name}/permission/{permission}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNamePermissionPermissionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of the roles which have been assigned to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefList</returns>
        public RefList AuthUserNameRoleGet(string name, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = AuthUserNameRoleGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of the roles which have been assigned to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefList</returns>
        public Alterian.JO.Client.ApiResponse<RefList> AuthUserNameRoleGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameRoleGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameRoleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefList>("/auth/user/{name}/role", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameRoleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of the roles which have been assigned to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefList</returns>
        public async System.Threading.Tasks.Task<RefList> AuthUserNameRoleGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RefList> localVarResponse = await AuthUserNameRoleGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of the roles which have been assigned to a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RefList>> AuthUserNameRoleGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameRoleGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameRoleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefList>("/auth/user/{name}/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameRoleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove role from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameRoleRoleNameDelete(string name, string roleName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameRoleRoleNameDeleteWithHttpInfo(name, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove role from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameRoleRoleNameDeleteWithHttpInfo(string name, string roleName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameRoleRoleNameDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->AuthUserNameRoleRoleNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleName", Alterian.JO.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameRoleRoleNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/user/{name}/role/{roleName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameRoleRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove role from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameRoleRoleNameDeleteAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameRoleRoleNameDeleteWithHttpInfoAsync(name, roleName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove role from a user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to remove from user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameRoleRoleNameDeleteWithHttpInfoAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameRoleRoleNameDelete");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->AuthUserNameRoleRoleNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleName", Alterian.JO.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameRoleRoleNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/user/{name}/role/{roleName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameRoleRoleNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign role to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameRoleRoleNamePost(string name, string roleName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameRoleRoleNamePostWithHttpInfo(name, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign role to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameRoleRoleNamePostWithHttpInfo(string name, string roleName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameRoleRoleNamePost");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->AuthUserNameRoleRoleNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleName", Alterian.JO.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameRoleRoleNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/user/{name}/role/{roleName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameRoleRoleNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign role to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameRoleRoleNamePostAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameRoleRoleNamePostWithHttpInfoAsync(name, roleName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign role to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="roleName">Role to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameRoleRoleNamePostWithHttpInfoAsync(string name, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameRoleRoleNamePost");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->AuthUserNameRoleRoleNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleName", Alterian.JO.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameRoleRoleNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/user/{name}/role/{roleName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameRoleRoleNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove static access token from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameTokenTokenNameDelete(string name, string tokenName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameTokenTokenNameDeleteWithHttpInfo(name, tokenName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove static access token from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameTokenTokenNameDeleteWithHttpInfo(string name, string tokenName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameTokenTokenNameDelete");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'tokenName' when calling AuthApi->AuthUserNameTokenTokenNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", Alterian.JO.Client.ClientUtils.ParameterToString(tokenName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameTokenTokenNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/auth/user/{name}/token/{tokenName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameTokenTokenNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove static access token from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameTokenTokenNameDeleteAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameTokenTokenNameDeleteWithHttpInfoAsync(name, tokenName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove static access token from user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">user Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameTokenTokenNameDeleteWithHttpInfoAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameTokenTokenNameDelete");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'tokenName' when calling AuthApi->AuthUserNameTokenTokenNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", Alterian.JO.Client.ClientUtils.ParameterToString(tokenName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameTokenTokenNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/auth/user/{name}/token/{tokenName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameTokenTokenNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add static access token to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserNameTokenTokenNamePost(string name, string tokenName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserNameTokenTokenNamePostWithHttpInfo(name, tokenName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add static access token to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserNameTokenTokenNamePostWithHttpInfo(string name, string tokenName, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameTokenTokenNamePost");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'tokenName' when calling AuthApi->AuthUserNameTokenTokenNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", Alterian.JO.Client.ClientUtils.ParameterToString(tokenName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameTokenTokenNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/user/{name}/token/{tokenName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameTokenTokenNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add static access token to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserNameTokenTokenNamePostAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserNameTokenTokenNamePostWithHttpInfoAsync(name, tokenName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add static access token to user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">User Name</param>
        /// <param name="tokenName">Descriptive name for the token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserNameTokenTokenNamePostWithHttpInfoAsync(string name, string tokenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->AuthUserNameTokenTokenNamePost");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'tokenName' when calling AuthApi->AuthUserNameTokenTokenNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", Alterian.JO.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", Alterian.JO.Client.ClientUtils.ParameterToString(tokenName)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.AuthUserNameTokenTokenNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/user/{name}/token/{tokenName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserNameTokenTokenNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse AuthUserPost(string body, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = AuthUserPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> AuthUserPostWithHttpInfo(string body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling AuthApi->AuthUserPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AuthApi.AuthUserPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/auth/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> AuthUserPostAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await AuthUserPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A block of JSON describing the resource to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> AuthUserPostWithHttpInfoAsync(string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling AuthApi->AuthUserPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AuthApi.AuthUserPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/auth/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

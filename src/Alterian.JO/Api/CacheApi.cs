/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICacheApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get information about cache tables, filtered by client.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDetailsResponse</returns>
        CacheDetailsResponse CacheClientGet(string varClient, int operationIndex = 0);

        /// <summary>
        /// Get information about cache tables, filtered by client.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDetailsResponse</returns>
        ApiResponse<CacheDetailsResponse> CacheClientGetWithHttpInfo(string varClient, int operationIndex = 0);
        /// <summary>
        /// Execute a limited set of cql commands against the cache
        /// </summary>
        /// <remarks>
        /// insert, select, update or delete a single row of data from a single table
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheExecuteResponse</returns>
        CacheExecuteResponse CacheClientTargetExecutePost(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0);

        /// <summary>
        /// Execute a limited set of cql commands against the cache
        /// </summary>
        /// <remarks>
        /// insert, select, update or delete a single row of data from a single table
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheExecuteResponse</returns>
        ApiResponse<CacheExecuteResponse> CacheClientTargetExecutePostWithHttpInfo(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0);
        /// <summary>
        /// Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client and target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDetailsResponse</returns>
        CacheDetailsResponse CacheClientTargetGet(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0);

        /// <summary>
        /// Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client and target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDetailsResponse</returns>
        ApiResponse<CacheDetailsResponse> CacheClientTargetGetWithHttpInfo(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0);
        /// <summary>
        /// Delete column from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes a column from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheApiResponse</returns>
        CacheApiResponse CacheClientTargetTableColumnDelete(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Delete column from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes a column from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheApiResponse</returns>
        ApiResponse<CacheApiResponse> CacheClientTargetTableColumnDeleteWithHttpInfo(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Delete unused cache table and columns
        /// </summary>
        /// <remarks>
        /// Removes the columns and tables that are no longer used by any of the rules
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheApiDeleteResponse</returns>
        CacheApiDeleteResponse CacheClientTargetTableColumnsDelete(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0);

        /// <summary>
        /// Delete unused cache table and columns
        /// </summary>
        /// <remarks>
        /// Removes the columns and tables that are no longer used by any of the rules
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheApiDeleteResponse</returns>
        ApiResponse<CacheApiDeleteResponse> CacheClientTargetTableColumnsDeleteWithHttpInfo(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0);
        /// <summary>
        /// Delete data from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes data from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheApiResponse</returns>
        CacheApiResponse CacheClientTargetTableDelete(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Delete data from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes data from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheApiResponse</returns>
        ApiResponse<CacheApiResponse> CacheClientTargetTableDeleteWithHttpInfo(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get information about a specific cache table.
        /// </summary>
        /// <remarks>
        /// Get information about a specific cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDetailsResponse</returns>
        CacheDetailsResponse CacheClientTargetTableGet(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get information about a specific cache table.
        /// </summary>
        /// <remarks>
        /// Get information about a specific cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDetailsResponse</returns>
        ApiResponse<CacheDetailsResponse> CacheClientTargetTableGetWithHttpInfo(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Alter a cache table
        /// </summary>
        /// <remarks>
        /// Ensure that the cache table includes at least the set of columns requested
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheChangesResponse</returns>
        CacheChangesResponse CacheClientTargetTablePost(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0);

        /// <summary>
        /// Alter a cache table
        /// </summary>
        /// <remarks>
        /// Ensure that the cache table includes at least the set of columns requested
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheChangesResponse</returns>
        ApiResponse<CacheChangesResponse> CacheClientTargetTablePostWithHttpInfo(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICacheApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get information about cache tables, filtered by client.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDetailsResponse</returns>
        System.Threading.Tasks.Task<CacheDetailsResponse> CacheClientGetAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about cache tables, filtered by client.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheDetailsResponse>> CacheClientGetWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute a limited set of cql commands against the cache
        /// </summary>
        /// <remarks>
        /// insert, select, update or delete a single row of data from a single table
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheExecuteResponse</returns>
        System.Threading.Tasks.Task<CacheExecuteResponse> CacheClientTargetExecutePostAsync(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute a limited set of cql commands against the cache
        /// </summary>
        /// <remarks>
        /// insert, select, update or delete a single row of data from a single table
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheExecuteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheExecuteResponse>> CacheClientTargetExecutePostWithHttpInfoAsync(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client and target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDetailsResponse</returns>
        System.Threading.Tasks.Task<CacheDetailsResponse> CacheClientTargetGetAsync(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <remarks>
        /// Get information about cache tables, filtered by client and target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheDetailsResponse>> CacheClientTargetGetWithHttpInfoAsync(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete column from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes a column from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheApiResponse</returns>
        System.Threading.Tasks.Task<CacheApiResponse> CacheClientTargetTableColumnDeleteAsync(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete column from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes a column from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheApiResponse>> CacheClientTargetTableColumnDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete unused cache table and columns
        /// </summary>
        /// <remarks>
        /// Removes the columns and tables that are no longer used by any of the rules
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheApiDeleteResponse</returns>
        System.Threading.Tasks.Task<CacheApiDeleteResponse> CacheClientTargetTableColumnsDeleteAsync(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete unused cache table and columns
        /// </summary>
        /// <remarks>
        /// Removes the columns and tables that are no longer used by any of the rules
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheApiDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheApiDeleteResponse>> CacheClientTargetTableColumnsDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete data from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes data from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheApiResponse</returns>
        System.Threading.Tasks.Task<CacheApiResponse> CacheClientTargetTableDeleteAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete data from a cache table.
        /// </summary>
        /// <remarks>
        /// Removes data from a cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheApiResponse>> CacheClientTargetTableDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about a specific cache table.
        /// </summary>
        /// <remarks>
        /// Get information about a specific cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDetailsResponse</returns>
        System.Threading.Tasks.Task<CacheDetailsResponse> CacheClientTargetTableGetAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about a specific cache table.
        /// </summary>
        /// <remarks>
        /// Get information about a specific cache table.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheDetailsResponse>> CacheClientTargetTableGetWithHttpInfoAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Alter a cache table
        /// </summary>
        /// <remarks>
        /// Ensure that the cache table includes at least the set of columns requested
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheChangesResponse</returns>
        System.Threading.Tasks.Task<CacheChangesResponse> CacheClientTargetTablePostAsync(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Alter a cache table
        /// </summary>
        /// <remarks>
        /// Ensure that the cache table includes at least the set of columns requested
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheChangesResponse>> CacheClientTargetTablePostWithHttpInfoAsync(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICacheApi : ICacheApiSync, ICacheApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CacheApi : ICacheApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CacheApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CacheApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CacheApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CacheApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CacheApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CacheApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CacheApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CacheApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get information about cache tables, filtered by client. Get information about cache tables, filtered by client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDetailsResponse</returns>
        public CacheDetailsResponse CacheClientGet(string varClient, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheDetailsResponse> localVarResponse = CacheClientGetWithHttpInfo(varClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client. Get information about cache tables, filtered by client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDetailsResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheDetailsResponse> CacheClientGetWithHttpInfo(string varClient, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "CacheApi.CacheClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CacheDetailsResponse>("/cache/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client. Get information about cache tables, filtered by client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDetailsResponse</returns>
        public async System.Threading.Tasks.Task<CacheDetailsResponse> CacheClientGetAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheDetailsResponse> localVarResponse = await CacheClientGetWithHttpInfoAsync(varClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client. Get information about cache tables, filtered by client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheDetailsResponse>> CacheClientGetWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "CacheApi.CacheClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CacheDetailsResponse>("/cache/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute a limited set of cql commands against the cache insert, select, update or delete a single row of data from a single table
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheExecuteResponse</returns>
        public CacheExecuteResponse CacheClientTargetExecutePost(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheExecuteResponse> localVarResponse = CacheClientTargetExecutePostWithHttpInfo(varClient, target, cacheCQL);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a limited set of cql commands against the cache insert, select, update or delete a single row of data from a single table
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheExecuteResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheExecuteResponse> CacheClientTargetExecutePostWithHttpInfo(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetExecutePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetExecutePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = cacheCQL;

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetExecutePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CacheExecuteResponse>("/cache/{client}/{target}/execute", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetExecutePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute a limited set of cql commands against the cache insert, select, update or delete a single row of data from a single table
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheExecuteResponse</returns>
        public async System.Threading.Tasks.Task<CacheExecuteResponse> CacheClientTargetExecutePostAsync(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheExecuteResponse> localVarResponse = await CacheClientTargetExecutePostWithHttpInfoAsync(varClient, target, cacheCQL, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a limited set of cql commands against the cache insert, select, update or delete a single row of data from a single table
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheCQL"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheExecuteResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheExecuteResponse>> CacheClientTargetExecutePostWithHttpInfoAsync(string varClient, TargetEnum target, CacheCQL? cacheCQL = default(CacheCQL?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetExecutePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetExecutePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = cacheCQL;

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetExecutePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CacheExecuteResponse>("/cache/{client}/{target}/execute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetExecutePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client and target. Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDetailsResponse</returns>
        public CacheDetailsResponse CacheClientTargetGet(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheDetailsResponse> localVarResponse = CacheClientTargetGetWithHttpInfo(varClient, target, tabletype);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client and target. Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDetailsResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheDetailsResponse> CacheClientTargetGetWithHttpInfo(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (tabletype != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "tabletype", tabletype));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CacheDetailsResponse>("/cache/{client}/{target}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client and target. Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDetailsResponse</returns>
        public async System.Threading.Tasks.Task<CacheDetailsResponse> CacheClientTargetGetAsync(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheDetailsResponse> localVarResponse = await CacheClientTargetGetWithHttpInfoAsync(varClient, target, tabletype, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about cache tables, filtered by client and target. Get information about cache tables, filtered by client and target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="tabletype">If you only want a certain type of table, provide it here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheDetailsResponse>> CacheClientTargetGetWithHttpInfoAsync(string varClient, TargetEnum target, TableTypeEnum? tabletype = default(TableTypeEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (tabletype != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "tabletype", tabletype));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CacheDetailsResponse>("/cache/{client}/{target}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete column from a cache table. Removes a column from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheApiResponse</returns>
        public CacheApiResponse CacheClientTargetTableColumnDelete(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheApiResponse> localVarResponse = CacheClientTargetTableColumnDeleteWithHttpInfo(varClient, target, table, column, key, keys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete column from a cache table. Removes a column from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheApiResponse> CacheClientTargetTableColumnDeleteWithHttpInfo(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            // verify the required parameter 'column' is set
            if (column == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'column' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            localVarRequestOptions.PathParameters.Add("column", Alterian.JO.Client.ClientUtils.ParameterToString(column)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "keys", keys));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableColumnDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CacheApiResponse>("/cache/{client}/{target}/{table}/{column}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableColumnDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete column from a cache table. Removes a column from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheApiResponse</returns>
        public async System.Threading.Tasks.Task<CacheApiResponse> CacheClientTargetTableColumnDeleteAsync(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheApiResponse> localVarResponse = await CacheClientTargetTableColumnDeleteWithHttpInfoAsync(varClient, target, table, column, key, keys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete column from a cache table. Removes a column from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="column">Column name</param>
        /// <param name="key">Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheApiResponse>> CacheClientTargetTableColumnDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string table, string column, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }

            // verify the required parameter 'column' is set
            if (column == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'column' when calling CacheApi->CacheClientTargetTableColumnDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            localVarRequestOptions.PathParameters.Add("column", Alterian.JO.Client.ClientUtils.ParameterToString(column)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "keys", keys));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableColumnDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CacheApiResponse>("/cache/{client}/{target}/{table}/{column}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableColumnDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete unused cache table and columns Removes the columns and tables that are no longer used by any of the rules
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheApiDeleteResponse</returns>
        public CacheApiDeleteResponse CacheClientTargetTableColumnsDelete(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheApiDeleteResponse> localVarResponse = CacheClientTargetTableColumnsDeleteWithHttpInfo(varClient, target, table, preview);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete unused cache table and columns Removes the columns and tables that are no longer used by any of the rules
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheApiDeleteResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheApiDeleteResponse> CacheClientTargetTableColumnsDeleteWithHttpInfo(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableColumnsDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableColumnsDelete");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableColumnsDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "preview", preview));

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableColumnsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CacheApiDeleteResponse>("/cache/{client}/{target}/{table}/columns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableColumnsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete unused cache table and columns Removes the columns and tables that are no longer used by any of the rules
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheApiDeleteResponse</returns>
        public async System.Threading.Tasks.Task<CacheApiDeleteResponse> CacheClientTargetTableColumnsDeleteAsync(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheApiDeleteResponse> localVarResponse = await CacheClientTargetTableColumnsDeleteWithHttpInfoAsync(varClient, target, table, preview, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete unused cache table and columns Removes the columns and tables that are no longer used by any of the rules
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="preview">By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheApiDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheApiDeleteResponse>> CacheClientTargetTableColumnsDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string table, bool preview, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableColumnsDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableColumnsDelete");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableColumnsDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "preview", preview));

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableColumnsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CacheApiDeleteResponse>("/cache/{client}/{target}/{table}/columns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableColumnsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete data from a cache table. Removes data from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheApiResponse</returns>
        public CacheApiResponse CacheClientTargetTableDelete(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheApiResponse> localVarResponse = CacheClientTargetTableDeleteWithHttpInfo(varClient, target, table, key, keys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete data from a cache table. Removes data from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheApiResponse> CacheClientTargetTableDeleteWithHttpInfo(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableDelete");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "keys", keys));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CacheApiResponse>("/cache/{client}/{target}/{table}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete data from a cache table. Removes data from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheApiResponse</returns>
        public async System.Threading.Tasks.Task<CacheApiResponse> CacheClientTargetTableDeleteAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheApiResponse> localVarResponse = await CacheClientTargetTableDeleteWithHttpInfoAsync(varClient, target, table, key, keys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete data from a cache table. Removes data from a cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning. (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheApiResponse>> CacheClientTargetTableDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableDelete");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "keys", keys));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CacheApiResponse>("/cache/{client}/{target}/{table}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about a specific cache table. Get information about a specific cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDetailsResponse</returns>
        public CacheDetailsResponse CacheClientTargetTableGet(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheDetailsResponse> localVarResponse = CacheClientTargetTableGetWithHttpInfo(varClient, target, table, key, keys, sample, pivot, fieldvalue, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a specific cache table. Get information about a specific cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDetailsResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheDetailsResponse> CacheClientTargetTableGetWithHttpInfo(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableGet");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "keys", keys));
            }
            if (sample != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sample", sample));
            }
            if (pivot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "pivot", pivot));
            }
            if (fieldvalue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "fieldvalue", fieldvalue));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CacheDetailsResponse>("/cache/{client}/{target}/{table}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about a specific cache table. Get information about a specific cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDetailsResponse</returns>
        public async System.Threading.Tasks.Task<CacheDetailsResponse> CacheClientTargetTableGetAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheDetailsResponse> localVarResponse = await CacheClientTargetTableGetWithHttpInfoAsync(varClient, target, table, key, keys, sample, pivot, fieldvalue, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about a specific cache table. Get information about a specific cache table.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="table">Table name</param>
        /// <param name="key">If you want a row of data to be returned, provide the partition key (optional)</param>
        /// <param name="keys">Values for clustering keys. If the table has a composite key, provide the values in order. (optional)</param>
        /// <param name="sample">return a sample of n rows from the table (optional)</param>
        /// <param name="pivot">Would you like the data pivoted? (Only for CSV report) (optional)</param>
        /// <param name="fieldvalue">If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key (optional)</param>
        /// <param name="limit">If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheDetailsResponse>> CacheClientTargetTableGetWithHttpInfoAsync(string varClient, TargetEnum target, string table, string? key = default(string?), List<string>? keys = default(List<string>?), int? sample = default(int?), bool? pivot = default(bool?), string? fieldvalue = default(string?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTableGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTableGet");
            }

            // verify the required parameter 'table' is set
            if (table == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'table' when calling CacheApi->CacheClientTargetTableGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("table", Alterian.JO.Client.ClientUtils.ParameterToString(table)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keys != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "keys", keys));
            }
            if (sample != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sample", sample));
            }
            if (pivot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "pivot", pivot));
            }
            if (fieldvalue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "fieldvalue", fieldvalue));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTableGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CacheDetailsResponse>("/cache/{client}/{target}/{table}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTableGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alter a cache table Ensure that the cache table includes at least the set of columns requested
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheChangesResponse</returns>
        public CacheChangesResponse CacheClientTargetTablePost(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheChangesResponse> localVarResponse = CacheClientTargetTablePostWithHttpInfo(varClient, target, cacheTableDefinition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Alter a cache table Ensure that the cache table includes at least the set of columns requested
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheChangesResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheChangesResponse> CacheClientTargetTablePostWithHttpInfo(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTablePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTablePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = cacheTableDefinition;

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTablePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CacheChangesResponse>("/cache/{client}/{target}/table", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTablePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alter a cache table Ensure that the cache table includes at least the set of columns requested
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheChangesResponse</returns>
        public async System.Threading.Tasks.Task<CacheChangesResponse> CacheClientTargetTablePostAsync(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheChangesResponse> localVarResponse = await CacheClientTargetTablePostWithHttpInfoAsync(varClient, target, cacheTableDefinition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Alter a cache table Ensure that the cache table includes at least the set of columns requested
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="cacheTableDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheChangesResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheChangesResponse>> CacheClientTargetTablePostWithHttpInfoAsync(string varClient, TargetEnum target, CacheTableDefinition? cacheTableDefinition = default(CacheTableDefinition?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling CacheApi->CacheClientTargetTablePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling CacheApi->CacheClientTargetTablePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.Data = cacheTableDefinition;

            localVarRequestOptions.Operation = "CacheApi.CacheClientTargetTablePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CacheChangesResponse>("/cache/{client}/{target}/table", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheClientTargetTablePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

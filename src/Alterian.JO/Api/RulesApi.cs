/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download the rule file (KTR) for a running rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadRuleTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Download the rule file (KTR) for a running rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadRuleTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Get information about all published rules on the server
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleGet(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get information about all published rules on the server
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleGetWithHttpInfo(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Unpublish all rules that this client has published to the given target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetClientDelete(TargetEnum target, string varClient, int operationIndex = 0);

        /// <summary>
        /// Unpublish all rules that this client has published to the given target.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetClientDeleteWithHttpInfo(TargetEnum target, string varClient, int operationIndex = 0);
        /// <summary>
        /// Validate a new Rule Designer JSON
        /// </summary>
        /// <remarks>
        /// This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleDesignerResponse</returns>
        RuleDesignerResponse RuleTargetClientDesignerPut(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0);

        /// <summary>
        /// Validate a new Rule Designer JSON
        /// </summary>
        /// <remarks>
        /// This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleDesignerResponse</returns>
        ApiResponse<RuleDesignerResponse> RuleTargetClientDesignerPutWithHttpInfo(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0);
        /// <summary>
        /// Get information about all rules published by this client to the given target.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetClientGet(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get information about all rules published by this client to the given target.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetClientGetWithHttpInfo(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
        /// </summary>
        /// <remarks>
        /// This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetClientRulenameAutoloaderGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
        /// </summary>
        /// <remarks>
        /// This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetClientRulenameAutoloaderGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Save the JSON for an autoloader rule
        /// </summary>
        /// <remarks>
        /// This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        RuleAndStateResponse RuleTargetClientRulenameAutoloaderPost(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Save the JSON for an autoloader rule
        /// </summary>
        /// <remarks>
        /// This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameAutoloaderPostWithHttpInfo(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Copy this rule to the given target.
        /// </summary>
        /// <remarks>
        /// A copy of this rule will be started in the given target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        RuleAndStateResponse RuleTargetClientRulenameCopytoPost(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0);

        /// <summary>
        /// Copy this rule to the given target.
        /// </summary>
        /// <remarks>
        /// A copy of this rule will be started in the given target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameCopytoPostWithHttpInfo(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0);
        /// <summary>
        /// Get information about the data grid for a specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataGridApiResponse</returns>
        DataGridApiResponse RuleTargetClientRulenameDatagridDataGridNameGet(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get information about the data grid for a specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataGridApiResponse</returns>
        ApiResponse<DataGridApiResponse> RuleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Enter new data for an exisiting data grid and update
        /// </summary>
        /// <remarks>
        /// If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        RuleAndStateResponse RuleTargetClientRulenameDatagridDataGridNamePost(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0);

        /// <summary>
        /// Enter new data for an exisiting data grid and update
        /// </summary>
        /// <remarks>
        /// If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0);
        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid
        /// </summary>
        /// <remarks>
        /// This is to append new data only. Existing data remains unchanged
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        RuleAndStateResponse RuleTargetClientRulenameDatagridDataGridNameRowsPost(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0);

        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid
        /// </summary>
        /// <remarks>
        /// This is to append new data only. Existing data remains unchanged
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0);
        /// <summary>
        /// Unpublish a specific rule.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetClientRulenameDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Unpublish a specific rule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetClientRulenameDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetClientRulenameDesignerGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetClientRulenameDesignerGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Save or validate the rule designer JSON for a rule
        /// </summary>
        /// <remarks>
        /// This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleDesignerResponse</returns>
        RuleDesignerResponse RuleTargetClientRulenameDesignerPost(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0);

        /// <summary>
        /// Save or validate the rule designer JSON for a rule
        /// </summary>
        /// <remarks>
        /// This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleDesignerResponse</returns>
        ApiResponse<RuleDesignerResponse> RuleTargetClientRulenameDesignerPostWithHttpInfo(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0);
        /// <summary>
        /// Add a new rule via the rule designer JSON.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenameDesignerPut(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add a new rule via the rule designer JSON.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenameDesignerPutWithHttpInfo(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get information about one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get information about one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// update the default values for parameters.
        /// </summary>
        /// <remarks>
        /// this will update the rule with new default parameters.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        RuleAndStateResponse RuleTargetClientRulenameParameterPost(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// update the default values for parameters.
        /// </summary>
        /// <remarks>
        /// this will update the rule with new default parameters.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameParameterPostWithHttpInfo(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Pause this rule
        /// </summary>
        /// <remarks>
        /// Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenamePauseDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Pause this rule
        /// </summary>
        /// <remarks>
        /// Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenamePauseDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Start or restart one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenamePost(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Start or restart one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenamePostWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Update the rule&#39;s priority weighting
        /// </summary>
        /// <remarks>
        /// This will set a new value for a rule&#39;s priority weighting
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        RuleAndStateResponse RuleTargetClientRulenamePriorityWeightingPost(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Update the rule&#39;s priority weighting
        /// </summary>
        /// <remarks>
        /// This will set a new value for a rule&#39;s priority weighting
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        ApiResponse<RuleAndStateResponse> RuleTargetClientRulenamePriorityWeightingPostWithHttpInfo(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Perform extended actions to rules
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenameResetDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Perform extended actions to rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenameResetDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule
        /// </summary>
        /// <remarks>
        /// Generates a JSON Schema object, following json-schema.org specification
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiJSONArrayResponse</returns>
        ApiJSONArrayResponse RuleTargetClientRulenameSampleDataGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule
        /// </summary>
        /// <remarks>
        /// Generates a JSON Schema object, following json-schema.org specification
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiJSONArrayResponse</returns>
        ApiResponse<ApiJSONArrayResponse> RuleTargetClientRulenameSampleDataGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Make this rule start snoozing
        /// </summary>
        /// <remarks>
        /// Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenameSnoozePost(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Make this rule start snoozing
        /// </summary>
        /// <remarks>
        /// Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenameSnoozePostWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Delete all test data
        /// </summary>
        /// <remarks>
        /// Deletes all of user defined test data for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenameTestDataDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Delete all test data
        /// </summary>
        /// <remarks>
        /// Deletes all of user defined test data for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenameTestDataDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Get the rule&#39;s test data and headers information
        /// </summary>
        /// <remarks>
        /// Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TestDataResponse</returns>
        TestDataResponse RuleTargetClientRulenameTestDataGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Get the rule&#39;s test data and headers information
        /// </summary>
        /// <remarks>
        /// Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TestDataResponse</returns>
        ApiResponse<TestDataResponse> RuleTargetClientRulenameTestDataGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Add test data to rule
        /// </summary>
        /// <remarks>
        /// User defined test data rows will be stored for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse RuleTargetClientRulenameTestDataPost(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0);

        /// <summary>
        /// Add test data to rule
        /// </summary>
        /// <remarks>
        /// User defined test data rows will be stored for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> RuleTargetClientRulenameTestDataPostWithHttpInfo(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0);
        /// <summary>
        /// Get information about all rules published by all clients to the given target
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        RuleList RuleTargetGet(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get information about all rules published by all clients to the given target
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        ApiResponse<RuleList> RuleTargetGetWithHttpInfo(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download the rule file (KTR) for a running rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadRuleTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download the rule file (KTR) for a running rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadRuleTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about all published rules on the server
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleGetAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about all published rules on the server
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unpublish all rules that this client has published to the given target.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetClientDeleteAsync(TargetEnum target, string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unpublish all rules that this client has published to the given target.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetClientDeleteWithHttpInfoAsync(TargetEnum target, string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate a new Rule Designer JSON
        /// </summary>
        /// <remarks>
        /// This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleDesignerResponse</returns>
        System.Threading.Tasks.Task<RuleDesignerResponse> RuleTargetClientDesignerPutAsync(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate a new Rule Designer JSON
        /// </summary>
        /// <remarks>
        /// This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleDesignerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleDesignerResponse>> RuleTargetClientDesignerPutWithHttpInfoAsync(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about all rules published by this client to the given target.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetClientGetAsync(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about all rules published by this client to the given target.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetClientGetWithHttpInfoAsync(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
        /// </summary>
        /// <remarks>
        /// This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameAutoloaderGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
        /// </summary>
        /// <remarks>
        /// This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetClientRulenameAutoloaderGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save the JSON for an autoloader rule
        /// </summary>
        /// <remarks>
        /// This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameAutoloaderPostAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save the JSON for an autoloader rule
        /// </summary>
        /// <remarks>
        /// This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameAutoloaderPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy this rule to the given target.
        /// </summary>
        /// <remarks>
        /// A copy of this rule will be started in the given target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameCopytoPostAsync(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy this rule to the given target.
        /// </summary>
        /// <remarks>
        /// A copy of this rule will be started in the given target.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameCopytoPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about the data grid for a specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataGridApiResponse</returns>
        System.Threading.Tasks.Task<DataGridApiResponse> RuleTargetClientRulenameDatagridDataGridNameGetAsync(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about the data grid for a specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataGridApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataGridApiResponse>> RuleTargetClientRulenameDatagridDataGridNameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enter new data for an exisiting data grid and update
        /// </summary>
        /// <remarks>
        /// If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNamePostAsync(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enter new data for an exisiting data grid and update
        /// </summary>
        /// <remarks>
        /// If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameDatagridDataGridNamePostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid
        /// </summary>
        /// <remarks>
        /// This is to append new data only. Existing data remains unchanged
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNameRowsPostAsync(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid
        /// </summary>
        /// <remarks>
        /// This is to append new data only. Existing data remains unchanged
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unpublish a specific rule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unpublish a specific rule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetClientRulenameDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameDesignerGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetClientRulenameDesignerGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save or validate the rule designer JSON for a rule
        /// </summary>
        /// <remarks>
        /// This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleDesignerResponse</returns>
        System.Threading.Tasks.Task<RuleDesignerResponse> RuleTargetClientRulenameDesignerPostAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save or validate the rule designer JSON for a rule
        /// </summary>
        /// <remarks>
        /// This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleDesignerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleDesignerResponse>> RuleTargetClientRulenameDesignerPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new rule via the rule designer JSON.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameDesignerPutAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new rule via the rule designer JSON.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenameDesignerPutWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update the default values for parameters.
        /// </summary>
        /// <remarks>
        /// this will update the rule with new default parameters.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameParameterPostAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update the default values for parameters.
        /// </summary>
        /// <remarks>
        /// this will update the rule with new default parameters.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameParameterPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause this rule
        /// </summary>
        /// <remarks>
        /// Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenamePauseDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pause this rule
        /// </summary>
        /// <remarks>
        /// Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenamePauseDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start or restart one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenamePostAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start or restart one specific, published rule.
        /// </summary>
        /// <remarks>
        /// Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenamePostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the rule&#39;s priority weighting
        /// </summary>
        /// <remarks>
        /// This will set a new value for a rule&#39;s priority weighting
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenamePriorityWeightingPostAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the rule&#39;s priority weighting
        /// </summary>
        /// <remarks>
        /// This will set a new value for a rule&#39;s priority weighting
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenamePriorityWeightingPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Perform extended actions to rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameResetDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Perform extended actions to rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenameResetDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule
        /// </summary>
        /// <remarks>
        /// Generates a JSON Schema object, following json-schema.org specification
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiJSONArrayResponse</returns>
        System.Threading.Tasks.Task<ApiJSONArrayResponse> RuleTargetClientRulenameSampleDataGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule
        /// </summary>
        /// <remarks>
        /// Generates a JSON Schema object, following json-schema.org specification
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiJSONArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiJSONArrayResponse>> RuleTargetClientRulenameSampleDataGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make this rule start snoozing
        /// </summary>
        /// <remarks>
        /// Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameSnoozePostAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make this rule start snoozing
        /// </summary>
        /// <remarks>
        /// Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenameSnoozePostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all test data
        /// </summary>
        /// <remarks>
        /// Deletes all of user defined test data for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameTestDataDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all test data
        /// </summary>
        /// <remarks>
        /// Deletes all of user defined test data for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenameTestDataDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the rule&#39;s test data and headers information
        /// </summary>
        /// <remarks>
        /// Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestDataResponse</returns>
        System.Threading.Tasks.Task<TestDataResponse> RuleTargetClientRulenameTestDataGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the rule&#39;s test data and headers information
        /// </summary>
        /// <remarks>
        /// Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestDataResponse>> RuleTargetClientRulenameTestDataGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add test data to rule
        /// </summary>
        /// <remarks>
        /// User defined test data rows will be stored for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameTestDataPostAsync(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add test data to rule
        /// </summary>
        /// <remarks>
        /// User defined test data rows will be stored for this rule
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> RuleTargetClientRulenameTestDataPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about all rules published by all clients to the given target
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        System.Threading.Tasks.Task<RuleList> RuleTargetGetAsync(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about all rules published by all clients to the given target
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleList>> RuleTargetGetWithHttpInfoAsync(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApi : IRulesApiSync, IRulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RulesApi : IRulesApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RulesApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RulesApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RulesApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download the rule file (KTR) for a running rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadRuleTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadRuleTargetClientRulenameGetWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the rule file (KTR) for a running rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Alterian.JO.Client.ApiResponse<System.IO.Stream> DownloadRuleTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->DownloadRuleTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->DownloadRuleTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->DownloadRuleTargetClientRulenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.DownloadRuleTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/download/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadRuleTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the rule file (KTR) for a running rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadRuleTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadRuleTargetClientRulenameGetWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the rule file (KTR) for a running rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<System.IO.Stream>> DownloadRuleTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->DownloadRuleTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->DownloadRuleTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->DownloadRuleTargetClientRulenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.DownloadRuleTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/download/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadRuleTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all published rules on the server Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleGet(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleGetWithHttpInfo(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all published rules on the server Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleGetWithHttpInfo(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (createdRuleUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "createdRuleUrl", createdRuleUrl));
            }
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (templateFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateFilter", templateFilter));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleList>("/rule", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all published rules on the server Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleGetAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleGetWithHttpInfoAsync(from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all published rules on the server Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (createdRuleUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "createdRuleUrl", createdRuleUrl));
            }
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (templateFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateFilter", templateFilter));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleList>("/rule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish all rules that this client has published to the given target. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetClientDelete(TargetEnum target, string varClient, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetClientDeleteWithHttpInfo(target, varClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish all rules that this client has published to the given target. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetClientDeleteWithHttpInfo(TargetEnum target, string varClient, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RuleList>("/rule/{target}/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish all rules that this client has published to the given target. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetClientDeleteAsync(TargetEnum target, string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetClientDeleteWithHttpInfoAsync(target, varClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish all rules that this client has published to the given target. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetClientDeleteWithHttpInfoAsync(TargetEnum target, string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RuleList>("/rule/{target}/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a new Rule Designer JSON This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleDesignerResponse</returns>
        public RuleDesignerResponse RuleTargetClientDesignerPut(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleDesignerResponse> localVarResponse = RuleTargetClientDesignerPutWithHttpInfo(target, varClient, ruleData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a new Rule Designer JSON This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleDesignerResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleDesignerResponse> RuleTargetClientDesignerPutWithHttpInfo(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientDesignerPut");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientDesignerPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.Data = ruleData;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientDesignerPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RuleDesignerResponse>("/rule/{target}/{client}/designer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientDesignerPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a new Rule Designer JSON This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleDesignerResponse</returns>
        public async System.Threading.Tasks.Task<RuleDesignerResponse> RuleTargetClientDesignerPutAsync(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleDesignerResponse> localVarResponse = await RuleTargetClientDesignerPutWithHttpInfoAsync(target, varClient, ruleData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a new Rule Designer JSON This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleDesignerResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleDesignerResponse>> RuleTargetClientDesignerPutWithHttpInfoAsync(TargetEnum target, string varClient, RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientDesignerPut");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientDesignerPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.Data = ruleData;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientDesignerPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RuleDesignerResponse>("/rule/{target}/{client}/designer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientDesignerPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all rules published by this client to the given target. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetClientGet(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetClientGetWithHttpInfo(target, varClient, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all rules published by this client to the given target. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetClientGetWithHttpInfo(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (createdRuleUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "createdRuleUrl", createdRuleUrl));
            }
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (templateFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateFilter", templateFilter));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleList>("/rule/{target}/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all rules published by this client to the given target. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetClientGetAsync(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetClientGetWithHttpInfoAsync(target, varClient, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all rules published by this client to the given target. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetClientGetWithHttpInfoAsync(TargetEnum target, string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (createdRuleUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "createdRuleUrl", createdRuleUrl));
            }
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (templateFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateFilter", templateFilter));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleList>("/rule/{target}/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetClientRulenameAutoloaderGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetClientRulenameAutoloaderGetWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetClientRulenameAutoloaderGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameAutoloaderGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameAutoloaderGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameAutoloaderGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameAutoloaderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleList>("/rule/{target}/{client}/{rulename}/autoloader", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameAutoloaderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameAutoloaderGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetClientRulenameAutoloaderGetWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetClientRulenameAutoloaderGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameAutoloaderGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameAutoloaderGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameAutoloaderGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameAutoloaderGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleList>("/rule/{target}/{client}/{rulename}/autoloader", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameAutoloaderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the JSON for an autoloader rule This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        public RuleAndStateResponse RuleTargetClientRulenameAutoloaderPost(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = RuleTargetClientRulenameAutoloaderPostWithHttpInfo(target, varClient, rulename, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the JSON for an autoloader rule This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameAutoloaderPostWithHttpInfo(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameAutoloaderPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameAutoloaderPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameAutoloaderPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameAutoloaderPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/autoloader", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameAutoloaderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the JSON for an autoloader rule This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        public async System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameAutoloaderPostAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = await RuleTargetClientRulenameAutoloaderPostWithHttpInfoAsync(target, varClient, rulename, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the JSON for an autoloader rule This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">Specify the autoloader JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameAutoloaderPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameAutoloaderPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameAutoloaderPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameAutoloaderPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameAutoloaderPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/autoloader", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameAutoloaderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy this rule to the given target. A copy of this rule will be started in the given target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        public RuleAndStateResponse RuleTargetClientRulenameCopytoPost(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = RuleTargetClientRulenameCopytoPostWithHttpInfo(target, varClient, rulename, destinationtarget, destinationTarget);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy this rule to the given target. A copy of this rule will be started in the given target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameCopytoPostWithHttpInfo(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameCopytoPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameCopytoPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameCopytoPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (destinationtarget != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "destinationtarget", destinationtarget));
            }
            localVarRequestOptions.Data = destinationTarget;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameCopytoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/copyto", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameCopytoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy this rule to the given target. A copy of this rule will be started in the given target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        public async System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameCopytoPostAsync(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = await RuleTargetClientRulenameCopytoPostWithHttpInfoAsync(target, varClient, rulename, destinationtarget, destinationTarget, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy this rule to the given target. A copy of this rule will be started in the given target.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="destinationtarget">The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred (optional)</param>
        /// <param name="destinationTarget">Where the copy will run. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameCopytoPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, TargetEnum? destinationtarget = default(TargetEnum?), DestinationTarget? destinationTarget = default(DestinationTarget?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameCopytoPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameCopytoPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameCopytoPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (destinationtarget != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "destinationtarget", destinationtarget));
            }
            localVarRequestOptions.Data = destinationTarget;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameCopytoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/copyto", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameCopytoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the data grid for a specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataGridApiResponse</returns>
        public DataGridApiResponse RuleTargetClientRulenameDatagridDataGridNameGet(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<DataGridApiResponse> localVarResponse = RuleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(target, varClient, rulename, dataGridName, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the data grid for a specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataGridApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<DataGridApiResponse> RuleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            // verify the required parameter 'dataGridName' is set
            if (dataGridName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'dataGridName' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataGridName", Alterian.JO.Client.ClientUtils.ParameterToString(dataGridName)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDatagridDataGridNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataGridApiResponse>("/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDatagridDataGridNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the data grid for a specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataGridApiResponse</returns>
        public async System.Threading.Tasks.Task<DataGridApiResponse> RuleTargetClientRulenameDatagridDataGridNameGetAsync(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<DataGridApiResponse> localVarResponse = await RuleTargetClientRulenameDatagridDataGridNameGetWithHttpInfoAsync(target, varClient, rulename, dataGridName, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the data grid for a specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataGridApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<DataGridApiResponse>> RuleTargetClientRulenameDatagridDataGridNameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, string dataGridName, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }

            // verify the required parameter 'dataGridName' is set
            if (dataGridName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'dataGridName' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataGridName", Alterian.JO.Client.ClientUtils.ParameterToString(dataGridName)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDatagridDataGridNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataGridApiResponse>("/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDatagridDataGridNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enter new data for an exisiting data grid and update If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        public RuleAndStateResponse RuleTargetClientRulenameDatagridDataGridNamePost(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = RuleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(target, varClient, rulename, dataGridName, dataGridDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enter new data for an exisiting data grid and update If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            // verify the required parameter 'dataGridName' is set
            if (dataGridName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'dataGridName' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataGridName", Alterian.JO.Client.ClientUtils.ParameterToString(dataGridName)); // path parameter
            localVarRequestOptions.Data = dataGridDetails;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDatagridDataGridNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDatagridDataGridNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enter new data for an exisiting data grid and update If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        public async System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNamePostAsync(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = await RuleTargetClientRulenameDatagridDataGridNamePostWithHttpInfoAsync(target, varClient, rulename, dataGridName, dataGridDetails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enter new data for an exisiting data grid and update If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridDetails">Specify the data for the updated data grid. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameDatagridDataGridNamePostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, string dataGridName, List<DataGridDetails>? dataGridDetails = default(List<DataGridDetails>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }

            // verify the required parameter 'dataGridName' is set
            if (dataGridName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'dataGridName' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataGridName", Alterian.JO.Client.ClientUtils.ParameterToString(dataGridName)); // path parameter
            localVarRequestOptions.Data = dataGridDetails;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDatagridDataGridNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDatagridDataGridNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid This is to append new data only. Existing data remains unchanged
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        public RuleAndStateResponse RuleTargetClientRulenameDatagridDataGridNameRowsPost(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = RuleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(target, varClient, rulename, dataGridName, dataGridRow);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid This is to append new data only. Existing data remains unchanged
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            // verify the required parameter 'dataGridName' is set
            if (dataGridName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'dataGridName' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataGridName", Alterian.JO.Client.ClientUtils.ParameterToString(dataGridName)); // path parameter
            localVarRequestOptions.Data = dataGridRow;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDatagridDataGridNameRowsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}/rows", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDatagridDataGridNameRowsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid This is to append new data only. Existing data remains unchanged
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        public async System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameDatagridDataGridNameRowsPostAsync(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = await RuleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfoAsync(target, varClient, rulename, dataGridName, dataGridRow, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new data grid rows to a rule&#39;s Data Grid This is to append new data only. Existing data remains unchanged
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="dataGridName">Name of the Data Grid that will be updated</param>
        /// <param name="dataGridRow">Data grid rows (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, string dataGridName, DataGridRow? dataGridRow = default(DataGridRow?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }

            // verify the required parameter 'dataGridName' is set
            if (dataGridName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'dataGridName' when calling RulesApi->RuleTargetClientRulenameDatagridDataGridNameRowsPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.PathParameters.Add("dataGridName", Alterian.JO.Client.ClientUtils.ParameterToString(dataGridName)); // path parameter
            localVarRequestOptions.Data = dataGridRow;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDatagridDataGridNameRowsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}/rows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDatagridDataGridNameRowsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish a specific rule. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetClientRulenameDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetClientRulenameDeleteWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish a specific rule. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetClientRulenameDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RuleList>("/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish a specific rule. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetClientRulenameDeleteWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish a specific rule. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetClientRulenameDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RuleList>("/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetClientRulenameDesignerGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetClientRulenameDesignerGetWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetClientRulenameDesignerGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDesignerGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDesignerGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDesignerGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDesignerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleList>("/rule/{target}/{client}/{rulename}/designer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDesignerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameDesignerGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetClientRulenameDesignerGetWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetClientRulenameDesignerGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDesignerGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDesignerGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDesignerGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDesignerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleList>("/rule/{target}/{client}/{rulename}/designer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDesignerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save or validate the rule designer JSON for a rule This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleDesignerResponse</returns>
        public RuleDesignerResponse RuleTargetClientRulenameDesignerPost(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleDesignerResponse> localVarResponse = RuleTargetClientRulenameDesignerPostWithHttpInfo(target, varClient, rulename, validate, ruleData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save or validate the rule designer JSON for a rule This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleDesignerResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleDesignerResponse> RuleTargetClientRulenameDesignerPostWithHttpInfo(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDesignerPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDesignerPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDesignerPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = ruleData;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDesignerPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleDesignerResponse>("/rule/{target}/{client}/{rulename}/designer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDesignerPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save or validate the rule designer JSON for a rule This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleDesignerResponse</returns>
        public async System.Threading.Tasks.Task<RuleDesignerResponse> RuleTargetClientRulenameDesignerPostAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleDesignerResponse> localVarResponse = await RuleTargetClientRulenameDesignerPostWithHttpInfoAsync(target, varClient, rulename, validate, ruleData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save or validate the rule designer JSON for a rule This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="ruleData">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleDesignerResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleDesignerResponse>> RuleTargetClientRulenameDesignerPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), RuleData? ruleData = default(RuleData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDesignerPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDesignerPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDesignerPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            localVarRequestOptions.Data = ruleData;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDesignerPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleDesignerResponse>("/rule/{target}/{client}/{rulename}/designer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDesignerPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new rule via the rule designer JSON. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenameDesignerPut(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenameDesignerPutWithHttpInfo(target, varClient, rulename, validate, download, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new rule via the rule designer JSON. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenameDesignerPutWithHttpInfo(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDesignerPut");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDesignerPut");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDesignerPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (download != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "download", download));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDesignerPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/rule/{target}/{client}/{rulename}/designer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDesignerPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new rule via the rule designer JSON. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameDesignerPutAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenameDesignerPutWithHttpInfoAsync(target, varClient, rulename, validate, download, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new rule via the rule designer JSON. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="download">Download the posted rule designer JSON as a .ktr file (optional)</param>
        /// <param name="body">Specify the rule designer JSON for the updated rule. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenameDesignerPutWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, bool? validate = default(bool?), bool? download = default(bool?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameDesignerPut");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameDesignerPut");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameDesignerPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (download != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "download", download));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameDesignerPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/rule/{target}/{client}/{rulename}/designer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameDesignerPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about one specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetClientRulenameGetWithHttpInfo(target, varClient, rulename, healthScore, includeStatistics, checkTemplateLatestVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about one specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleList>("/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about one specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetClientRulenameGetWithHttpInfoAsync(target, varClient, rulename, healthScore, includeStatistics, checkTemplateLatestVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about one specific, published rule. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), bool? checkTemplateLatestVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleList>("/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update the default values for parameters. this will update the rule with new default parameters.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        public RuleAndStateResponse RuleTargetClientRulenameParameterPost(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = RuleTargetClientRulenameParameterPostWithHttpInfo(target, varClient, rulename, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update the default values for parameters. this will update the rule with new default parameters.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleAndStateResponse> RuleTargetClientRulenameParameterPostWithHttpInfo(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameParameterPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameParameterPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameParameterPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameParameterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/parameter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameParameterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update the default values for parameters. this will update the rule with new default parameters.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        public async System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenameParameterPostAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = await RuleTargetClientRulenameParameterPostWithHttpInfoAsync(target, varClient, rulename, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update the default values for parameters. this will update the rule with new default parameters.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenameParameterPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameParameterPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameParameterPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameParameterPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameParameterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/parameter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameParameterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause this rule Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenamePauseDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenamePauseDeleteWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause this rule Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenamePauseDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenamePauseDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenamePauseDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenamePauseDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenamePauseDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/rule/{target}/{client}/{rulename}/pause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenamePauseDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause this rule Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenamePauseDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenamePauseDeleteWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause this rule Cause this rule to go to &#39;waiting&#39; state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenamePauseDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenamePauseDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenamePauseDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenamePauseDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenamePauseDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/rule/{target}/{client}/{rulename}/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenamePauseDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start or restart one specific, published rule. Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenamePost(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenamePostWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start or restart one specific, published rule. Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenamePostWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenamePost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenamePost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start or restart one specific, published rule. Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenamePostAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenamePostWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start or restart one specific, published rule. Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenamePostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenamePost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenamePost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/rule/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the rule&#39;s priority weighting This will set a new value for a rule&#39;s priority weighting
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleAndStateResponse</returns>
        public RuleAndStateResponse RuleTargetClientRulenamePriorityWeightingPost(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = RuleTargetClientRulenamePriorityWeightingPostWithHttpInfo(target, varClient, rulename, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the rule&#39;s priority weighting This will set a new value for a rule&#39;s priority weighting
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleAndStateResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleAndStateResponse> RuleTargetClientRulenamePriorityWeightingPostWithHttpInfo(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenamePriorityWeightingPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenamePriorityWeightingPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenamePriorityWeightingPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "example"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenamePriorityWeightingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/priorityWeighting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenamePriorityWeightingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the rule&#39;s priority weighting This will set a new value for a rule&#39;s priority weighting
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleAndStateResponse</returns>
        public async System.Threading.Tasks.Task<RuleAndStateResponse> RuleTargetClientRulenamePriorityWeightingPostAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleAndStateResponse> localVarResponse = await RuleTargetClientRulenamePriorityWeightingPostWithHttpInfoAsync(target, varClient, rulename, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the rule&#39;s priority weighting This will set a new value for a rule&#39;s priority weighting
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="body">key value pairs of param name and value. Ensure wrapped in {} (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleAndStateResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleAndStateResponse>> RuleTargetClientRulenamePriorityWeightingPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenamePriorityWeightingPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenamePriorityWeightingPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenamePriorityWeightingPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "example"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenamePriorityWeightingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RuleAndStateResponse>("/rule/{target}/{client}/{rulename}/priorityWeighting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenamePriorityWeightingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform extended actions to rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenameResetDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenameResetDeleteWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform extended actions to rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenameResetDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameResetDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameResetDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameResetDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameResetDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/rule/{target}/{client}/{rulename}/reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameResetDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform extended actions to rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameResetDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenameResetDeleteWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform extended actions to rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenameResetDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameResetDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameResetDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameResetDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameResetDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/rule/{target}/{client}/{rulename}/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameResetDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule Generates a JSON Schema object, following json-schema.org specification
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiJSONArrayResponse</returns>
        public ApiJSONArrayResponse RuleTargetClientRulenameSampleDataGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiJSONArrayResponse> localVarResponse = RuleTargetClientRulenameSampleDataGetWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule Generates a JSON Schema object, following json-schema.org specification
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiJSONArrayResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiJSONArrayResponse> RuleTargetClientRulenameSampleDataGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameSampleDataGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameSampleDataGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameSampleDataGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameSampleDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiJSONArrayResponse>("/rule/{target}/{client}/{rulename}/sampleData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameSampleDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule Generates a JSON Schema object, following json-schema.org specification
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiJSONArrayResponse</returns>
        public async System.Threading.Tasks.Task<ApiJSONArrayResponse> RuleTargetClientRulenameSampleDataGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiJSONArrayResponse> localVarResponse = await RuleTargetClientRulenameSampleDataGetWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JSON Schema representation of the data expected by the rule Generates a JSON Schema object, following json-schema.org specification
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiJSONArrayResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiJSONArrayResponse>> RuleTargetClientRulenameSampleDataGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameSampleDataGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameSampleDataGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameSampleDataGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameSampleDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiJSONArrayResponse>("/rule/{target}/{client}/{rulename}/sampleData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameSampleDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make this rule start snoozing Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenameSnoozePost(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenameSnoozePostWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make this rule start snoozing Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenameSnoozePostWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameSnoozePost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameSnoozePost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameSnoozePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameSnoozePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/rule/{target}/{client}/{rulename}/snooze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameSnoozePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make this rule start snoozing Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameSnoozePostAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenameSnoozePostWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make this rule start snoozing Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenameSnoozePostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameSnoozePost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameSnoozePost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameSnoozePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameSnoozePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/rule/{target}/{client}/{rulename}/snooze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameSnoozePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all test data Deletes all of user defined test data for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenameTestDataDelete(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenameTestDataDeleteWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all test data Deletes all of user defined test data for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenameTestDataDeleteWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameTestDataDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameTestDataDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameTestDataDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameTestDataDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/rule/{target}/{client}/{rulename}/testData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameTestDataDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all test data Deletes all of user defined test data for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameTestDataDeleteAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenameTestDataDeleteWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all test data Deletes all of user defined test data for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenameTestDataDeleteWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameTestDataDelete");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameTestDataDelete");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameTestDataDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameTestDataDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/rule/{target}/{client}/{rulename}/testData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameTestDataDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the rule&#39;s test data and headers information Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TestDataResponse</returns>
        public TestDataResponse RuleTargetClientRulenameTestDataGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TestDataResponse> localVarResponse = RuleTargetClientRulenameTestDataGetWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the rule&#39;s test data and headers information Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TestDataResponse</returns>
        public Alterian.JO.Client.ApiResponse<TestDataResponse> RuleTargetClientRulenameTestDataGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameTestDataGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameTestDataGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameTestDataGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameTestDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TestDataResponse>("/rule/{target}/{client}/{rulename}/testData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameTestDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the rule&#39;s test data and headers information Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestDataResponse</returns>
        public async System.Threading.Tasks.Task<TestDataResponse> RuleTargetClientRulenameTestDataGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TestDataResponse> localVarResponse = await RuleTargetClientRulenameTestDataGetWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the rule&#39;s test data and headers information Returns the test data and header information as specified in the rule&#39;s Realtime Input step
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestDataResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TestDataResponse>> RuleTargetClientRulenameTestDataGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameTestDataGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameTestDataGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameTestDataGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameTestDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TestDataResponse>("/rule/{target}/{client}/{rulename}/testData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameTestDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add test data to rule User defined test data rows will be stored for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse RuleTargetClientRulenameTestDataPost(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = RuleTargetClientRulenameTestDataPostWithHttpInfo(target, varClient, rulename, testData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add test data to rule User defined test data rows will be stored for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> RuleTargetClientRulenameTestDataPostWithHttpInfo(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameTestDataPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameTestDataPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameTestDataPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = testData;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameTestDataPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/rule/{target}/{client}/{rulename}/testData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameTestDataPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add test data to rule User defined test data rows will be stored for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> RuleTargetClientRulenameTestDataPostAsync(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await RuleTargetClientRulenameTestDataPostWithHttpInfoAsync(target, varClient, rulename, testData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add test data to rule User defined test data rows will be stored for this rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="testData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> RuleTargetClientRulenameTestDataPostWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, List<TestData>? testData = default(List<TestData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetClientRulenameTestDataPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling RulesApi->RuleTargetClientRulenameTestDataPost");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling RulesApi->RuleTargetClientRulenameTestDataPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            localVarRequestOptions.Data = testData;

            localVarRequestOptions.Operation = "RulesApi.RuleTargetClientRulenameTestDataPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/rule/{target}/{client}/{rulename}/testData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetClientRulenameTestDataPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all rules published by all clients to the given target Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleList</returns>
        public RuleList RuleTargetGet(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = RuleTargetGetWithHttpInfo(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all rules published by all clients to the given target Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleList</returns>
        public Alterian.JO.Client.ApiResponse<RuleList> RuleTargetGetWithHttpInfo(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (createdRuleUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "createdRuleUrl", createdRuleUrl));
            }
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (templateFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateFilter", templateFilter));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleList>("/rule/{target}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all rules published by all clients to the given target Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleList</returns>
        public async System.Threading.Tasks.Task<RuleList> RuleTargetGetAsync(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleList> localVarResponse = await RuleTargetGetWithHttpInfoAsync(target, from, to, sortProperty, sortDescending, createdRuleUrl, healthScore, includeStatistics, searchText, parameterName, parameterValue, templateFilter, includePublic, checkTemplateLatestVersion, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all rules published by all clients to the given target Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="createdRuleUrl">The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name (optional)</param>
        /// <param name="healthScore">Time Frame for calculating the health score of a rule. Allowed values are hour, day, min (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get a list of rules which have a specific parameter value (optional)</param>
        /// <param name="templateFilter">Filter to return only rules using specified template (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="checkTemplateLatestVersion">Should a check to verify rule has the latest templates version be performed? (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleList>> RuleTargetGetWithHttpInfoAsync(TargetEnum target, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? createdRuleUrl = default(string?), HealthScoreTimeFrame? healthScore = default(HealthScoreTimeFrame?), bool? includeStatistics = default(bool?), string? searchText = default(string?), string? parameterName = default(string?), string? parameterValue = default(string?), string? templateFilter = default(string?), bool? includePublic = default(bool?), bool? checkTemplateLatestVersion = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling RulesApi->RuleTargetGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (createdRuleUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "createdRuleUrl", createdRuleUrl));
            }
            if (healthScore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "healthScore", healthScore));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (templateFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateFilter", templateFilter));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (checkTemplateLatestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "checkTemplateLatestVersion", checkTemplateLatestVersion));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "RulesApi.RuleTargetGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleList>("/rule/{target}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RuleTargetGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

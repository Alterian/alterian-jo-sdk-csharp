/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get audit log report
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuditLogReportResponse</returns>
        AuditLogReportResponse InfoAuditlogClientGet(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get audit log report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuditLogReportResponse</returns>
        ApiResponse<AuditLogReportResponse> InfoAuditlogClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Get cache data report
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDataReportResponse</returns>
        CacheDataReportResponse InfoCachedataClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get cache data report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDataReportResponse</returns>
        ApiResponse<CacheDataReportResponse> InfoCachedataClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheUnusedColumnsReportResponse</returns>
        CacheUnusedColumnsReportResponse InfoCacheunusedcolumnsClientGet(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheUnusedColumnsReportResponse</returns>
        ApiResponse<CacheUnusedColumnsReportResponse> InfoCacheunusedcolumnsClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Report on the users able to access given client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientAccessReportResponse</returns>
        ClientAccessReportResponse InfoClientaccessreportClientGet(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Report on the users able to access given client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientAccessReportResponse</returns>
        ApiResponse<ClientAccessReportResponse> InfoClientaccessreportClientGetWithHttpInfo(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Get the consistency report
        /// </summary>
        /// <remarks>
        /// Compares this nodes resources with other nodes to see if node has latest information
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsistencyReportResponse</returns>
        ConsistencyReportResponse InfoConsistencyreportGet(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get the consistency report
        /// </summary>
        /// <remarks>
        /// Compares this nodes resources with other nodes to see if node has latest information
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsistencyReportResponse</returns>
        ApiResponse<ConsistencyReportResponse> InfoConsistencyreportGetWithHttpInfo(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Report on the conversation usage by a specific client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConversationUsageReportResponse</returns>
        ConversationUsageReportResponse InfoConversationusagereportClientTimeseriesGet(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Report on the conversation usage by a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConversationUsageReportResponse</returns>
        ApiResponse<ConversationUsageReportResponse> InfoConversationusagereportClientTimeseriesGetWithHttpInfo(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Report on how fields are created, read and written within a rule
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FieldUsageReportResponse</returns>
        FieldUsageReportResponse InfoFieldusageTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Report on how fields are created, read and written within a rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FieldUsageReportResponse</returns>
        ApiResponse<FieldUsageReportResponse> InfoFieldusageTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FlowReportResponse</returns>
        FlowReportResponse InfoFlowTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0);

        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FlowReportResponse</returns>
        ApiResponse<FlowReportResponse> InfoFlowTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0);
        /// <summary>
        /// Get report on global parameters
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterReportResponse</returns>
        GlobalParameterReportResponse InfoGlobalparamreportClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get report on global parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterReportResponse</returns>
        ApiResponse<GlobalParameterReportResponse> InfoGlobalparamreportClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// For a given rule, find all the rules that call this rule internally
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InternalRuleCallReportResponse</returns>
        InternalRuleCallReportResponse InfoInternalrulecallreportClientTargetRulenameGet(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// For a given rule, find all the rules that call this rule internally
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InternalRuleCallReportResponse</returns>
        ApiResponse<InternalRuleCallReportResponse> InfoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Get report on logged 404 errors
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Logged404sReportResponse</returns>
        Logged404sReportResponse InfoLogged404sClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Get report on logged 404 errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Logged404sReportResponse</returns>
        ApiResponse<Logged404sReportResponse> InfoLogged404sClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceExistsReportResponse</returns>
        ResourceExistsReportResponse InfoResourceexistsreportPost(List<string> requestBody, int operationIndex = 0);

        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceExistsReportResponse</returns>
        ApiResponse<ResourceExistsReportResponse> InfoResourceexistsreportPostWithHttpInfo(List<string> requestBody, int operationIndex = 0);
        /// <summary>
        /// Report on the complexity of the various rules for a client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleComplexityReportResponse</returns>
        RuleComplexityReportResponse InfoRulecomplexityreportClientGet(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Report on the complexity of the various rules for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleComplexityReportResponse</returns>
        ApiResponse<RuleComplexityReportResponse> InfoRulecomplexityreportClientGetWithHttpInfo(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Report on whether rules can be snoozed
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SnoozeReportResponse</returns>
        SnoozeReportResponse InfoSnoozeGet(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Report on whether rules can be snoozed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SnoozeReportResponse</returns>
        ApiResponse<SnoozeReportResponse> InfoSnoozeGetWithHttpInfo(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Clear the execution statistics histogram for all step types
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse InfoSteptypestatisticsDelete(int operationIndex = 0);

        /// <summary>
        /// Clear the execution statistics histogram for all step types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> InfoSteptypestatisticsDeleteWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Find out the execution statistics histogram for each step type
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StepTypeStatisticsReportResponse</returns>
        StepTypeStatisticsReportResponse InfoSteptypestatisticsGet(CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Find out the execution statistics histogram for each step type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StepTypeStatisticsReportResponse</returns>
        ApiResponse<StepTypeStatisticsReportResponse> InfoSteptypestatisticsGetWithHttpInfo(CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Report on the steps being used by this client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StepTypeUsageReportResponse</returns>
        StepTypeUsageReportResponse InfoSteptypeusagereportClientGet(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Report on the steps being used by this client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StepTypeUsageReportResponse</returns>
        ApiResponse<StepTypeUsageReportResponse> InfoSteptypeusagereportClientGetWithHttpInfo(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Find out which rules are using a specific step type
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StepUsageReportResponse</returns>
        StepUsageReportResponse InfoStepusagereportClientStepnameGet(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Find out which rules are using a specific step type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StepUsageReportResponse</returns>
        ApiResponse<StepUsageReportResponse> InfoStepusagereportClientStepnameGetWithHttpInfo(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Report on the names of the columns in the cache used by templates
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateColumnReportResponse</returns>
        TemplateColumnReportResponse InfoTemplatecolumnreportClientGet(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Report on the names of the columns in the cache used by templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateColumnReportResponse</returns>
        ApiResponse<TemplateColumnReportResponse> InfoTemplatecolumnreportClientGetWithHttpInfo(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// List all templates that expect given input fields
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateInputReportResponse</returns>
        TemplateInputReportResponse InfoTemplateinputreportClientGet(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// List all templates that expect given input fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateInputReportResponse</returns>
        ApiResponse<TemplateInputReportResponse> InfoTemplateinputreportClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Find a list of rules which use a specific template
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateUsageReportResponse</returns>
        TemplateUsageReportResponse InfoTemplateusagereportClientTemplatenameGet(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Find a list of rules which use a specific template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateUsageReportResponse</returns>
        ApiResponse<TemplateUsageReportResponse> InfoTemplateusagereportClientTemplatenameGetWithHttpInfo(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Reports on validity of uploaded templates
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateValidityReportResponse</returns>
        TemplateValidityReportResponse InfoTemplatevalidityreportClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Reports on validity of uploaded templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateValidityReportResponse</returns>
        ApiResponse<TemplateValidityReportResponse> InfoTemplatevalidityreportClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        /// <summary>
        /// Reports on token access and last used date.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenUseReportResponse</returns>
        TokenUseReportResponse InfoTokenusereportGet(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0);

        /// <summary>
        /// Reports on token access and last used date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenUseReportResponse</returns>
        ApiResponse<TokenUseReportResponse> InfoTokenusereportGetWithHttpInfo(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0);
        /// <summary>
        /// Worker thread usage
        /// </summary>
        /// <remarks>
        /// Worker threads execute steps within rules. This report shows what they are doing
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkerThreadUsageReportResponse</returns>
        WorkerThreadUsageReportResponse InfoWorkerthreadusageGet(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);

        /// <summary>
        /// Worker thread usage
        /// </summary>
        /// <remarks>
        /// Worker threads execute steps within rules. This report shows what they are doing
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkerThreadUsageReportResponse</returns>
        ApiResponse<WorkerThreadUsageReportResponse> InfoWorkerthreadusageGetWithHttpInfo(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get audit log report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuditLogReportResponse</returns>
        System.Threading.Tasks.Task<AuditLogReportResponse> InfoAuditlogClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get audit log report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuditLogReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogReportResponse>> InfoAuditlogClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get cache data report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDataReportResponse</returns>
        System.Threading.Tasks.Task<CacheDataReportResponse> InfoCachedataClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get cache data report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDataReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheDataReportResponse>> InfoCachedataClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheUnusedColumnsReportResponse</returns>
        System.Threading.Tasks.Task<CacheUnusedColumnsReportResponse> InfoCacheunusedcolumnsClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheUnusedColumnsReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheUnusedColumnsReportResponse>> InfoCacheunusedcolumnsClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on the users able to access given client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientAccessReportResponse</returns>
        System.Threading.Tasks.Task<ClientAccessReportResponse> InfoClientaccessreportClientGetAsync(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on the users able to access given client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientAccessReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientAccessReportResponse>> InfoClientaccessreportClientGetWithHttpInfoAsync(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the consistency report
        /// </summary>
        /// <remarks>
        /// Compares this nodes resources with other nodes to see if node has latest information
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsistencyReportResponse</returns>
        System.Threading.Tasks.Task<ConsistencyReportResponse> InfoConsistencyreportGetAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the consistency report
        /// </summary>
        /// <remarks>
        /// Compares this nodes resources with other nodes to see if node has latest information
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsistencyReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsistencyReportResponse>> InfoConsistencyreportGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on the conversation usage by a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConversationUsageReportResponse</returns>
        System.Threading.Tasks.Task<ConversationUsageReportResponse> InfoConversationusagereportClientTimeseriesGetAsync(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on the conversation usage by a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConversationUsageReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConversationUsageReportResponse>> InfoConversationusagereportClientTimeseriesGetWithHttpInfoAsync(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on how fields are created, read and written within a rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldUsageReportResponse</returns>
        System.Threading.Tasks.Task<FieldUsageReportResponse> InfoFieldusageTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on how fields are created, read and written within a rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldUsageReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldUsageReportResponse>> InfoFieldusageTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowReportResponse</returns>
        System.Threading.Tasks.Task<FlowReportResponse> InfoFlowTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowReportResponse>> InfoFlowTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get report on global parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterReportResponse</returns>
        System.Threading.Tasks.Task<GlobalParameterReportResponse> InfoGlobalparamreportClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get report on global parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalParameterReportResponse>> InfoGlobalparamreportClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// For a given rule, find all the rules that call this rule internally
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InternalRuleCallReportResponse</returns>
        System.Threading.Tasks.Task<InternalRuleCallReportResponse> InfoInternalrulecallreportClientTargetRulenameGetAsync(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// For a given rule, find all the rules that call this rule internally
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InternalRuleCallReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InternalRuleCallReportResponse>> InfoInternalrulecallreportClientTargetRulenameGetWithHttpInfoAsync(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get report on logged 404 errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Logged404sReportResponse</returns>
        System.Threading.Tasks.Task<Logged404sReportResponse> InfoLogged404sClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get report on logged 404 errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Logged404sReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Logged404sReportResponse>> InfoLogged404sClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceExistsReportResponse</returns>
        System.Threading.Tasks.Task<ResourceExistsReportResponse> InfoResourceexistsreportPostAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceExistsReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceExistsReportResponse>> InfoResourceexistsreportPostWithHttpInfoAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on the complexity of the various rules for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleComplexityReportResponse</returns>
        System.Threading.Tasks.Task<RuleComplexityReportResponse> InfoRulecomplexityreportClientGetAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on the complexity of the various rules for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleComplexityReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleComplexityReportResponse>> InfoRulecomplexityreportClientGetWithHttpInfoAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on whether rules can be snoozed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SnoozeReportResponse</returns>
        System.Threading.Tasks.Task<SnoozeReportResponse> InfoSnoozeGetAsync(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on whether rules can be snoozed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SnoozeReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnoozeReportResponse>> InfoSnoozeGetWithHttpInfoAsync(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear the execution statistics histogram for all step types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> InfoSteptypestatisticsDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear the execution statistics histogram for all step types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> InfoSteptypestatisticsDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find out the execution statistics histogram for each step type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StepTypeStatisticsReportResponse</returns>
        System.Threading.Tasks.Task<StepTypeStatisticsReportResponse> InfoSteptypestatisticsGetAsync(CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find out the execution statistics histogram for each step type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StepTypeStatisticsReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepTypeStatisticsReportResponse>> InfoSteptypestatisticsGetWithHttpInfoAsync(CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on the steps being used by this client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StepTypeUsageReportResponse</returns>
        System.Threading.Tasks.Task<StepTypeUsageReportResponse> InfoSteptypeusagereportClientGetAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on the steps being used by this client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StepTypeUsageReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepTypeUsageReportResponse>> InfoSteptypeusagereportClientGetWithHttpInfoAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find out which rules are using a specific step type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StepUsageReportResponse</returns>
        System.Threading.Tasks.Task<StepUsageReportResponse> InfoStepusagereportClientStepnameGetAsync(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find out which rules are using a specific step type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StepUsageReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepUsageReportResponse>> InfoStepusagereportClientStepnameGetWithHttpInfoAsync(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report on the names of the columns in the cache used by templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateColumnReportResponse</returns>
        System.Threading.Tasks.Task<TemplateColumnReportResponse> InfoTemplatecolumnreportClientGetAsync(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report on the names of the columns in the cache used by templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateColumnReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateColumnReportResponse>> InfoTemplatecolumnreportClientGetWithHttpInfoAsync(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all templates that expect given input fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateInputReportResponse</returns>
        System.Threading.Tasks.Task<TemplateInputReportResponse> InfoTemplateinputreportClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all templates that expect given input fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateInputReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateInputReportResponse>> InfoTemplateinputreportClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find a list of rules which use a specific template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateUsageReportResponse</returns>
        System.Threading.Tasks.Task<TemplateUsageReportResponse> InfoTemplateusagereportClientTemplatenameGetAsync(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find a list of rules which use a specific template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateUsageReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateUsageReportResponse>> InfoTemplateusagereportClientTemplatenameGetWithHttpInfoAsync(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reports on validity of uploaded templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateValidityReportResponse</returns>
        System.Threading.Tasks.Task<TemplateValidityReportResponse> InfoTemplatevalidityreportClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reports on validity of uploaded templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateValidityReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateValidityReportResponse>> InfoTemplatevalidityreportClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reports on token access and last used date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenUseReportResponse</returns>
        System.Threading.Tasks.Task<TokenUseReportResponse> InfoTokenusereportGetAsync(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reports on token access and last used date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenUseReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenUseReportResponse>> InfoTokenusereportGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Worker thread usage
        /// </summary>
        /// <remarks>
        /// Worker threads execute steps within rules. This report shows what they are doing
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkerThreadUsageReportResponse</returns>
        System.Threading.Tasks.Task<WorkerThreadUsageReportResponse> InfoWorkerthreadusageGetAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Worker thread usage
        /// </summary>
        /// <remarks>
        /// Worker threads execute steps within rules. This report shows what they are doing
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkerThreadUsageReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkerThreadUsageReportResponse>> InfoWorkerthreadusageGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInfoApi : IInfoApiSync, IInfoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InfoApi : IInfoApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InfoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InfoApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InfoApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InfoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InfoApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get audit log report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuditLogReportResponse</returns>
        public AuditLogReportResponse InfoAuditlogClientGet(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<AuditLogReportResponse> localVarResponse = InfoAuditlogClientGetWithHttpInfo(varClient, from, to, target, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuditLogReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<AuditLogReportResponse> InfoAuditlogClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoAuditlogClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoAuditlogClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuditLogReportResponse>("/info/auditlog/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoAuditlogClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get audit log report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuditLogReportResponse</returns>
        public async System.Threading.Tasks.Task<AuditLogReportResponse> InfoAuditlogClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<AuditLogReportResponse> localVarResponse = await InfoAuditlogClientGetWithHttpInfoAsync(varClient, from, to, target, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuditLogReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<AuditLogReportResponse>> InfoAuditlogClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoAuditlogClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoAuditlogClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuditLogReportResponse>("/info/auditlog/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoAuditlogClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get cache data report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheDataReportResponse</returns>
        public CacheDataReportResponse InfoCachedataClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheDataReportResponse> localVarResponse = InfoCachedataClientGetWithHttpInfo(varClient, from, to, target, rulename, cachedirection, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get cache data report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheDataReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheDataReportResponse> InfoCachedataClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (rulename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "rulename", rulename));
            }
            if (cachedirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "cachedirection", cachedirection));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoCachedataClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CacheDataReportResponse>("/info/cachedata/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoCachedataClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get cache data report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheDataReportResponse</returns>
        public async System.Threading.Tasks.Task<CacheDataReportResponse> InfoCachedataClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheDataReportResponse> localVarResponse = await InfoCachedataClientGetWithHttpInfoAsync(varClient, from, to, target, rulename, cachedirection, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get cache data report 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="rulename">Filter for specific rule name (optional)</param>
        /// <param name="cachedirection">Get only cache read or writes (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheDataReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheDataReportResponse>> InfoCachedataClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), string? rulename = default(string?), CacheDirectionEnum? cachedirection = default(CacheDirectionEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (rulename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "rulename", rulename));
            }
            if (cachedirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "cachedirection", cachedirection));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoCachedataClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CacheDataReportResponse>("/info/cachedata/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoCachedataClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CacheUnusedColumnsReportResponse</returns>
        public CacheUnusedColumnsReportResponse InfoCacheunusedcolumnsClientGet(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<CacheUnusedColumnsReportResponse> localVarResponse = InfoCacheunusedcolumnsClientGetWithHttpInfo(varClient, from, to, target, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CacheUnusedColumnsReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<CacheUnusedColumnsReportResponse> InfoCacheunusedcolumnsClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoCacheunusedcolumnsClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoCacheunusedcolumnsClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CacheUnusedColumnsReportResponse>("/info/cacheunusedcolumns/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoCacheunusedcolumnsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CacheUnusedColumnsReportResponse</returns>
        public async System.Threading.Tasks.Task<CacheUnusedColumnsReportResponse> InfoCacheunusedcolumnsClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<CacheUnusedColumnsReportResponse> localVarResponse = await InfoCacheunusedcolumnsClientGetWithHttpInfoAsync(varClient, from, to, target, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report on all the cache columns that are no longer used by any rules 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CacheUnusedColumnsReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<CacheUnusedColumnsReportResponse>> InfoCacheunusedcolumnsClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoCacheunusedcolumnsClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoCacheunusedcolumnsClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CacheUnusedColumnsReportResponse>("/info/cacheunusedcolumns/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoCacheunusedcolumnsClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the users able to access given client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientAccessReportResponse</returns>
        public ClientAccessReportResponse InfoClientaccessreportClientGet(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ClientAccessReportResponse> localVarResponse = InfoClientaccessreportClientGetWithHttpInfo(varClient, includeClientAll, includePermissionAll, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the users able to access given client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientAccessReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<ClientAccessReportResponse> InfoClientaccessreportClientGetWithHttpInfo(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoClientaccessreportClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (includeClientAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeClientAll", includeClientAll));
            }
            if (includePermissionAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePermissionAll", includePermissionAll));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoClientaccessreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientAccessReportResponse>("/info/clientaccessreport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoClientaccessreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the users able to access given client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientAccessReportResponse</returns>
        public async System.Threading.Tasks.Task<ClientAccessReportResponse> InfoClientaccessreportClientGetAsync(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ClientAccessReportResponse> localVarResponse = await InfoClientaccessreportClientGetWithHttpInfoAsync(varClient, includeClientAll, includePermissionAll, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the users able to access given client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="includeClientAll">Should users with access to all clients be included (optional, default to true)</param>
        /// <param name="includePermissionAll">Should users with permission ALL be included (optional, default to true)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientAccessReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ClientAccessReportResponse>> InfoClientaccessreportClientGetWithHttpInfoAsync(string varClient, bool? includeClientAll = default(bool?), bool? includePermissionAll = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoClientaccessreportClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (includeClientAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeClientAll", includeClientAll));
            }
            if (includePermissionAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePermissionAll", includePermissionAll));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoClientaccessreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientAccessReportResponse>("/info/clientaccessreport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoClientaccessreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the consistency report Compares this nodes resources with other nodes to see if node has latest information
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsistencyReportResponse</returns>
        public ConsistencyReportResponse InfoConsistencyreportGet(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ConsistencyReportResponse> localVarResponse = InfoConsistencyreportGetWithHttpInfo(from, to, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the consistency report Compares this nodes resources with other nodes to see if node has latest information
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsistencyReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<ConsistencyReportResponse> InfoConsistencyreportGetWithHttpInfo(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoConsistencyreportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsistencyReportResponse>("/info/consistencyreport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoConsistencyreportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the consistency report Compares this nodes resources with other nodes to see if node has latest information
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsistencyReportResponse</returns>
        public async System.Threading.Tasks.Task<ConsistencyReportResponse> InfoConsistencyreportGetAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ConsistencyReportResponse> localVarResponse = await InfoConsistencyreportGetWithHttpInfoAsync(from, to, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the consistency report Compares this nodes resources with other nodes to see if node has latest information
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsistencyReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ConsistencyReportResponse>> InfoConsistencyreportGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoConsistencyreportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsistencyReportResponse>("/info/consistencyreport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoConsistencyreportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the conversation usage by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConversationUsageReportResponse</returns>
        public ConversationUsageReportResponse InfoConversationusagereportClientTimeseriesGet(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ConversationUsageReportResponse> localVarResponse = InfoConversationusagereportClientTimeseriesGetWithHttpInfo(varClient, timeseries, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the conversation usage by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConversationUsageReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<ConversationUsageReportResponse> InfoConversationusagereportClientTimeseriesGetWithHttpInfo(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoConversationusagereportClientTimeseriesGet");
            }

            // verify the required parameter 'timeseries' is set
            if (timeseries == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'timeseries' when calling InfoApi->InfoConversationusagereportClientTimeseriesGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeseries", Alterian.JO.Client.ClientUtils.ParameterToString(timeseries)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoConversationusagereportClientTimeseriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConversationUsageReportResponse>("/info/conversationusagereport/{client}/{timeseries}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoConversationusagereportClientTimeseriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the conversation usage by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConversationUsageReportResponse</returns>
        public async System.Threading.Tasks.Task<ConversationUsageReportResponse> InfoConversationusagereportClientTimeseriesGetAsync(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ConversationUsageReportResponse> localVarResponse = await InfoConversationusagereportClientTimeseriesGetWithHttpInfoAsync(varClient, timeseries, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the conversation usage by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="timeseries">Report on either the last 60 minutes, the last 48 hours or the last 60 days</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConversationUsageReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ConversationUsageReportResponse>> InfoConversationusagereportClientTimeseriesGetWithHttpInfoAsync(string varClient, Timeseries timeseries, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoConversationusagereportClientTimeseriesGet");
            }

            // verify the required parameter 'timeseries' is set
            if (timeseries == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'timeseries' when calling InfoApi->InfoConversationusagereportClientTimeseriesGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeseries", Alterian.JO.Client.ClientUtils.ParameterToString(timeseries)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoConversationusagereportClientTimeseriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConversationUsageReportResponse>("/info/conversationusagereport/{client}/{timeseries}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoConversationusagereportClientTimeseriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on how fields are created, read and written within a rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FieldUsageReportResponse</returns>
        public FieldUsageReportResponse InfoFieldusageTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<FieldUsageReportResponse> localVarResponse = InfoFieldusageTargetClientRulenameGetWithHttpInfo(target, varClient, rulename, from, to, format, mergefields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on how fields are created, read and written within a rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FieldUsageReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<FieldUsageReportResponse> InfoFieldusageTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling InfoApi->InfoFieldusageTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoFieldusageTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling InfoApi->InfoFieldusageTargetClientRulenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (mergefields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "mergefields", mergefields));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoFieldusageTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FieldUsageReportResponse>("/info/fieldusage/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoFieldusageTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on how fields are created, read and written within a rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldUsageReportResponse</returns>
        public async System.Threading.Tasks.Task<FieldUsageReportResponse> InfoFieldusageTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<FieldUsageReportResponse> localVarResponse = await InfoFieldusageTargetClientRulenameGetWithHttpInfoAsync(target, varClient, rulename, from, to, format, mergefields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on how fields are created, read and written within a rule 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="mergefields">Should fields that have been renamed be merged together? (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldUsageReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<FieldUsageReportResponse>> InfoFieldusageTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), bool? mergefields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling InfoApi->InfoFieldusageTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoFieldusageTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling InfoApi->InfoFieldusageTargetClientRulenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (mergefields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "mergefields", mergefields));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoFieldusageTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FieldUsageReportResponse>("/info/fieldusage/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoFieldusageTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FlowReportResponse</returns>
        public FlowReportResponse InfoFlowTargetClientRulenameGet(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<FlowReportResponse> localVarResponse = InfoFlowTargetClientRulenameGetWithHttpInfo(target, varClient, rulename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FlowReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<FlowReportResponse> InfoFlowTargetClientRulenameGetWithHttpInfo(TargetEnum target, string varClient, string rulename, int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling InfoApi->InfoFlowTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoFlowTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling InfoApi->InfoFlowTargetClientRulenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "InfoApi.InfoFlowTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FlowReportResponse>("/info/flow/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoFlowTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowReportResponse</returns>
        public async System.Threading.Tasks.Task<FlowReportResponse> InfoFlowTargetClientRulenameGetAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<FlowReportResponse> localVarResponse = await InfoFlowTargetClientRulenameGetWithHttpInfoAsync(target, varClient, rulename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<FlowReportResponse>> InfoFlowTargetClientRulenameGetWithHttpInfoAsync(TargetEnum target, string varClient, string rulename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling InfoApi->InfoFlowTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoFlowTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling InfoApi->InfoFlowTargetClientRulenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter

            localVarRequestOptions.Operation = "InfoApi.InfoFlowTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FlowReportResponse>("/info/flow/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoFlowTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get report on global parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GlobalParameterReportResponse</returns>
        public GlobalParameterReportResponse InfoGlobalparamreportClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<GlobalParameterReportResponse> localVarResponse = InfoGlobalparamreportClientGetWithHttpInfo(varClient, from, to, parameterName, parameterValue, onlyGlobalParameters, includeParameterDetails, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get report on global parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GlobalParameterReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<GlobalParameterReportResponse> InfoGlobalparamreportClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (onlyGlobalParameters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "onlyGlobalParameters", onlyGlobalParameters));
            }
            if (includeParameterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeParameterDetails", includeParameterDetails));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoGlobalparamreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GlobalParameterReportResponse>("/info/globalparamreport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoGlobalparamreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get report on global parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GlobalParameterReportResponse</returns>
        public async System.Threading.Tasks.Task<GlobalParameterReportResponse> InfoGlobalparamreportClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<GlobalParameterReportResponse> localVarResponse = await InfoGlobalparamreportClientGetWithHttpInfoAsync(varClient, from, to, parameterName, parameterValue, onlyGlobalParameters, includeParameterDetails, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get report on global parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="parameterName">Get the report for a specific parameter (optional)</param>
        /// <param name="parameterValue">Get the report for a specific parameter&#39;s value (optional)</param>
        /// <param name="onlyGlobalParameters">Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created (optional)</param>
        /// <param name="includeParameterDetails">When listing rules using global parameters, should we also list all the parameters used in the rule. If not provided then true (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GlobalParameterReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<GlobalParameterReportResponse>> InfoGlobalparamreportClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), string? parameterName = default(string?), string? parameterValue = default(string?), bool? onlyGlobalParameters = default(bool?), bool? includeParameterDetails = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (parameterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterName", parameterName));
            }
            if (parameterValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "parameterValue", parameterValue));
            }
            if (onlyGlobalParameters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "onlyGlobalParameters", onlyGlobalParameters));
            }
            if (includeParameterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeParameterDetails", includeParameterDetails));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoGlobalparamreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GlobalParameterReportResponse>("/info/globalparamreport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoGlobalparamreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// For a given rule, find all the rules that call this rule internally 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InternalRuleCallReportResponse</returns>
        public InternalRuleCallReportResponse InfoInternalrulecallreportClientTargetRulenameGet(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<InternalRuleCallReportResponse> localVarResponse = InfoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(varClient, target, rulename, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// For a given rule, find all the rules that call this rule internally 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InternalRuleCallReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<InternalRuleCallReportResponse> InfoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoInternalrulecallreportClientTargetRulenameGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling InfoApi->InfoInternalrulecallreportClientTargetRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling InfoApi->InfoInternalrulecallreportClientTargetRulenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoInternalrulecallreportClientTargetRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InternalRuleCallReportResponse>("/info/internalrulecallreport/{client}/{target}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoInternalrulecallreportClientTargetRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// For a given rule, find all the rules that call this rule internally 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InternalRuleCallReportResponse</returns>
        public async System.Threading.Tasks.Task<InternalRuleCallReportResponse> InfoInternalrulecallreportClientTargetRulenameGetAsync(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<InternalRuleCallReportResponse> localVarResponse = await InfoInternalrulecallreportClientTargetRulenameGetWithHttpInfoAsync(varClient, target, rulename, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// For a given rule, find all the rules that call this rule internally 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InternalRuleCallReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<InternalRuleCallReportResponse>> InfoInternalrulecallreportClientTargetRulenameGetWithHttpInfoAsync(string varClient, TargetEnum target, string rulename, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoInternalrulecallreportClientTargetRulenameGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling InfoApi->InfoInternalrulecallreportClientTargetRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling InfoApi->InfoInternalrulecallreportClientTargetRulenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoInternalrulecallreportClientTargetRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InternalRuleCallReportResponse>("/info/internalrulecallreport/{client}/{target}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoInternalrulecallreportClientTargetRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get report on logged 404 errors 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Logged404sReportResponse</returns>
        public Logged404sReportResponse InfoLogged404sClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<Logged404sReportResponse> localVarResponse = InfoLogged404sClientGetWithHttpInfo(varClient, from, to, limit, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get report on logged 404 errors 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Logged404sReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<Logged404sReportResponse> InfoLogged404sClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoLogged404sClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Logged404sReportResponse>("/info/logged404s/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoLogged404sClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get report on logged 404 errors 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Logged404sReportResponse</returns>
        public async System.Threading.Tasks.Task<Logged404sReportResponse> InfoLogged404sClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<Logged404sReportResponse> localVarResponse = await InfoLogged404sClientGetWithHttpInfoAsync(varClient, from, to, limit, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get report on logged 404 errors 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="limit">Limit the number of results returned. By default set to 100 when not provided. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Logged404sReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<Logged404sReportResponse>> InfoLogged404sClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), int? limit = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoLogged404sClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Logged404sReportResponse>("/info/logged404s/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoLogged404sClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceExistsReportResponse</returns>
        public ResourceExistsReportResponse InfoResourceexistsreportPost(List<string> requestBody, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ResourceExistsReportResponse> localVarResponse = InfoResourceexistsreportPostWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceExistsReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<ResourceExistsReportResponse> InfoResourceexistsreportPostWithHttpInfo(List<string> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'requestBody' when calling InfoApi->InfoResourceexistsreportPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "InfoApi.InfoResourceexistsreportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceExistsReportResponse>("/info/resourceexistsreport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoResourceexistsreportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceExistsReportResponse</returns>
        public async System.Threading.Tasks.Task<ResourceExistsReportResponse> InfoResourceexistsreportPostAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ResourceExistsReportResponse> localVarResponse = await InfoResourceexistsreportPostWithHttpInfoAsync(requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pass in an array of any size containing resource URL&#39;s (rules, templates, etc) to see if they exist and can be accessed by this user. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A JSON array of any number of resource URLs prefixed by type. Supports rule, template, queue, globalparameter, and rulegroup.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceExistsReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ResourceExistsReportResponse>> InfoResourceexistsreportPostWithHttpInfoAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'requestBody' when calling InfoApi->InfoResourceexistsreportPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "InfoApi.InfoResourceexistsreportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceExistsReportResponse>("/info/resourceexistsreport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoResourceexistsreportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the complexity of the various rules for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleComplexityReportResponse</returns>
        public RuleComplexityReportResponse InfoRulecomplexityreportClientGet(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<RuleComplexityReportResponse> localVarResponse = InfoRulecomplexityreportClientGetWithHttpInfo(varClient, target, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the complexity of the various rules for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleComplexityReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<RuleComplexityReportResponse> InfoRulecomplexityreportClientGetWithHttpInfo(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoRulecomplexityreportClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoRulecomplexityreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleComplexityReportResponse>("/info/rulecomplexityreport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoRulecomplexityreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the complexity of the various rules for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleComplexityReportResponse</returns>
        public async System.Threading.Tasks.Task<RuleComplexityReportResponse> InfoRulecomplexityreportClientGetAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<RuleComplexityReportResponse> localVarResponse = await InfoRulecomplexityreportClientGetWithHttpInfoAsync(varClient, target, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the complexity of the various rules for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleComplexityReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<RuleComplexityReportResponse>> InfoRulecomplexityreportClientGetWithHttpInfoAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoRulecomplexityreportClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoRulecomplexityreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleComplexityReportResponse>("/info/rulecomplexityreport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoRulecomplexityreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on whether rules can be snoozed 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SnoozeReportResponse</returns>
        public SnoozeReportResponse InfoSnoozeGet(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<SnoozeReportResponse> localVarResponse = InfoSnoozeGetWithHttpInfo(target, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on whether rules can be snoozed 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SnoozeReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<SnoozeReportResponse> InfoSnoozeGetWithHttpInfo(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoSnoozeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SnoozeReportResponse>("/info/snooze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSnoozeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on whether rules can be snoozed 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SnoozeReportResponse</returns>
        public async System.Threading.Tasks.Task<SnoozeReportResponse> InfoSnoozeGetAsync(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<SnoozeReportResponse> localVarResponse = await InfoSnoozeGetWithHttpInfoAsync(target, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on whether rules can be snoozed 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SnoozeReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<SnoozeReportResponse>> InfoSnoozeGetWithHttpInfoAsync(TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoSnoozeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SnoozeReportResponse>("/info/snooze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSnoozeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear the execution statistics histogram for all step types 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse InfoSteptypestatisticsDelete(int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = InfoSteptypestatisticsDeleteWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the execution statistics histogram for all step types 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> InfoSteptypestatisticsDeleteWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "InfoApi.InfoSteptypestatisticsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/info/steptypestatistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSteptypestatisticsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear the execution statistics histogram for all step types 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> InfoSteptypestatisticsDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await InfoSteptypestatisticsDeleteWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the execution statistics histogram for all step types 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> InfoSteptypestatisticsDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "InfoApi.InfoSteptypestatisticsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/info/steptypestatistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSteptypestatisticsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out the execution statistics histogram for each step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StepTypeStatisticsReportResponse</returns>
        public StepTypeStatisticsReportResponse InfoSteptypestatisticsGet(CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<StepTypeStatisticsReportResponse> localVarResponse = InfoSteptypestatisticsGetWithHttpInfo(format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out the execution statistics histogram for each step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StepTypeStatisticsReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<StepTypeStatisticsReportResponse> InfoSteptypestatisticsGetWithHttpInfo(CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoSteptypestatisticsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StepTypeStatisticsReportResponse>("/info/steptypestatistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSteptypestatisticsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out the execution statistics histogram for each step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StepTypeStatisticsReportResponse</returns>
        public async System.Threading.Tasks.Task<StepTypeStatisticsReportResponse> InfoSteptypestatisticsGetAsync(CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<StepTypeStatisticsReportResponse> localVarResponse = await InfoSteptypestatisticsGetWithHttpInfoAsync(format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out the execution statistics histogram for each step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StepTypeStatisticsReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<StepTypeStatisticsReportResponse>> InfoSteptypestatisticsGetWithHttpInfoAsync(CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoSteptypestatisticsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StepTypeStatisticsReportResponse>("/info/steptypestatistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSteptypestatisticsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the steps being used by this client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StepTypeUsageReportResponse</returns>
        public StepTypeUsageReportResponse InfoSteptypeusagereportClientGet(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<StepTypeUsageReportResponse> localVarResponse = InfoSteptypeusagereportClientGetWithHttpInfo(varClient, target, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the steps being used by this client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StepTypeUsageReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<StepTypeUsageReportResponse> InfoSteptypeusagereportClientGetWithHttpInfo(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoSteptypeusagereportClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoSteptypeusagereportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StepTypeUsageReportResponse>("/info/steptypeusagereport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSteptypeusagereportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the steps being used by this client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StepTypeUsageReportResponse</returns>
        public async System.Threading.Tasks.Task<StepTypeUsageReportResponse> InfoSteptypeusagereportClientGetAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<StepTypeUsageReportResponse> localVarResponse = await InfoSteptypeusagereportClientGetWithHttpInfoAsync(varClient, target, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the steps being used by this client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StepTypeUsageReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<StepTypeUsageReportResponse>> InfoSteptypeusagereportClientGetWithHttpInfoAsync(string varClient, TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoSteptypeusagereportClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoSteptypeusagereportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StepTypeUsageReportResponse>("/info/steptypeusagereport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoSteptypeusagereportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out which rules are using a specific step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StepUsageReportResponse</returns>
        public StepUsageReportResponse InfoStepusagereportClientStepnameGet(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<StepUsageReportResponse> localVarResponse = InfoStepusagereportClientStepnameGetWithHttpInfo(stepname, varClient, target, from, to, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out which rules are using a specific step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StepUsageReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<StepUsageReportResponse> InfoStepusagereportClientStepnameGetWithHttpInfo(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'stepname' is set
            if (stepname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'stepname' when calling InfoApi->InfoStepusagereportClientStepnameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoStepusagereportClientStepnameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stepname", Alterian.JO.Client.ClientUtils.ParameterToString(stepname)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoStepusagereportClientStepnameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StepUsageReportResponse>("/info/stepusagereport/{client}/{stepname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoStepusagereportClientStepnameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out which rules are using a specific step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StepUsageReportResponse</returns>
        public async System.Threading.Tasks.Task<StepUsageReportResponse> InfoStepusagereportClientStepnameGetAsync(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<StepUsageReportResponse> localVarResponse = await InfoStepusagereportClientStepnameGetWithHttpInfoAsync(stepname, varClient, target, from, to, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out which rules are using a specific step type 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stepname">type of step that must exist in the rules returned</param>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StepUsageReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<StepUsageReportResponse>> InfoStepusagereportClientStepnameGetWithHttpInfoAsync(string stepname, string varClient, TargetEnum? target = default(TargetEnum?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stepname' is set
            if (stepname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'stepname' when calling InfoApi->InfoStepusagereportClientStepnameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoStepusagereportClientStepnameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stepname", Alterian.JO.Client.ClientUtils.ParameterToString(stepname)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoStepusagereportClientStepnameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StepUsageReportResponse>("/info/stepusagereport/{client}/{stepname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoStepusagereportClientStepnameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the names of the columns in the cache used by templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateColumnReportResponse</returns>
        public TemplateColumnReportResponse InfoTemplatecolumnreportClientGet(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateColumnReportResponse> localVarResponse = InfoTemplatecolumnreportClientGetWithHttpInfo(varClient, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the names of the columns in the cache used by templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateColumnReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<TemplateColumnReportResponse> InfoTemplatecolumnreportClientGetWithHttpInfo(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoTemplatecolumnreportClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplatecolumnreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateColumnReportResponse>("/info/templatecolumnreport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplatecolumnreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report on the names of the columns in the cache used by templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateColumnReportResponse</returns>
        public async System.Threading.Tasks.Task<TemplateColumnReportResponse> InfoTemplatecolumnreportClientGetAsync(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateColumnReportResponse> localVarResponse = await InfoTemplatecolumnreportClientGetWithHttpInfoAsync(varClient, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report on the names of the columns in the cache used by templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateColumnReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateColumnReportResponse>> InfoTemplatecolumnreportClientGetWithHttpInfoAsync(string varClient, CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoTemplatecolumnreportClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplatecolumnreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateColumnReportResponse>("/info/templatecolumnreport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplatecolumnreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all templates that expect given input fields 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateInputReportResponse</returns>
        public TemplateInputReportResponse InfoTemplateinputreportClientGet(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateInputReportResponse> localVarResponse = InfoTemplateinputreportClientGetWithHttpInfo(varClient, from, to, inputFields, allversions, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all templates that expect given input fields 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateInputReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<TemplateInputReportResponse> InfoTemplateinputreportClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoTemplateinputreportClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (inputFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "inputFields", inputFields));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplateinputreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateInputReportResponse>("/info/templateinputreport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplateinputreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all templates that expect given input fields 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateInputReportResponse</returns>
        public async System.Threading.Tasks.Task<TemplateInputReportResponse> InfoTemplateinputreportClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateInputReportResponse> localVarResponse = await InfoTemplateinputreportClientGetWithHttpInfoAsync(varClient, from, to, inputFields, allversions, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all templates that expect given input fields 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Which client would you like the report for? You must be able to access this client   to report on it.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="inputFields">Name of input fields to search for (optional)</param>
        /// <param name="allversions">Do we want to check all template versions or only latest? (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateInputReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateInputReportResponse>> InfoTemplateinputreportClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), List<string>? inputFields = default(List<string>?), bool? allversions = default(bool?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoTemplateinputreportClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (inputFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "inputFields", inputFields));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplateinputreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateInputReportResponse>("/info/templateinputreport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplateinputreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a list of rules which use a specific template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateUsageReportResponse</returns>
        public TemplateUsageReportResponse InfoTemplateusagereportClientTemplatenameGet(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateUsageReportResponse> localVarResponse = InfoTemplateusagereportClientTemplatenameGetWithHttpInfo(varClient, templatename, templateClient, templateVersion, from, to, target, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find a list of rules which use a specific template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateUsageReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<TemplateUsageReportResponse> InfoTemplateusagereportClientTemplatenameGetWithHttpInfo(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoTemplateusagereportClientTemplatenameGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling InfoApi->InfoTemplateusagereportClientTemplatenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            if (templateClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateClient", templateClient));
            }
            if (templateVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateVersion", templateVersion));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplateusagereportClientTemplatenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateUsageReportResponse>("/info/templateusagereport/{client}/{templatename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplateusagereportClientTemplatenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find a list of rules which use a specific template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateUsageReportResponse</returns>
        public async System.Threading.Tasks.Task<TemplateUsageReportResponse> InfoTemplateusagereportClientTemplatenameGetAsync(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateUsageReportResponse> localVarResponse = await InfoTemplateusagereportClientTemplatenameGetWithHttpInfoAsync(varClient, templatename, templateClient, templateVersion, from, to, target, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find a list of rules which use a specific template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Filter the rules returned to only this client. Use * to match all clients</param>
        /// <param name="templatename">The name of the template that is used by the rule</param>
        /// <param name="templateClient">Filter to only templates with this client (optional)</param>
        /// <param name="templateVersion">Filter to only templates with this version (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="target">Filters on target (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateUsageReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateUsageReportResponse>> InfoTemplateusagereportClientTemplatenameGetWithHttpInfoAsync(string varClient, string templatename, string? templateClient = default(string?), string? templateVersion = default(string?), int? from = default(int?), int? to = default(int?), TargetEnum? target = default(TargetEnum?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling InfoApi->InfoTemplateusagereportClientTemplatenameGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling InfoApi->InfoTemplateusagereportClientTemplatenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            if (templateClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateClient", templateClient));
            }
            if (templateVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateVersion", templateVersion));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (target != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplateusagereportClientTemplatenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateUsageReportResponse>("/info/templateusagereport/{client}/{templatename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplateusagereportClientTemplatenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reports on validity of uploaded templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateValidityReportResponse</returns>
        public TemplateValidityReportResponse InfoTemplatevalidityreportClientGet(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateValidityReportResponse> localVarResponse = InfoTemplatevalidityreportClientGetWithHttpInfo(varClient, from, to, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on validity of uploaded templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateValidityReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<TemplateValidityReportResponse> InfoTemplatevalidityreportClientGetWithHttpInfo(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplatevalidityreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateValidityReportResponse>("/info/templatevalidityreport/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplatevalidityreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reports on validity of uploaded templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateValidityReportResponse</returns>
        public async System.Threading.Tasks.Task<TemplateValidityReportResponse> InfoTemplatevalidityreportClientGetAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateValidityReportResponse> localVarResponse = await InfoTemplatevalidityreportClientGetWithHttpInfoAsync(varClient, from, to, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on validity of uploaded templates 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name (optional)</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateValidityReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateValidityReportResponse>> InfoTemplatevalidityreportClientGetWithHttpInfoAsync(string? varClient = default(string?), int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varClient != null)
            {
                localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTemplatevalidityreportClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateValidityReportResponse>("/info/templatevalidityreport/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTemplatevalidityreportClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reports on token access and last used date. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenUseReportResponse</returns>
        public TokenUseReportResponse InfoTokenusereportGet(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TokenUseReportResponse> localVarResponse = InfoTokenusereportGetWithHttpInfo(from, to, user, format, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on token access and last used date. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenUseReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<TokenUseReportResponse> InfoTokenusereportGetWithHttpInfo(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (token != null)
            {
                localVarRequestOptions.HeaderParameters.Add("token", Alterian.JO.Client.ClientUtils.ParameterToString(token)); // header parameter
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTokenusereportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenUseReportResponse>("/info/tokenusereport", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTokenusereportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reports on token access and last used date. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenUseReportResponse</returns>
        public async System.Threading.Tasks.Task<TokenUseReportResponse> InfoTokenusereportGetAsync(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TokenUseReportResponse> localVarResponse = await InfoTokenusereportGetWithHttpInfoAsync(from, to, user, format, token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reports on token access and last used date. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="user">Optional query parameter to specify the user (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="token">Optional token for which to obtain the last used report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenUseReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TokenUseReportResponse>> InfoTokenusereportGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), string? user = default(string?), CsvEnum? format = default(CsvEnum?), string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (token != null)
            {
                localVarRequestOptions.HeaderParameters.Add("token", Alterian.JO.Client.ClientUtils.ParameterToString(token)); // header parameter
            }

            localVarRequestOptions.Operation = "InfoApi.InfoTokenusereportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenUseReportResponse>("/info/tokenusereport", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoTokenusereportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Worker thread usage Worker threads execute steps within rules. This report shows what they are doing
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkerThreadUsageReportResponse</returns>
        public WorkerThreadUsageReportResponse InfoWorkerthreadusageGet(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<WorkerThreadUsageReportResponse> localVarResponse = InfoWorkerthreadusageGetWithHttpInfo(from, to, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Worker thread usage Worker threads execute steps within rules. This report shows what they are doing
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkerThreadUsageReportResponse</returns>
        public Alterian.JO.Client.ApiResponse<WorkerThreadUsageReportResponse> InfoWorkerthreadusageGetWithHttpInfo(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoWorkerthreadusageGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkerThreadUsageReportResponse>("/info/workerthreadusage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoWorkerthreadusageGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Worker thread usage Worker threads execute steps within rules. This report shows what they are doing
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkerThreadUsageReportResponse</returns>
        public async System.Threading.Tasks.Task<WorkerThreadUsageReportResponse> InfoWorkerthreadusageGetAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<WorkerThreadUsageReportResponse> localVarResponse = await InfoWorkerthreadusageGetWithHttpInfoAsync(from, to, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Worker thread usage Worker threads execute steps within rules. This report shows what they are doing
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="format">If you want CSV, enter csv here (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkerThreadUsageReportResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<WorkerThreadUsageReportResponse>> InfoWorkerthreadusageGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), CsvEnum? format = default(CsvEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "InfoApi.InfoWorkerthreadusageGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkerThreadUsageReportResponse>("/info/workerthreadusage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoWorkerthreadusageGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadTemplateClientTemplatenameGet(string varClient, string templatename, int operationIndex = 0);

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadTemplateClientTemplatenameGetWithHttpInfo(string varClient, string templatename, int operationIndex = 0);
        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadTemplateClientTemplatenameVersionGet(string varClient, string templatename, int varVersion, int operationIndex = 0);

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadTemplateClientTemplatenameVersionGetWithHttpInfo(string varClient, string templatename, int varVersion, int operationIndex = 0);
        /// <summary>
        /// Delete all templates uploaded by this client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse TemplateClientDelete(string varClient, int operationIndex = 0);

        /// <summary>
        /// Delete all templates uploaded by this client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> TemplateClientDeleteWithHttpInfo(string varClient, int operationIndex = 0);
        /// <summary>
        /// Get details about all templates uploaded by a specific client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        TemplateList TemplateClientGet(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get details about all templates uploaded by a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        ApiResponse<TemplateList> TemplateClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Delete all versions of a specific template.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse TemplateClientTemplatenameDelete(string varClient, string templatename, int operationIndex = 0);

        /// <summary>
        /// Delete all versions of a specific template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> TemplateClientTemplatenameDeleteWithHttpInfo(string varClient, string templatename, int operationIndex = 0);
        /// <summary>
        /// Get details about all versions of a specified template
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        TemplateList TemplateClientTemplatenameGet(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get details about all versions of a specified template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        ApiResponse<TemplateList> TemplateClientTemplatenameGetWithHttpInfo(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0);
        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        ResourceAndStatusResponse TemplateClientTemplatenamePost(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0);

        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        ApiResponse<ResourceAndStatusResponse> TemplateClientTemplatenamePostWithHttpInfo(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0);
        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        ResourceAndStatusResponse TemplateClientTemplatenamePut(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        ApiResponse<ResourceAndStatusResponse> TemplateClientTemplatenamePutWithHttpInfo(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Delete a specific version of a specific template on the server.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse TemplateClientTemplatenameVersionDelete(string varClient, string templatename, int varVersion, int operationIndex = 0);

        /// <summary>
        /// Delete a specific version of a specific template on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> TemplateClientTemplatenameVersionDeleteWithHttpInfo(string varClient, string templatename, int varVersion, int operationIndex = 0);
        /// <summary>
        /// Get details about a specific version of a specific template for a specific client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        TemplateList TemplateClientTemplatenameVersionGet(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get details about a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        ApiResponse<TemplateList> TemplateClientTemplatenameVersionGetWithHttpInfo(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get an upgraded version of template
        /// </summary>
        /// <remarks>
        /// Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateUpgradeResponse</returns>
        TemplateUpgradeResponse TemplateClientTemplatenameVersionPost(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Get an upgraded version of template
        /// </summary>
        /// <remarks>
        /// Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateUpgradeResponse</returns>
        ApiResponse<TemplateUpgradeResponse> TemplateClientTemplatenameVersionPostWithHttpInfo(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Get details about all templates on the server
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        TemplateList TemplateGet(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get details about all templates on the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        ApiResponse<TemplateList> TemplateGetWithHttpInfo(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Take a specific version of a template and publish it as a rule.
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        ResourceAndStatusResponse TemplateTargetClientTemplatenameVersionPost(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0);

        /// <summary>
        /// Take a specific version of a template and publish it as a rule.
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        ApiResponse<ResourceAndStatusResponse> TemplateTargetClientTemplatenameVersionPostWithHttpInfo(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0);
        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse TemplateTargetClientTemplatenameVersionPut(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0);

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> TemplateTargetClientTemplatenameVersionPutWithHttpInfo(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadTemplateClientTemplatenameGetAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadTemplateClientTemplatenameGetWithHttpInfoAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadTemplateClientTemplatenameVersionGetAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadTemplateClientTemplatenameVersionGetWithHttpInfoAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all templates uploaded by this client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> TemplateClientDeleteAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all templates uploaded by this client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> TemplateClientDeleteWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details about all templates uploaded by a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        System.Threading.Tasks.Task<TemplateList> TemplateClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details about all templates uploaded by a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateList>> TemplateClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all versions of a specific template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> TemplateClientTemplatenameDeleteAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all versions of a specific template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> TemplateClientTemplatenameDeleteWithHttpInfoAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details about all versions of a specified template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        System.Threading.Tasks.Task<TemplateList> TemplateClientTemplatenameGetAsync(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details about all versions of a specified template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateList>> TemplateClientTemplatenameGetWithHttpInfoAsync(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceAndStatusResponse> TemplateClientTemplatenamePostAsync(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceAndStatusResponse>> TemplateClientTemplatenamePostWithHttpInfoAsync(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceAndStatusResponse> TemplateClientTemplatenamePutAsync(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceAndStatusResponse>> TemplateClientTemplatenamePutWithHttpInfoAsync(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific version of a specific template on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> TemplateClientTemplatenameVersionDeleteAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific version of a specific template on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> TemplateClientTemplatenameVersionDeleteWithHttpInfoAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details about a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        System.Threading.Tasks.Task<TemplateList> TemplateClientTemplatenameVersionGetAsync(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details about a specific version of a specific template for a specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateList>> TemplateClientTemplatenameVersionGetWithHttpInfoAsync(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an upgraded version of template
        /// </summary>
        /// <remarks>
        /// Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateUpgradeResponse</returns>
        System.Threading.Tasks.Task<TemplateUpgradeResponse> TemplateClientTemplatenameVersionPostAsync(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an upgraded version of template
        /// </summary>
        /// <remarks>
        /// Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateUpgradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateUpgradeResponse>> TemplateClientTemplatenameVersionPostWithHttpInfoAsync(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details about all templates on the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        System.Threading.Tasks.Task<TemplateList> TemplateGetAsync(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details about all templates on the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateList>> TemplateGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Take a specific version of a template and publish it as a rule.
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceAndStatusResponse> TemplateTargetClientTemplatenameVersionPostAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Take a specific version of a template and publish it as a rule.
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceAndStatusResponse>> TemplateTargetClientTemplatenameVersionPostWithHttpInfoAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> TemplateTargetClientTemplatenameVersionPutAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
        /// </summary>
        /// <remarks>
        /// If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> TemplateTargetClientTemplatenameVersionPutWithHttpInfoAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : ITemplatesApiSync, ITemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadTemplateClientTemplatenameGet(string varClient, string templatename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadTemplateClientTemplatenameGetWithHttpInfo(varClient, templatename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Alterian.JO.Client.ApiResponse<System.IO.Stream> DownloadTemplateClientTemplatenameGetWithHttpInfo(string varClient, string templatename, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->DownloadTemplateClientTemplatenameGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->DownloadTemplateClientTemplatenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.DownloadTemplateClientTemplatenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/download/template/{client}/{templatename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTemplateClientTemplatenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadTemplateClientTemplatenameGetAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadTemplateClientTemplatenameGetWithHttpInfoAsync(varClient, templatename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<System.IO.Stream>> DownloadTemplateClientTemplatenameGetWithHttpInfoAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->DownloadTemplateClientTemplatenameGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->DownloadTemplateClientTemplatenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.DownloadTemplateClientTemplatenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/download/template/{client}/{templatename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTemplateClientTemplatenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadTemplateClientTemplatenameVersionGet(string varClient, string templatename, int varVersion, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadTemplateClientTemplatenameVersionGetWithHttpInfo(varClient, templatename, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Alterian.JO.Client.ApiResponse<System.IO.Stream> DownloadTemplateClientTemplatenameVersionGetWithHttpInfo(string varClient, string templatename, int varVersion, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->DownloadTemplateClientTemplatenameVersionGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->DownloadTemplateClientTemplatenameVersionGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.DownloadTemplateClientTemplatenameVersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/download/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTemplateClientTemplatenameVersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadTemplateClientTemplatenameVersionGetAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadTemplateClientTemplatenameVersionGetWithHttpInfoAsync(varClient, templatename, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the rule file for a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">A uuencoded octet stream containing the template ktr file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<System.IO.Stream>> DownloadTemplateClientTemplatenameVersionGetWithHttpInfoAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->DownloadTemplateClientTemplatenameVersionGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->DownloadTemplateClientTemplatenameVersionGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.DownloadTemplateClientTemplatenameVersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/download/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTemplateClientTemplatenameVersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all templates uploaded by this client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse TemplateClientDelete(string varClient, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = TemplateClientDeleteWithHttpInfo(varClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all templates uploaded by this client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> TemplateClientDeleteWithHttpInfo(string varClient, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/template/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all templates uploaded by this client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> TemplateClientDeleteAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await TemplateClientDeleteWithHttpInfoAsync(varClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all templates uploaded by this client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> TemplateClientDeleteWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/template/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all templates uploaded by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        public TemplateList TemplateClientGet(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = TemplateClientGetWithHttpInfo(varClient, from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all templates uploaded by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        public Alterian.JO.Client.ApiResponse<TemplateList> TemplateClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (basicInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "basicInfo", basicInfo));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateList>("/template/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all templates uploaded by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        public async System.Threading.Tasks.Task<TemplateList> TemplateClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = await TemplateClientGetWithHttpInfoAsync(varClient, from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all templates uploaded by a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateList>> TemplateClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (basicInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "basicInfo", basicInfo));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateList>("/template/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all versions of a specific template. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse TemplateClientTemplatenameDelete(string varClient, string templatename, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = TemplateClientTemplatenameDeleteWithHttpInfo(varClient, templatename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all versions of a specific template. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> TemplateClientTemplatenameDeleteWithHttpInfo(string varClient, string templatename, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameDelete");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all versions of a specific template. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> TemplateClientTemplatenameDeleteAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await TemplateClientTemplatenameDeleteWithHttpInfoAsync(varClient, templatename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all versions of a specific template. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template you want to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> TemplateClientTemplatenameDeleteWithHttpInfoAsync(string varClient, string templatename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameDelete");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all versions of a specified template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        public TemplateList TemplateClientTemplatenameGet(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = TemplateClientTemplatenameGetWithHttpInfo(varClient, templatename, from, to, allversions, getAllDetails, targetClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all versions of a specified template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        public Alterian.JO.Client.ApiResponse<TemplateList> TemplateClientTemplatenameGetWithHttpInfo(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateList>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all versions of a specified template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        public async System.Threading.Tasks.Task<TemplateList> TemplateClientTemplatenameGetAsync(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = await TemplateClientTemplatenameGetWithHttpInfoAsync(varClient, templatename, from, to, allversions, getAllDetails, targetClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all versions of a specified template 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateList>> TemplateClientTemplatenameGetWithHttpInfoAsync(string varClient, string templatename, int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateList>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        public ResourceAndStatusResponse TemplateClientTemplatenamePost(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = TemplateClientTemplatenamePostWithHttpInfo(varClient, templatename, validate, file, settings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        public Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> TemplateClientTemplatenamePostWithHttpInfo(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenamePost");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (settings != null)
            {
                localVarRequestOptions.FormParameters.Add("settings", Alterian.JO.Client.ClientUtils.ParameterToString(settings)); // form parameter
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceAndStatusResponse>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceAndStatusResponse> TemplateClientTemplatenamePostAsync(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = await TemplateClientTemplatenamePostWithHttpInfoAsync(varClient, templatename, validate, file, settings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a KTR file which defines the functionality of the template. This will generate and return a version   number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="validate">Set to &#39;True&#39; to only validate the JSON (and not save it) (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="settings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse>> TemplateClientTemplatenamePostWithHttpInfoAsync(string varClient, string templatename, bool? validate = default(bool?), System.IO.Stream? file = default(System.IO.Stream?), string? settings = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenamePost");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (settings != null)
            {
                localVarRequestOptions.FormParameters.Add("settings", Alterian.JO.Client.ClientUtils.ParameterToString(settings)); // form parameter
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceAndStatusResponse>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        public ResourceAndStatusResponse TemplateClientTemplatenamePut(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = TemplateClientTemplatenamePutWithHttpInfo(varClient, templatename, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        public Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> TemplateClientTemplatenamePutWithHttpInfo(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenamePut");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenamePut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ResourceAndStatusResponse>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceAndStatusResponse> TemplateClientTemplatenamePutAsync(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = await TemplateClientTemplatenamePutWithHttpInfoAsync(varClient, templatename, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Alter the settings of the most recent version of an existing template. This will generate and return a new   version number. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="body">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse>> TemplateClientTemplatenamePutWithHttpInfoAsync(string varClient, string templatename, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenamePut");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenamePut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ResourceAndStatusResponse>("/template/{client}/{templatename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific version of a specific template on the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse TemplateClientTemplatenameVersionDelete(string varClient, string templatename, int varVersion, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = TemplateClientTemplatenameVersionDeleteWithHttpInfo(varClient, templatename, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific version of a specific template on the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> TemplateClientTemplatenameVersionDeleteWithHttpInfo(string varClient, string templatename, int varVersion, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameVersionDelete");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameVersionDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameVersionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameVersionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific version of a specific template on the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> TemplateClientTemplatenameVersionDeleteAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await TemplateClientTemplatenameVersionDeleteWithHttpInfoAsync(varClient, templatename, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific version of a specific template on the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> TemplateClientTemplatenameVersionDeleteWithHttpInfoAsync(string varClient, string templatename, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameVersionDelete");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameVersionDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameVersionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameVersionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        public TemplateList TemplateClientTemplatenameVersionGet(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = TemplateClientTemplatenameVersionGetWithHttpInfo(varClient, templatename, varVersion, getAllDetails, targetClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        public Alterian.JO.Client.ApiResponse<TemplateList> TemplateClientTemplatenameVersionGetWithHttpInfo(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameVersionGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameVersionGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameVersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateList>("/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameVersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        public async System.Threading.Tasks.Task<TemplateList> TemplateClientTemplatenameVersionGetAsync(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = await TemplateClientTemplatenameVersionGetWithHttpInfoAsync(varClient, templatename, varVersion, getAllDetails, targetClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about a specific version of a specific template for a specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateList>> TemplateClientTemplatenameVersionGetWithHttpInfoAsync(string varClient, string templatename, int varVersion, bool? getAllDetails = default(bool?), string? targetClient = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameVersionGet");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameVersionGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameVersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateList>("/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameVersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an upgraded version of template Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateUpgradeResponse</returns>
        public TemplateUpgradeResponse TemplateClientTemplatenameVersionPost(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateUpgradeResponse> localVarResponse = TemplateClientTemplatenameVersionPostWithHttpInfo(varClient, templatename, varVersion, targetClient, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an upgraded version of template Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateUpgradeResponse</returns>
        public Alterian.JO.Client.ApiResponse<TemplateUpgradeResponse> TemplateClientTemplatenameVersionPostWithHttpInfo(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameVersionPost");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameVersionPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameVersionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplateUpgradeResponse>("/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameVersionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an upgraded version of template Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateUpgradeResponse</returns>
        public async System.Threading.Tasks.Task<TemplateUpgradeResponse> TemplateClientTemplatenameVersionPostAsync(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateUpgradeResponse> localVarResponse = await TemplateClientTemplatenameVersionPostWithHttpInfoAsync(varClient, templatename, varVersion, targetClient, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an upgraded version of template Post a JSON representing a Rule Designer&#39;s tile to retrieve a JSON tile where the template version has   been upgraded
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="body">JSON representing the current template to upgrade (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateUpgradeResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateUpgradeResponse>> TemplateClientTemplatenameVersionPostWithHttpInfoAsync(string varClient, string templatename, int varVersion, string? targetClient = default(string?), Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateClientTemplatenameVersionPost");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateClientTemplatenameVersionPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateClientTemplatenameVersionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplateUpgradeResponse>("/template/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateClientTemplatenameVersionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all templates on the server 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateList</returns>
        public TemplateList TemplateGet(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = TemplateGetWithHttpInfo(from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all templates on the server 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateList</returns>
        public Alterian.JO.Client.ApiResponse<TemplateList> TemplateGetWithHttpInfo(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (basicInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "basicInfo", basicInfo));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateList>("/template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all templates on the server 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateList</returns>
        public async System.Threading.Tasks.Task<TemplateList> TemplateGetAsync(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<TemplateList> localVarResponse = await TemplateGetWithHttpInfoAsync(from, to, allversions, getAllDetails, basicInfo, targetClient, searchText, includePublic, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all templates on the server 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="allversions">Do we want all versions of the file listed? (optional)</param>
        /// <param name="getAllDetails">Do we want to retrieve details of Data Grids present in this template. (optional)</param>
        /// <param name="basicInfo">Only retrieve the basic information about this template, like name, client and url template. (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="includePublic">Flag to indicate whether rules from the public client should be included in the results, please use   iClients&#x3D;public instead (optional) (deprecated)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<TemplateList>> TemplateGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), bool? allversions = default(bool?), bool? getAllDetails = default(bool?), bool? basicInfo = default(bool?), string? targetClient = default(string?), string? searchText = default(string?), bool? includePublic = default(bool?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (allversions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "allversions", allversions));
            }
            if (getAllDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "getAllDetails", getAllDetails));
            }
            if (basicInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "basicInfo", basicInfo));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (includePublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includePublic", includePublic));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "TemplatesApi.TemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateList>("/template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        public ResourceAndStatusResponse TemplateTargetClientTemplatenameVersionPost(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = TemplateTargetClientTemplatenameVersionPostWithHttpInfo(target, varClient, templatename, varVersion, paramSource, targetClient, templatePublishSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        public Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> TemplateTargetClientTemplatenameVersionPostWithHttpInfo(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPost");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (paramSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "paramSource", paramSource));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            localVarRequestOptions.Data = templatePublishSettings;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateTargetClientTemplatenameVersionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceAndStatusResponse>("/template/{target}/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateTargetClientTemplatenameVersionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceAndStatusResponse> TemplateTargetClientTemplatenameVersionPostAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = await TemplateTargetClientTemplatenameVersionPostWithHttpInfoAsync(target, varClient, templatename, varVersion, paramSource, targetClient, templatePublishSettings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="paramSource">When overwriting an existing rule, this determines which value to use (optional)</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="templatePublishSettings">The JSON containing additional settings for this template. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse>> TemplateTargetClientTemplatenameVersionPostWithHttpInfoAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? paramSource = default(string?), string? targetClient = default(string?), TemplatePublishSettings? templatePublishSettings = default(TemplatePublishSettings?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPost");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPost");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (paramSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "paramSource", paramSource));
            }
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            localVarRequestOptions.Data = templatePublishSettings;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateTargetClientTemplatenameVersionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceAndStatusResponse>("/template/{target}/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateTargetClientTemplatenameVersionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse TemplateTargetClientTemplatenameVersionPut(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = TemplateTargetClientTemplatenameVersionPutWithHttpInfo(target, varClient, templatename, varVersion, targetClient, modelClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> TemplateTargetClientTemplatenameVersionPutWithHttpInfo(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0)
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPut");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPut");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            localVarRequestOptions.Data = modelClient;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateTargetClientTemplatenameVersionPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/template/{target}/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateTargetClientTemplatenameVersionPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> TemplateTargetClientTemplatenameVersionPutAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await TemplateTargetClientTemplatenameVersionPutWithHttpInfoAsync(target, varClient, templatename, varVersion, targetClient, modelClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template If a rule is already published at this target then it will be &#39;hot-swapped&#39; with this new version with no   interruption to service.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="templatename">The name of the template</param>
        /// <param name="varVersion">The version of the template</param>
        /// <param name="targetClient">Request template&#39;s Data Grids&#39; details with parameter information for this client. (optional)</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> TemplateTargetClientTemplatenameVersionPutWithHttpInfoAsync(TargetEnum target, string varClient, string templatename, int varVersion, string? targetClient = default(string?), ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPut");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPut");
            }

            // verify the required parameter 'templatename' is set
            if (templatename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'templatename' when calling TemplatesApi->TemplateTargetClientTemplatenameVersionPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("templatename", Alterian.JO.Client.ClientUtils.ParameterToString(templatename)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Alterian.JO.Client.ClientUtils.ParameterToString(varVersion)); // path parameter
            if (targetClient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetClient", targetClient));
            }
            localVarRequestOptions.Data = modelClient;

            localVarRequestOptions.Operation = "TemplatesApi.TemplateTargetClientTemplatenameVersionPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/template/{target}/{client}/{templatename}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateTargetClientTemplatenameVersionPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

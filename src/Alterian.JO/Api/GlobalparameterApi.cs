/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalparameterApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download global parameter
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DownloadGlobalparameterClientParamnameGet(string varClient, string paramname, int operationIndex = 0);

        /// <summary>
        /// Download global parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadGlobalparameterClientParamnameGetWithHttpInfo(string varClient, string paramname, int operationIndex = 0);
        /// <summary>
        /// Get target parameter for for specific client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterList</returns>
        ParameterList GlobalparameterClientGet(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get target parameter for for specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterList</returns>
        ApiResponse<ParameterList> GlobalparameterClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        ParameterApiResponse GlobalparameterClientParamnameCopyPost(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0);

        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        ApiResponse<ParameterApiResponse> GlobalparameterClientParamnameCopyPostWithHttpInfo(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0);
        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        ParameterApiResponse GlobalparameterClientParamnameCopyPut(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0);

        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        ApiResponse<ParameterApiResponse> GlobalparameterClientParamnameCopyPutWithHttpInfo(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0);
        /// <summary>
        /// Delete a global parameter
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse GlobalparameterClientParamnameDelete(string varClient, string paramname, int operationIndex = 0);

        /// <summary>
        /// Delete a global parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> GlobalparameterClientParamnameDeleteWithHttpInfo(string varClient, string paramname, int operationIndex = 0);
        /// <summary>
        /// Get individual Global Parameter
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterList</returns>
        ParameterList GlobalparameterClientParamnameGet(string varClient, string paramname, int operationIndex = 0);

        /// <summary>
        /// Get individual Global Parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterList</returns>
        ApiResponse<ParameterList> GlobalparameterClientParamnameGetWithHttpInfo(string varClient, string paramname, int operationIndex = 0);
        /// <summary>
        /// Update Global Parameter
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        ParameterApiResponse GlobalparameterClientParamnamePut(string varClient, string paramname, Parameter varParameter, int operationIndex = 0);

        /// <summary>
        /// Update Global Parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        ApiResponse<ParameterApiResponse> GlobalparameterClientParamnamePutWithHttpInfo(string varClient, string paramname, Parameter varParameter, int operationIndex = 0);
        /// <summary>
        /// Get global parameters for all clients
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterList</returns>
        ParameterList GlobalparameterGet(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get global parameters for all clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterList</returns>
        ApiResponse<ParameterList> GlobalparameterGetWithHttpInfo(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Create Global Parameter (will fail if already exists)
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        ParameterApiResponse GlobalparameterPost(Parameter? varParameter = default(Parameter?), int operationIndex = 0);

        /// <summary>
        /// Create Global Parameter (will fail if already exists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        ApiResponse<ParameterApiResponse> GlobalparameterPostWithHttpInfo(Parameter? varParameter = default(Parameter?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalparameterApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download global parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadGlobalparameterClientParamnameGetAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download global parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadGlobalparameterClientParamnameGetWithHttpInfoAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get target parameter for for specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterList</returns>
        System.Threading.Tasks.Task<ParameterList> GlobalparameterClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get target parameter for for specific client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterList>> GlobalparameterClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterClientParamnameCopyPostAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterApiResponse>> GlobalparameterClientParamnameCopyPostWithHttpInfoAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterClientParamnameCopyPutAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterApiResponse>> GlobalparameterClientParamnameCopyPutWithHttpInfoAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a global parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> GlobalparameterClientParamnameDeleteAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a global parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> GlobalparameterClientParamnameDeleteWithHttpInfoAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get individual Global Parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterList</returns>
        System.Threading.Tasks.Task<ParameterList> GlobalparameterClientParamnameGetAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get individual Global Parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterList>> GlobalparameterClientParamnameGetWithHttpInfoAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Global Parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterClientParamnamePutAsync(string varClient, string paramname, Parameter varParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Global Parameter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterApiResponse>> GlobalparameterClientParamnamePutWithHttpInfoAsync(string varClient, string paramname, Parameter varParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get global parameters for all clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterList</returns>
        System.Threading.Tasks.Task<ParameterList> GlobalparameterGetAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get global parameters for all clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterList>> GlobalparameterGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Global Parameter (will fail if already exists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterPostAsync(Parameter? varParameter = default(Parameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Global Parameter (will fail if already exists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParameterApiResponse>> GlobalparameterPostWithHttpInfoAsync(Parameter? varParameter = default(Parameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalparameterApi : IGlobalparameterApiSync, IGlobalparameterApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalparameterApi : IGlobalparameterApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalparameterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalparameterApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalparameterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalparameterApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalparameterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalparameterApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalparameterApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlobalparameterApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DownloadGlobalparameterClientParamnameGet(string varClient, string paramname, int operationIndex = 0)
        {
            DownloadGlobalparameterClientParamnameGetWithHttpInfo(varClient, paramname);
        }

        /// <summary>
        /// Download global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Alterian.JO.Client.ApiResponse<Object> DownloadGlobalparameterClientParamnameGetWithHttpInfo(string varClient, string paramname, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->DownloadGlobalparameterClientParamnameGet");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->DownloadGlobalparameterClientParamnameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter

            localVarRequestOptions.Operation = "GlobalparameterApi.DownloadGlobalparameterClientParamnameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/download/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadGlobalparameterClientParamnameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadGlobalparameterClientParamnameGetAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DownloadGlobalparameterClientParamnameGetWithHttpInfoAsync(varClient, paramname, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Download global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<Object>> DownloadGlobalparameterClientParamnameGetWithHttpInfoAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->DownloadGlobalparameterClientParamnameGet");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->DownloadGlobalparameterClientParamnameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter

            localVarRequestOptions.Operation = "GlobalparameterApi.DownloadGlobalparameterClientParamnameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/download/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadGlobalparameterClientParamnameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get target parameter for for specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterList</returns>
        public ParameterList GlobalparameterClientGet(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterList> localVarResponse = GlobalparameterClientGetWithHttpInfo(varClient, from, to, sortProperty, sortDescending, searchText, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get target parameter for for specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterList</returns>
        public Alterian.JO.Client.ApiResponse<ParameterList> GlobalparameterClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ParameterList>("/globalparameter/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get target parameter for for specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterList</returns>
        public async System.Threading.Tasks.Task<ParameterList> GlobalparameterClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterList> localVarResponse = await GlobalparameterClientGetWithHttpInfoAsync(varClient, from, to, sortProperty, sortDescending, searchText, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get target parameter for for specific client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterList>> GlobalparameterClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ParameterList>("/globalparameter/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        public ParameterApiResponse GlobalparameterClientParamnameCopyPost(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = GlobalparameterClientParamnameCopyPostWithHttpInfo(varClient, paramname, parameterCopyDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ParameterApiResponse> GlobalparameterClientParamnameCopyPostWithHttpInfo(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPost");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPost");
            }

            // verify the required parameter 'parameterCopyDetails' is set
            if (parameterCopyDetails == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'parameterCopyDetails' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter
            localVarRequestOptions.Data = parameterCopyDetails;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameCopyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ParameterApiResponse>("/globalparameter/{client}/{paramname}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameCopyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        public async System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterClientParamnameCopyPostAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = await GlobalparameterClientParamnameCopyPostWithHttpInfoAsync(varClient, paramname, parameterCopyDetails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a copy of a Global Parameter and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterApiResponse>> GlobalparameterClientParamnameCopyPostWithHttpInfoAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPost");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPost");
            }

            // verify the required parameter 'parameterCopyDetails' is set
            if (parameterCopyDetails == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'parameterCopyDetails' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter
            localVarRequestOptions.Data = parameterCopyDetails;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameCopyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ParameterApiResponse>("/globalparameter/{client}/{paramname}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameCopyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        public ParameterApiResponse GlobalparameterClientParamnameCopyPut(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = GlobalparameterClientParamnameCopyPutWithHttpInfo(varClient, paramname, parameterCopyDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ParameterApiResponse> GlobalparameterClientParamnameCopyPutWithHttpInfo(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPut");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPut");
            }

            // verify the required parameter 'parameterCopyDetails' is set
            if (parameterCopyDetails == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'parameterCopyDetails' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter
            localVarRequestOptions.Data = parameterCopyDetails;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameCopyPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ParameterApiResponse>("/globalparameter/{client}/{paramname}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameCopyPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        public async System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterClientParamnameCopyPutAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = await GlobalparameterClientParamnameCopyPutWithHttpInfoAsync(varClient, paramname, parameterCopyDetails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="parameterCopyDetails"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterApiResponse>> GlobalparameterClientParamnameCopyPutWithHttpInfoAsync(string varClient, string paramname, ParameterCopyDetails parameterCopyDetails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPut");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPut");
            }

            // verify the required parameter 'parameterCopyDetails' is set
            if (parameterCopyDetails == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'parameterCopyDetails' when calling GlobalparameterApi->GlobalparameterClientParamnameCopyPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter
            localVarRequestOptions.Data = parameterCopyDetails;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameCopyPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ParameterApiResponse>("/globalparameter/{client}/{paramname}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameCopyPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse GlobalparameterClientParamnameDelete(string varClient, string paramname, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = GlobalparameterClientParamnameDeleteWithHttpInfo(varClient, paramname);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> GlobalparameterClientParamnameDeleteWithHttpInfo(string varClient, string paramname, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameDelete");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> GlobalparameterClientParamnameDeleteAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await GlobalparameterClientParamnameDeleteWithHttpInfoAsync(varClient, paramname, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a global parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> GlobalparameterClientParamnameDeleteWithHttpInfoAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameDelete");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterList</returns>
        public ParameterList GlobalparameterClientParamnameGet(string varClient, string paramname, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterList> localVarResponse = GlobalparameterClientParamnameGetWithHttpInfo(varClient, paramname);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterList</returns>
        public Alterian.JO.Client.ApiResponse<ParameterList> GlobalparameterClientParamnameGetWithHttpInfo(string varClient, string paramname, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameGet");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ParameterList>("/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get individual Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterList</returns>
        public async System.Threading.Tasks.Task<ParameterList> GlobalparameterClientParamnameGetAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterList> localVarResponse = await GlobalparameterClientParamnameGetWithHttpInfoAsync(varClient, paramname, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get individual Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterList>> GlobalparameterClientParamnameGetWithHttpInfoAsync(string varClient, string paramname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnameGet");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ParameterList>("/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        public ParameterApiResponse GlobalparameterClientParamnamePut(string varClient, string paramname, Parameter varParameter, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = GlobalparameterClientParamnamePutWithHttpInfo(varClient, paramname, varParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ParameterApiResponse> GlobalparameterClientParamnamePutWithHttpInfo(string varClient, string paramname, Parameter varParameter, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnamePut");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnamePut");
            }

            // verify the required parameter 'varParameter' is set
            if (varParameter == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varParameter' when calling GlobalparameterApi->GlobalparameterClientParamnamePut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter
            localVarRequestOptions.Data = varParameter;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ParameterApiResponse>("/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        public async System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterClientParamnamePutAsync(string varClient, string paramname, Parameter varParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = await GlobalparameterClientParamnamePutWithHttpInfoAsync(varClient, paramname, varParameter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Global Parameter 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="paramname">parameter name</param>
        /// <param name="varParameter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterApiResponse>> GlobalparameterClientParamnamePutWithHttpInfoAsync(string varClient, string paramname, Parameter varParameter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling GlobalparameterApi->GlobalparameterClientParamnamePut");
            }

            // verify the required parameter 'paramname' is set
            if (paramname == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'paramname' when calling GlobalparameterApi->GlobalparameterClientParamnamePut");
            }

            // verify the required parameter 'varParameter' is set
            if (varParameter == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varParameter' when calling GlobalparameterApi->GlobalparameterClientParamnamePut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("paramname", Alterian.JO.Client.ClientUtils.ParameterToString(paramname)); // path parameter
            localVarRequestOptions.Data = varParameter;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterClientParamnamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ParameterApiResponse>("/globalparameter/{client}/{paramname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterClientParamnamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get global parameters for all clients 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterList</returns>
        public ParameterList GlobalparameterGet(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterList> localVarResponse = GlobalparameterGetWithHttpInfo(from, to, sortProperty, sortDescending, searchText, iClients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get global parameters for all clients 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterList</returns>
        public Alterian.JO.Client.ApiResponse<ParameterList> GlobalparameterGetWithHttpInfo(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ParameterList>("/globalparameter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get global parameters for all clients 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterList</returns>
        public async System.Threading.Tasks.Task<ParameterList> GlobalparameterGetAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterList> localVarResponse = await GlobalparameterGetWithHttpInfoAsync(from, to, sortProperty, sortDescending, searchText, iClients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get global parameters for all clients 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="sortProperty">List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue. (optional)</param>
        /// <param name="sortDescending">List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty (optional)</param>
        /// <param name="searchText">Filter results to those which contain this text (optional)</param>
        /// <param name="iClients">Only include these client(s) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterList)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterList>> GlobalparameterGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), string? sortProperty = default(string?), string? sortDescending = default(string?), string? searchText = default(string?), List<string>? iClients = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (sortProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortProperty", sortProperty));
            }
            if (sortDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sortDescending", sortDescending));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (iClients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("multi", "iClients", iClients));
            }

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ParameterList>("/globalparameter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Global Parameter (will fail if already exists) 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ParameterApiResponse</returns>
        public ParameterApiResponse GlobalparameterPost(Parameter? varParameter = default(Parameter?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = GlobalparameterPostWithHttpInfo(varParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Global Parameter (will fail if already exists) 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ParameterApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ParameterApiResponse> GlobalparameterPostWithHttpInfo(Parameter? varParameter = default(Parameter?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = varParameter;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ParameterApiResponse>("/globalparameter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Global Parameter (will fail if already exists) 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ParameterApiResponse</returns>
        public async System.Threading.Tasks.Task<ParameterApiResponse> GlobalparameterPostAsync(Parameter? varParameter = default(Parameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ParameterApiResponse> localVarResponse = await GlobalparameterPostWithHttpInfoAsync(varParameter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Global Parameter (will fail if already exists) 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varParameter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ParameterApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ParameterApiResponse>> GlobalparameterPostWithHttpInfoAsync(Parameter? varParameter = default(Parameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = varParameter;

            localVarRequestOptions.Operation = "GlobalparameterApi.GlobalparameterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ParameterApiResponse>("/globalparameter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalparameterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a specific alias from the client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientAliasAliasNameDelete(string varClient, string aliasName, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific alias from the client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientAliasAliasNameDeleteWithHttpInfo(string varClient, string aliasName, int operationIndex = 0);
        /// <summary>
        /// Returns back information about a specific alias
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientAliasAliasNameGet(string varClient, string aliasName, int operationIndex = 0);

        /// <summary>
        /// Returns back information about a specific alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientAliasAliasNameGetWithHttpInfo(string varClient, string aliasName, int operationIndex = 0);
        /// <summary>
        /// Creates or updates an alias
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientAliasAliasNameTargetRuleorgroupPost(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0);

        /// <summary>
        /// Creates or updates an alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfo(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0);
        /// <summary>
        /// Create a new alias, must not exist.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        ResourceAndStatusResponse ClientClientAliasAliasNameTargetRuleorgroupPut(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0);

        /// <summary>
        /// Create a new alias, must not exist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        ApiResponse<ResourceAndStatusResponse> ClientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfo(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0);
        /// <summary>
        /// Returns back all aliases which have been defined for a client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientResponse</returns>
        ClientResponse ClientClientAliasGet(string varClient, int operationIndex = 0);

        /// <summary>
        /// Returns back all aliases which have been defined for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        ApiResponse<ClientResponse> ClientClientAliasGetWithHttpInfo(string varClient, int operationIndex = 0);
        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientCopyDestinationPut(string varClient, string? destination = default(string?), int operationIndex = 0);

        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientCopyDestinationPutWithHttpInfo(string varClient, string? destination = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete all client files that have been uploaded to the server.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientDelete(string varClient, int operationIndex = 0);

        /// <summary>
        /// Delete all client files that have been uploaded to the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientDeleteWithHttpInfo(string varClient, int operationIndex = 0);
        /// <summary>
        /// Returns extended details about a client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientResponse</returns>
        ClientResponse ClientClientGet(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Returns extended details about a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        ApiResponse<ClientResponse> ClientClientGetWithHttpInfo(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Updates a client&#39;s parameters
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientPost(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0);

        /// <summary>
        /// Updates a client&#39;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientPostWithHttpInfo(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0);
        /// <summary>
        /// Create a new client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClientClientPut(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0);

        /// <summary>
        /// Create a new client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClientClientPutWithHttpInfo(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0);
        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        [Obsolete]
        ApiResponse ClientCopySourcePut(string source, string? destination = default(string?), int operationIndex = 0);

        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        [Obsolete]
        ApiResponse<ApiResponse> ClientCopySourcePutWithHttpInfo(string source, string? destination = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientResponse</returns>
        ClientResponse ClientGet(int operationIndex = 0);

        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        ApiResponse<ClientResponse> ClientGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a specific alias from the client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientAliasAliasNameDeleteAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific alias from the client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientAliasAliasNameDeleteWithHttpInfoAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back information about a specific alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientAliasAliasNameGetAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back information about a specific alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientAliasAliasNameGetWithHttpInfoAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates an alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientAliasAliasNameTargetRuleorgroupPostAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates an alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfoAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new alias, must not exist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        System.Threading.Tasks.Task<ResourceAndStatusResponse> ClientClientAliasAliasNameTargetRuleorgroupPutAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new alias, must not exist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceAndStatusResponse>> ClientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfoAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back all aliases which have been defined for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientResponse</returns>
        System.Threading.Tasks.Task<ClientResponse> ClientClientAliasGetAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back all aliases which have been defined for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResponse>> ClientClientAliasGetWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientCopyDestinationPutAsync(string varClient, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientCopyDestinationPutWithHttpInfoAsync(string varClient, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all client files that have been uploaded to the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientDeleteAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all client files that have been uploaded to the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientDeleteWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns extended details about a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientResponse</returns>
        System.Threading.Tasks.Task<ClientResponse> ClientClientGetAsync(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns extended details about a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResponse>> ClientClientGetWithHttpInfoAsync(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a client&#39;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientPostAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a client&#39;s parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientPostWithHttpInfoAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClientClientPutAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientClientPutWithHttpInfoAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse> ClientCopySourcePutAsync(string source, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy an existing client to a client with a new name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClientCopySourcePutWithHttpInfoAsync(string source, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientResponse</returns>
        System.Threading.Tasks.Task<ClientResponse> ClientGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResponse>> ClientGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApi : IClientApiSync, IClientApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientApi : IClientApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes a specific alias from the client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientAliasAliasNameDelete(string varClient, string aliasName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientAliasAliasNameDeleteWithHttpInfo(varClient, aliasName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific alias from the client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientAliasAliasNameDeleteWithHttpInfo(string varClient, string aliasName, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameDelete");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/client/{client}/alias/{aliasName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific alias from the client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientAliasAliasNameDeleteAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientAliasAliasNameDeleteWithHttpInfoAsync(varClient, aliasName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific alias from the client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientAliasAliasNameDeleteWithHttpInfoAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameDelete");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/client/{client}/alias/{aliasName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back information about a specific alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientAliasAliasNameGet(string varClient, string aliasName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientAliasAliasNameGetWithHttpInfo(varClient, aliasName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back information about a specific alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientAliasAliasNameGetWithHttpInfo(string varClient, string aliasName, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameGet");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/client/{client}/alias/{aliasName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back information about a specific alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientAliasAliasNameGetAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientAliasAliasNameGetWithHttpInfoAsync(varClient, aliasName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back information about a specific alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientAliasAliasNameGetWithHttpInfoAsync(string varClient, string aliasName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameGet");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/client/{client}/alias/{aliasName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates an alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientAliasAliasNameTargetRuleorgroupPost(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfo(varClient, aliasName, target, ruleorgroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates an alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfo(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            // verify the required parameter 'ruleorgroup' is set
            if (ruleorgroup == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'ruleorgroup' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleorgroup", Alterian.JO.Client.ClientUtils.ParameterToString(ruleorgroup)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameTargetRuleorgroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/client/{client}/alias/{aliasName}/{target}/{ruleorgroup}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameTargetRuleorgroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates an alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientAliasAliasNameTargetRuleorgroupPostAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfoAsync(varClient, aliasName, target, ruleorgroup, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates an alias 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientAliasAliasNameTargetRuleorgroupPostWithHttpInfoAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }

            // verify the required parameter 'ruleorgroup' is set
            if (ruleorgroup == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'ruleorgroup' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleorgroup", Alterian.JO.Client.ClientUtils.ParameterToString(ruleorgroup)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameTargetRuleorgroupPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/client/{client}/alias/{aliasName}/{target}/{ruleorgroup}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameTargetRuleorgroupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias, must not exist. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceAndStatusResponse</returns>
        public ResourceAndStatusResponse ClientClientAliasAliasNameTargetRuleorgroupPut(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = ClientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfo(varClient, aliasName, target, ruleorgroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new alias, must not exist. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceAndStatusResponse</returns>
        public Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> ClientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfo(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            // verify the required parameter 'ruleorgroup' is set
            if (ruleorgroup == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'ruleorgroup' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleorgroup", Alterian.JO.Client.ClientUtils.ParameterToString(ruleorgroup)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameTargetRuleorgroupPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ResourceAndStatusResponse>("/client/{client}/alias/{aliasName}/{target}/{ruleorgroup}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameTargetRuleorgroupPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias, must not exist. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceAndStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResourceAndStatusResponse> ClientClientAliasAliasNameTargetRuleorgroupPutAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse> localVarResponse = await ClientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfoAsync(varClient, aliasName, target, ruleorgroup, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new alias, must not exist. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="aliasName">The name of the alias</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="ruleorgroup">The name of the rule or rule group to which this alias should point</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceAndStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ResourceAndStatusResponse>> ClientClientAliasAliasNameTargetRuleorgroupPutWithHttpInfoAsync(string varClient, string aliasName, TargetEnum target, string ruleorgroup, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            // verify the required parameter 'aliasName' is set
            if (aliasName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'aliasName' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }

            // verify the required parameter 'ruleorgroup' is set
            if (ruleorgroup == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'ruleorgroup' when calling ClientApi->ClientClientAliasAliasNameTargetRuleorgroupPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("aliasName", Alterian.JO.Client.ClientUtils.ParameterToString(aliasName)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("ruleorgroup", Alterian.JO.Client.ClientUtils.ParameterToString(ruleorgroup)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasAliasNameTargetRuleorgroupPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ResourceAndStatusResponse>("/client/{client}/alias/{aliasName}/{target}/{ruleorgroup}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasAliasNameTargetRuleorgroupPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back all aliases which have been defined for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientResponse</returns>
        public ClientResponse ClientClientAliasGet(string varClient, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ClientResponse> localVarResponse = ClientClientAliasGetWithHttpInfo(varClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back all aliases which have been defined for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        public Alterian.JO.Client.ApiResponse<ClientResponse> ClientClientAliasGetWithHttpInfo(string varClient, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientResponse>("/client/{client}/alias", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back all aliases which have been defined for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientResponse</returns>
        public async System.Threading.Tasks.Task<ClientResponse> ClientClientAliasGetAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ClientResponse> localVarResponse = await ClientClientAliasGetWithHttpInfoAsync(varClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back all aliases which have been defined for a client 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ClientResponse>> ClientClientAliasGetWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientAliasGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientAliasGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientResponse>("/client/{client}/alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientAliasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientCopyDestinationPut(string varClient, string? destination = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientCopyDestinationPutWithHttpInfo(varClient, destination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientCopyDestinationPutWithHttpInfo(string varClient, string? destination = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientCopyDestinationPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (destination != null)
            {
                localVarRequestOptions.PathParameters.Add("destination", Alterian.JO.Client.ClientUtils.ParameterToString(destination)); // path parameter
            }

            localVarRequestOptions.Operation = "ClientApi.ClientClientCopyDestinationPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/client/{client}/copy/{destination}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientCopyDestinationPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientCopyDestinationPutAsync(string varClient, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientCopyDestinationPutWithHttpInfoAsync(varClient, destination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The source client</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientCopyDestinationPutWithHttpInfoAsync(string varClient, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientCopyDestinationPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (destination != null)
            {
                localVarRequestOptions.PathParameters.Add("destination", Alterian.JO.Client.ClientUtils.ParameterToString(destination)); // path parameter
            }

            localVarRequestOptions.Operation = "ClientApi.ClientClientCopyDestinationPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/client/{client}/copy/{destination}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientCopyDestinationPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all client files that have been uploaded to the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientDelete(string varClient, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientDeleteWithHttpInfo(varClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all client files that have been uploaded to the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientDeleteWithHttpInfo(string varClient, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/client/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all client files that have been uploaded to the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientDeleteAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientDeleteWithHttpInfoAsync(varClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all client files that have been uploaded to the server. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientDeleteWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "ClientApi.ClientClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/client/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns extended details about a client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientResponse</returns>
        public ClientResponse ClientClientGet(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ClientResponse> localVarResponse = ClientClientGetWithHttpInfo(varClient, aszip, asdata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns extended details about a client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        public Alterian.JO.Client.ApiResponse<ClientResponse> ClientClientGetWithHttpInfo(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (aszip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "aszip", aszip));
            }
            if (asdata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "asdata", asdata));
            }

            localVarRequestOptions.Operation = "ClientApi.ClientClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientResponse>("/client/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns extended details about a client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientResponse</returns>
        public async System.Threading.Tasks.Task<ClientResponse> ClientClientGetAsync(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ClientResponse> localVarResponse = await ClientClientGetWithHttpInfoAsync(varClient, aszip, asdata, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns extended details about a client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name, you can use * to return all clients to which your account has access</param>
        /// <param name="aszip">Return back the entire client in a zip (compresses everything except files).  Requires ALL   permissions.  Note, you cannot use a wildcard with this option. (optional)</param>
        /// <param name="asdata">If this is true, it will return just the client list in the data property and exclude permissions,   etc. from the result.  Useful if you simply want a list of clients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ClientResponse>> ClientClientGetWithHttpInfoAsync(string varClient, bool? aszip = default(bool?), bool? asdata = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (aszip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "aszip", aszip));
            }
            if (asdata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "asdata", asdata));
            }

            localVarRequestOptions.Operation = "ClientApi.ClientClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientResponse>("/client/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a client&#39;s parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientPost(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientPostWithHttpInfo(varClient, modelClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a client&#39;s parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientPostWithHttpInfo(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.Data = modelClient;

            localVarRequestOptions.Operation = "ClientApi.ClientClientPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/client/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a client&#39;s parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientPostAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientPostWithHttpInfoAsync(varClient, modelClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a client&#39;s parameters 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientPostWithHttpInfoAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.Data = modelClient;

            localVarRequestOptions.Operation = "ClientApi.ClientClientPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/client/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClientClientPut(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientClientPutWithHttpInfo(varClient, modelClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientClientPutWithHttpInfo(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientPut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.Data = modelClient;

            localVarRequestOptions.Operation = "ClientApi.ClientClientPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/client/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClientClientPutAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientClientPutWithHttpInfoAsync(varClient, modelClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new client. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name, must begin with a letter, can only contain alphanumerics and hyphens, and must be no   more than 40 characters long</param>
        /// <param name="modelClient"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientClientPutWithHttpInfoAsync(string varClient, ModelClient? modelClient = default(ModelClient?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling ClientApi->ClientClientPut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.Data = modelClient;

            localVarRequestOptions.Operation = "ClientApi.ClientClientPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/client/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientClientPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        [Obsolete]
        public ApiResponse ClientCopySourcePut(string source, string? destination = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClientCopySourcePutWithHttpInfo(source, destination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        [Obsolete]
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClientCopySourcePutWithHttpInfo(string source, string? destination = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'source' when calling ClientApi->ClientCopySourcePut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("source", Alterian.JO.Client.ClientUtils.ParameterToString(source)); // path parameter
            if (destination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "destination", destination));
            }

            localVarRequestOptions.Operation = "ClientApi.ClientCopySourcePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/client/copy/{source}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientCopySourcePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse> ClientCopySourcePutAsync(string source, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClientCopySourcePutWithHttpInfoAsync(source, destination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an existing client to a client with a new name 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source client name</param>
        /// <param name="destination">The new client name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClientCopySourcePutWithHttpInfoAsync(string source, string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'source' when calling ClientApi->ClientCopySourcePut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("source", Alterian.JO.Client.ClientUtils.ParameterToString(source)); // path parameter
            if (destination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "destination", destination));
            }

            localVarRequestOptions.Operation = "ClientApi.ClientCopySourcePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/client/copy/{source}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientCopySourcePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientResponse</returns>
        public ClientResponse ClientGet(int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ClientResponse> localVarResponse = ClientGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        public Alterian.JO.Client.ApiResponse<ClientResponse> ClientGetWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClientApi.ClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientResponse>("/client", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientResponse</returns>
        public async System.Threading.Tasks.Task<ClientResponse> ClientGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ClientResponse> localVarResponse = await ClientGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all clients that your login can access, and all permissions that you have 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ClientResponse>> ClientGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClientApi.ClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientResponse>("/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

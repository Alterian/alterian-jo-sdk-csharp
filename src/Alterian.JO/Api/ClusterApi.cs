/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove this node from the cluster
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ClusterDecommissionDelete(string targetnode, int operationIndex = 0);

        /// <summary>
        /// Remove this node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClusterDecommissionDeleteWithHttpInfo(string targetnode, int operationIndex = 0);
        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ClusterDelete(int operationIndex = 0);

        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClusterDeleteWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Ask the cluster to rerun the discovery process.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterDiscoverPost(int operationIndex = 0);

        /// <summary>
        /// Ask the cluster to rerun the discovery process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterDiscoverPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterFlushPost(int operationIndex = 0);

        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterFlushPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Find out what instances are in the cluster
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterGet(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Find out what instances are in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterGetWithHttpInfo(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Register an instance with the cluster
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterPost(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0);

        /// <summary>
        /// Register an instance with the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterPostWithHttpInfo(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0);
        /// <summary>
        /// Update an advanced cluster setting
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterPut(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0);

        /// <summary>
        /// Update an advanced cluster setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterPutWithHttpInfo(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0);
        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterReregisterPost(string? body = default(string?), int operationIndex = 0);

        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterReregisterPostWithHttpInfo(string? body = default(string?), int operationIndex = 0);
        /// <summary>
        /// Find out the streaming status of an instance in the cluster
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterStreamGet(string? targetnode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Find out the streaming status of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterStreamGetWithHttpInfo(string? targetnode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterStreamThroughputGet(string? targetnode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterStreamThroughputGetWithHttpInfo(string? targetnode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ClusterStreamThroughputPost(int throughput, string? targetnode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ClusterStreamThroughputPostWithHttpInfo(int throughput, string? targetnode = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove this node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClusterDecommissionDeleteAsync(string targetnode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove this node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClusterDecommissionDeleteWithHttpInfoAsync(string targetnode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClusterDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClusterDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ask the cluster to rerun the discovery process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterDiscoverPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ask the cluster to rerun the discovery process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterDiscoverPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterFlushPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterFlushPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find out what instances are in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterGetAsync(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find out what instances are in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterGetWithHttpInfoAsync(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an instance with the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterPostAsync(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an instance with the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterPostWithHttpInfoAsync(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an advanced cluster setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterPutAsync(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an advanced cluster setting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterPutWithHttpInfoAsync(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterReregisterPostAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterReregisterPostWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find out the streaming status of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterStreamGetAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find out the streaming status of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterStreamGetWithHttpInfoAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterStreamThroughputGetAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterStreamThroughputGetWithHttpInfoAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ClusterStreamThroughputPostAsync(int throughput, string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ClusterStreamThroughputPostWithHttpInfoAsync(int throughput, string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterApi : IClusterApiSync, IClusterApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClusterApi : IClusterApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClusterApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClusterApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClusterApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClusterApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove this node from the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ClusterDecommissionDelete(string targetnode, int operationIndex = 0)
        {
            ClusterDecommissionDeleteWithHttpInfo(targetnode);
        }

        /// <summary>
        /// Remove this node from the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Alterian.JO.Client.ApiResponse<Object> ClusterDecommissionDeleteWithHttpInfo(string targetnode, int operationIndex = 0)
        {
            // verify the required parameter 'targetnode' is set
            if (targetnode == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'targetnode' when calling ClusterApi->ClusterDecommissionDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));

            localVarRequestOptions.Operation = "ClusterApi.ClusterDecommissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cluster/decommission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterDecommissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove this node from the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClusterDecommissionDeleteAsync(string targetnode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClusterDecommissionDeleteWithHttpInfoAsync(targetnode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove this node from the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Must match the private IP address of the node, so there is no ambiguity when decommissioning</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<Object>> ClusterDecommissionDeleteWithHttpInfoAsync(string targetnode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'targetnode' is set
            if (targetnode == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'targetnode' when calling ClusterApi->ClusterDecommissionDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));

            localVarRequestOptions.Operation = "ClusterApi.ClusterDecommissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cluster/decommission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterDecommissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ClusterDelete(int operationIndex = 0)
        {
            ClusterDeleteWithHttpInfo();
        }

        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Alterian.JO.Client.ApiResponse<Object> ClusterDeleteWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClusterApi.ClusterDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cluster", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClusterDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClusterDeleteWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes from the cluster a down node that has not been seen for the longest 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<Object>> ClusterDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClusterApi.ClusterDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cluster", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ask the cluster to rerun the discovery process. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterDiscoverPost(int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterDiscoverPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ask the cluster to rerun the discovery process. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterDiscoverPostWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClusterApi.ClusterDiscoverPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/cluster/discover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterDiscoverPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ask the cluster to rerun the discovery process. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterDiscoverPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterDiscoverPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ask the cluster to rerun the discovery process. 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterDiscoverPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClusterApi.ClusterDiscoverPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/cluster/discover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterDiscoverPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterFlushPost(int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterFlushPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterFlushPostWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClusterApi.ClusterFlushPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/cluster/flush", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterFlushPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterFlushPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterFlushPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make sure all data in internal caches across the entire cluster are written to disk 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterFlushPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ClusterApi.ClusterFlushPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/cluster/flush", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterFlushPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out what instances are in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterGet(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterGetWithHttpInfo(update, repair, includeSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out what instances are in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterGetWithHttpInfo(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (update != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "update", update));
            }
            if (repair != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "repair", repair));
            }
            if (includeSettings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeSettings", includeSettings));
            }

            localVarRequestOptions.Operation = "ClusterApi.ClusterGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/cluster", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out what instances are in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterGetAsync(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterGetWithHttpInfoAsync(update, repair, includeSettings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out what instances are in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update">Also ping the other instances in the cluster to check that they are present. (optional)</param>
        /// <param name="repair">Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up (optional)</param>
        /// <param name="includeSettings">Include extended details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterGetWithHttpInfoAsync(bool? update = default(bool?), bool? repair = default(bool?), bool? includeSettings = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (update != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "update", update));
            }
            if (repair != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "repair", repair));
            }
            if (includeSettings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeSettings", includeSettings));
            }

            localVarRequestOptions.Operation = "ClusterApi.ClusterGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/cluster", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an instance with the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterPost(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterPostWithHttpInfo(clusterPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register an instance with the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterPostWithHttpInfo(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clusterPostRequest;

            localVarRequestOptions.Operation = "ClusterApi.ClusterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/cluster", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an instance with the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterPostAsync(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterPostWithHttpInfoAsync(clusterPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register an instance with the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterPostWithHttpInfoAsync(ClusterPostRequest? clusterPostRequest = default(ClusterPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clusterPostRequest;

            localVarRequestOptions.Operation = "ClusterApi.ClusterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/cluster", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an advanced cluster setting 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterPut(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterPutWithHttpInfo(clusterPutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an advanced cluster setting 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterPutWithHttpInfo(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clusterPutRequest;

            localVarRequestOptions.Operation = "ClusterApi.ClusterPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/cluster", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an advanced cluster setting 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterPutAsync(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterPutWithHttpInfoAsync(clusterPutRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an advanced cluster setting 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterPutWithHttpInfoAsync(ClusterPutRequest? clusterPutRequest = default(ClusterPutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clusterPutRequest;

            localVarRequestOptions.Operation = "ClusterApi.ClusterPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/cluster", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterReregisterPost(string? body = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterReregisterPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterReregisterPostWithHttpInfo(string? body = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/text"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ClusterApi.ClusterReregisterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/cluster/reregister", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterReregisterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterReregisterPostAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterReregisterPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make this note reregister itself with all the other nodes in the cluster without requiring a restart 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterReregisterPostWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/text"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ClusterApi.ClusterReregisterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/cluster/reregister", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterReregisterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out the streaming status of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterStreamGet(string? targetnode = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterStreamGetWithHttpInfo(targetnode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out the streaming status of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterStreamGetWithHttpInfo(string? targetnode = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetnode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));
            }

            localVarRequestOptions.Operation = "ClusterApi.ClusterStreamGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/cluster/stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterStreamGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out the streaming status of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterStreamGetAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterStreamGetWithHttpInfoAsync(targetnode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out the streaming status of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterStreamGetWithHttpInfoAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetnode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));
            }

            localVarRequestOptions.Operation = "ClusterApi.ClusterStreamGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/cluster/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterStreamGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterStreamThroughputGet(string? targetnode = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterStreamThroughputGetWithHttpInfo(targetnode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterStreamThroughputGetWithHttpInfo(string? targetnode = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetnode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));
            }

            localVarRequestOptions.Operation = "ClusterApi.ClusterStreamThroughputGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/cluster/stream/throughput", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterStreamThroughputGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterStreamThroughputGetAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterStreamThroughputGetWithHttpInfoAsync(targetnode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find out the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterStreamThroughputGetWithHttpInfoAsync(string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetnode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));
            }

            localVarRequestOptions.Operation = "ClusterApi.ClusterStreamThroughputGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/cluster/stream/throughput", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterStreamThroughputGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ClusterStreamThroughputPost(int throughput, string? targetnode = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = ClusterStreamThroughputPostWithHttpInfo(throughput, targetnode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> ClusterStreamThroughputPostWithHttpInfo(int throughput, string? targetnode = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetnode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));
            }
            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "throughput", throughput));

            localVarRequestOptions.Operation = "ClusterApi.ClusterStreamThroughputPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/cluster/stream/throughput", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterStreamThroughputPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ClusterStreamThroughputPostAsync(int throughput, string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await ClusterStreamThroughputPostWithHttpInfoAsync(throughput, targetnode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the current stream throughput (Mb per sec) of an instance in the cluster 
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="throughput">The maximum data rate in Mb/s that this node can send across all streams.</param>
        /// <param name="targetnode">Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> ClusterStreamThroughputPostWithHttpInfoAsync(int throughput, string? targetnode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetnode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "targetnode", targetnode));
            }
            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "throughput", throughput));

            localVarRequestOptions.Operation = "ClusterApi.ClusterStreamThroughputPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/cluster/stream/throughput", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClusterStreamThroughputPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

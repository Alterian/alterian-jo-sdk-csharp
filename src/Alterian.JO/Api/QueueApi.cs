/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete all queues that this client owns.
        /// </summary>
        /// <remarks>
        /// Delete all queues that this client owns, across all targets.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientDelete(string varClient, int operationIndex = 0);

        /// <summary>
        /// Delete all queues that this client owns.
        /// </summary>
        /// <remarks>
        /// Delete all queues that this client owns, across all targets.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientDeleteWithHttpInfo(string varClient, int operationIndex = 0);
        /// <summary>
        /// Get all of the queues for a specific client, across all targets.
        /// </summary>
        /// <remarks>
        /// Find the full details of all queues that this client owns, across all targets
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientGet(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get all of the queues for a specific client, across all targets.
        /// </summary>
        /// <remarks>
        /// Find the full details of all queues that this client owns, across all targets
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <remarks>
        /// Delete all of the queues within a specific target for the given client
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetDelete(string varClient, TargetEnum target, int operationIndex = 0);

        /// <summary>
        /// Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <remarks>
        /// Delete all of the queues within a specific target for the given client
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetDeleteWithHttpInfo(string varClient, TargetEnum target, int operationIndex = 0);
        /// <summary>
        /// Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <remarks>
        /// Get details about all of the queues within a specific target for this client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetGet(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <remarks>
        /// Get details about all of the queues within a specific target for this client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetGetWithHttpInfo(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove a set of messages from a given queue.
        /// </summary>
        /// <remarks>
        /// If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNameAckPost(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0);

        /// <summary>
        /// Remove a set of messages from a given queue.
        /// </summary>
        /// <remarks>
        /// If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNameAckPostWithHttpInfo(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0);
        /// <summary>
        /// Delete a specific named queue
        /// </summary>
        /// <remarks>
        /// Delete a queue and all the messages within it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNameDelete(string varClient, TargetEnum target, string queueName, int operationIndex = 0);

        /// <summary>
        /// Delete a specific named queue
        /// </summary>
        /// <remarks>
        /// Delete a queue and all the messages within it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNameDeleteWithHttpInfo(string varClient, TargetEnum target, string queueName, int operationIndex = 0);
        /// <summary>
        /// Gets information about a specific named queue.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNameGet(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Gets information about a specific named queue.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNameGetWithHttpInfo(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Gets one or more messages from the queue
        /// </summary>
        /// <remarks>
        /// Return a JSON array containing zero or more messages
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNameMessagesGet(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0);

        /// <summary>
        /// Gets one or more messages from the queue
        /// </summary>
        /// <remarks>
        /// Return a JSON array containing zero or more messages
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNameMessagesGetWithHttpInfo(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0);
        /// <summary>
        /// Add a message to the named queue
        /// </summary>
        /// <remarks>
        /// Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNameMessagesPost(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0);

        /// <summary>
        /// Add a message to the named queue
        /// </summary>
        /// <remarks>
        /// Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNameMessagesPostWithHttpInfo(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0);
        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue
        /// </summary>
        /// <remarks>
        /// Used for creating a new queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNamePost(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0);

        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue
        /// </summary>
        /// <remarks>
        /// Used for creating a new queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNamePostWithHttpInfo(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0);
        /// <summary>
        /// Remove all messages from the named queue
        /// </summary>
        /// <remarks>
        /// Used to clear messages from a queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNamePurgePost(string varClient, TargetEnum target, string queueName, int operationIndex = 0);

        /// <summary>
        /// Remove all messages from the named queue
        /// </summary>
        /// <remarks>
        /// Used to clear messages from a queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNamePurgePostWithHttpInfo(string varClient, TargetEnum target, string queueName, int operationIndex = 0);
        /// <summary>
        /// Edit an existing queue
        /// </summary>
        /// <remarks>
        /// Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueClientTargetQueueNamePut(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0);

        /// <summary>
        /// Edit an existing queue
        /// </summary>
        /// <remarks>
        /// Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueClientTargetQueueNamePutWithHttpInfo(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0);
        /// <summary>
        /// Get information about all queues on the server.
        /// </summary>
        /// <remarks>
        /// Get information about all queues that this user can access.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse QueueGet(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get information about all queues on the server.
        /// </summary>
        /// <remarks>
        /// Get information about all queues that this user can access.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> QueueGetWithHttpInfo(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete all queues that this client owns.
        /// </summary>
        /// <remarks>
        /// Delete all queues that this client owns, across all targets.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientDeleteAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all queues that this client owns.
        /// </summary>
        /// <remarks>
        /// Delete all queues that this client owns, across all targets.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientDeleteWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all of the queues for a specific client, across all targets.
        /// </summary>
        /// <remarks>
        /// Find the full details of all queues that this client owns, across all targets
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all of the queues for a specific client, across all targets.
        /// </summary>
        /// <remarks>
        /// Find the full details of all queues that this client owns, across all targets
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <remarks>
        /// Delete all of the queues within a specific target for the given client
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetDeleteAsync(string varClient, TargetEnum target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <remarks>
        /// Delete all of the queues within a specific target for the given client
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetDeleteWithHttpInfoAsync(string varClient, TargetEnum target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <remarks>
        /// Get details about all of the queues within a specific target for this client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetGetAsync(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <remarks>
        /// Get details about all of the queues within a specific target for this client.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetGetWithHttpInfoAsync(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a set of messages from a given queue.
        /// </summary>
        /// <remarks>
        /// If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameAckPostAsync(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a set of messages from a given queue.
        /// </summary>
        /// <remarks>
        /// If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNameAckPostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific named queue
        /// </summary>
        /// <remarks>
        /// Delete a queue and all the messages within it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameDeleteAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific named queue
        /// </summary>
        /// <remarks>
        /// Delete a queue and all the messages within it
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNameDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets information about a specific named queue.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameGetAsync(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets information about a specific named queue.
        /// </summary>
        /// <remarks>
        /// Information returned is filtered by user permissions.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNameGetWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets one or more messages from the queue
        /// </summary>
        /// <remarks>
        /// Return a JSON array containing zero or more messages
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameMessagesGetAsync(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets one or more messages from the queue
        /// </summary>
        /// <remarks>
        /// Return a JSON array containing zero or more messages
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNameMessagesGetWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a message to the named queue
        /// </summary>
        /// <remarks>
        /// Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameMessagesPostAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a message to the named queue
        /// </summary>
        /// <remarks>
        /// Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNameMessagesPostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue
        /// </summary>
        /// <remarks>
        /// Used for creating a new queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNamePostAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue
        /// </summary>
        /// <remarks>
        /// Used for creating a new queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNamePostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all messages from the named queue
        /// </summary>
        /// <remarks>
        /// Used to clear messages from a queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNamePurgePostAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all messages from the named queue
        /// </summary>
        /// <remarks>
        /// Used to clear messages from a queue.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNamePurgePostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing queue
        /// </summary>
        /// <remarks>
        /// Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNamePutAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing queue
        /// </summary>
        /// <remarks>
        /// Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueClientTargetQueueNamePutWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about all queues on the server.
        /// </summary>
        /// <remarks>
        /// Get information about all queues that this user can access.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> QueueGetAsync(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about all queues on the server.
        /// </summary>
        /// <remarks>
        /// Get information about all queues that this user can access.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> QueueGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueApi : IQueueApiSync, IQueueApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueueApi : IQueueApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueueApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QueueApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete all queues that this client owns. Delete all queues that this client owns, across all targets.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientDelete(string varClient, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientDeleteWithHttpInfo(varClient);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all queues that this client owns. Delete all queues that this client owns, across all targets.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientDeleteWithHttpInfo(string varClient, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/queue/{client}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all queues that this client owns. Delete all queues that this client owns, across all targets.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientDeleteAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientDeleteWithHttpInfoAsync(varClient, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all queues that this client owns. Delete all queues that this client owns, across all targets.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientDeleteWithHttpInfoAsync(string varClient, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/queue/{client}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all of the queues for a specific client, across all targets. Find the full details of all queues that this client owns, across all targets
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientGet(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientGetWithHttpInfo(varClient, from, to, includeStatistics);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all of the queues for a specific client, across all targets. Find the full details of all queues that this client owns, across all targets
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientGetWithHttpInfo(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/queue/{client}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all of the queues for a specific client, across all targets. Find the full details of all queues that this client owns, across all targets
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientGetAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientGetWithHttpInfoAsync(varClient, from, to, includeStatistics, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all of the queues for a specific client, across all targets. Find the full details of all queues that this client owns, across all targets
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientGetWithHttpInfoAsync(string varClient, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/queue/{client}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all of the queues within a specific target for the given client Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetDelete(string varClient, TargetEnum target, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetDeleteWithHttpInfo(varClient, target);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all of the queues within a specific target for the given client Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetDeleteWithHttpInfo(string varClient, TargetEnum target, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/queue/{client}/{target}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all of the queues within a specific target for the given client Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetDeleteAsync(string varClient, TargetEnum target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetDeleteWithHttpInfoAsync(varClient, target, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all of the queues within a specific target for the given client Delete all of the queues within a specific target for the given client
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetDeleteWithHttpInfoAsync(string varClient, TargetEnum target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/queue/{client}/{target}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all of the queues within a specific target for this client. Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetGet(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetGetWithHttpInfo(varClient, target, from, to, includeStatistics);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all of the queues within a specific target for this client. Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetGetWithHttpInfo(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/queue/{client}/{target}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details about all of the queues within a specific target for this client. Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetGetAsync(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetGetWithHttpInfoAsync(varClient, target, from, to, includeStatistics, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about all of the queues within a specific target for this client. Get details about all of the queues within a specific target for this client.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetGetWithHttpInfoAsync(string varClient, TargetEnum target, int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/queue/{client}/{target}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of messages from a given queue. If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNameAckPost(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNameAckPostWithHttpInfo(varClient, target, queueName, ackMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a set of messages from a given queue. If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNameAckPostWithHttpInfo(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameAckPost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameAckPost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameAckPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = ackMessage;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameAckPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/queue/{client}/{target}/{queueName}/ack", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameAckPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a set of messages from a given queue. If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameAckPostAsync(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNameAckPostWithHttpInfoAsync(varClient, target, queueName, ackMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a set of messages from a given queue. If the message was read with &#39;deleteAfterRead&#x3D;false&#39; then you must call this API to remove the message   from the queue after your code has successfully processed it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The client name for the queue</param>
        /// <param name="target">The target in which the queue is located</param>
        /// <param name="queueName">The name of queue which contains the message you want to acknowledge</param>
        /// <param name="ackMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNameAckPostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, List<AckMessage>? ackMessage = default(List<AckMessage>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameAckPost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameAckPost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameAckPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = ackMessage;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameAckPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/queue/{client}/{target}/{queueName}/ack", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameAckPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific named queue Delete a queue and all the messages within it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNameDelete(string varClient, TargetEnum target, string queueName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNameDeleteWithHttpInfo(varClient, target, queueName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific named queue Delete a queue and all the messages within it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNameDeleteWithHttpInfo(string varClient, TargetEnum target, string queueName, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameDelete");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameDelete");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific named queue Delete a queue and all the messages within it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameDeleteAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNameDeleteWithHttpInfoAsync(varClient, target, queueName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific named queue Delete a queue and all the messages within it
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of the queue that should be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNameDeleteWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameDelete");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameDelete");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameDelete");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets information about a specific named queue. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNameGet(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNameGetWithHttpInfo(varClient, target, queueName, includeStatistics);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a specific named queue. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNameGetWithHttpInfo(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameGet");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets information about a specific named queue. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameGetAsync(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNameGetWithHttpInfoAsync(varClient, target, queueName, includeStatistics, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a specific named queue. Information returned is filtered by user permissions.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="queueName">The name of queue that you want to get the information for.</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNameGetWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameGet");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets one or more messages from the queue Return a JSON array containing zero or more messages
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNameMessagesGet(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNameMessagesGetWithHttpInfo(varClient, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, varLock);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets one or more messages from the queue Return a JSON array containing zero or more messages
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNameMessagesGetWithHttpInfo(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameMessagesGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameMessagesGet");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameMessagesGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            if (numberOfMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "numberOfMessages", numberOfMessages));
            }
            if (maxWaitTimeInSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "maxWaitTimeInSeconds", maxWaitTimeInSeconds));
            }
            if (deleteAfterRead != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "deleteAfterRead", deleteAfterRead));
            }
            if (varLock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "lock", varLock));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameMessagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/queue/{client}/{target}/{queueName}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameMessagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets one or more messages from the queue Return a JSON array containing zero or more messages
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameMessagesGetAsync(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNameMessagesGetWithHttpInfoAsync(varClient, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, varLock, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets one or more messages from the queue Return a JSON array containing zero or more messages
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue to read messages from</param>
        /// <param name="numberOfMessages">The number of messages to read in this request. Default 1. If messages are bundled together then more   messages may be returned than requested. If deleteAfterRead is false then the maximum is 10, and you must call &#x60;POST   /queue/{client}/{target}/{queueName}/ack&#x60; on the current messages before any more will be available to read (optional)</param>
        /// <param name="maxWaitTimeInSeconds">If the queue currently contains fewer than the numberOfMessages requested, how long (in seconds)   should we wait for new messages to arrive? Default 0 (optional)</param>
        /// <param name="deleteAfterRead">Should the messages being read be automatically removed from the queue? Default true. If this is   false then the &#x60;POST /queue/{client}/{target}/{queueName}/ack&#x60; API must be called with the message details once the   data has been processed (optional)</param>
        /// <param name="varLock">If the queue is locked, you must provide the key in this parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNameMessagesGetWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, int? numberOfMessages = default(int?), int? maxWaitTimeInSeconds = default(int?), bool? deleteAfterRead = default(bool?), string? varLock = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameMessagesGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameMessagesGet");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameMessagesGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            if (numberOfMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "numberOfMessages", numberOfMessages));
            }
            if (maxWaitTimeInSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "maxWaitTimeInSeconds", maxWaitTimeInSeconds));
            }
            if (deleteAfterRead != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "deleteAfterRead", deleteAfterRead));
            }
            if (varLock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "lock", varLock));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameMessagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/queue/{client}/{target}/{queueName}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameMessagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a message to the named queue Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNameMessagesPost(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNameMessagesPostWithHttpInfo(varClient, target, queueName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a message to the named queue Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNameMessagesPostWithHttpInfo(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameMessagesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/queue/{client}/{target}/{queueName}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameMessagesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a message to the named queue Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNameMessagesPostAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNameMessagesPostWithHttpInfoAsync(varClient, target, queueName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a message to the named queue Used for posting messages to a queue. The data passed in the message is not validated in any way
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="body">The message that should be posted on to the queue.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNameMessagesPostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueClientTargetQueueNameMessagesPost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNameMessagesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/queue/{client}/{target}/{queueName}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNameMessagesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue Used for creating a new queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNamePost(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNamePostWithHttpInfo(varClient, target, queueName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue Used for creating a new queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNamePostWithHttpInfo(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue Used for creating a new queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNamePostAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNamePostWithHttpInfoAsync(varClient, target, queueName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new queue, passing a block of JSON that is associated with the queue Used for creating a new queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNamePostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNamePost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueClientTargetQueueNamePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all messages from the named queue Used to clear messages from a queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNamePurgePost(string varClient, TargetEnum target, string queueName, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNamePurgePostWithHttpInfo(varClient, target, queueName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all messages from the named queue Used to clear messages from a queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNamePurgePostWithHttpInfo(string varClient, TargetEnum target, string queueName, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNamePurgePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNamePurgePost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNamePurgePost");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNamePurgePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/queue/{client}/{target}/{queueName}/purge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNamePurgePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all messages from the named queue Used to clear messages from a queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNamePurgePostAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNamePurgePostWithHttpInfoAsync(varClient, target, queueName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all messages from the named queue Used to clear messages from a queue.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">Client name</param>
        /// <param name="target">Target - the target of where the queue is stored.</param>
        /// <param name="queueName">The name of the queue that the message will be posted to..</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNamePurgePostWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNamePurgePost");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNamePurgePost");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNamePurgePost");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNamePurgePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/queue/{client}/{target}/{queueName}/purge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNamePurgePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing queue Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueClientTargetQueueNamePut(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueClientTargetQueueNamePutWithHttpInfo(varClient, target, queueName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing queue Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueClientTargetQueueNamePutWithHttpInfo(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0)
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing queue Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueClientTargetQueueNamePutAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueClientTargetQueueNamePutWithHttpInfoAsync(varClient, target, queueName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing queue Edit the block of JSON that is associated with the queue. This is only permitted if the queue is empty   (has zero messages)
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClient">The name of the client.</param>
        /// <param name="target">Target - is what the queue will be tagged with.</param>
        /// <param name="queueName">The name of the queue that should be created.</param>
        /// <param name="body">A block of JSON that contains information about the contents of the messages in the queue</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueClientTargetQueueNamePutWithHttpInfoAsync(string varClient, TargetEnum target, string queueName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            // verify the required parameter 'queueName' is set
            if (queueName == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'queueName' when calling QueueApi->QueueClientTargetQueueNamePut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'body' when calling QueueApi->QueueClientTargetQueueNamePut");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueName", Alterian.JO.Client.ClientUtils.ParameterToString(queueName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueueApi.QueueClientTargetQueueNamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/queue/{client}/{target}/{queueName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueClientTargetQueueNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all queues on the server. Get information about all queues that this user can access.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse QueueGet(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = QueueGetWithHttpInfo(from, to, includeStatistics);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all queues on the server. Get information about all queues that this user can access.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<ApiResponse> QueueGetWithHttpInfo(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0)
        {
            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponse>("/queue", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all queues on the server. Get information about all queues that this user can access.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> QueueGetAsync(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<ApiResponse> localVarResponse = await QueueGetWithHttpInfoAsync(from, to, includeStatistics, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all queues on the server. Get information about all queues that this user can access.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The zero-based index of the first item to return. (optional)</param>
        /// <param name="to">The zero-based index of the last item to return. (optional)</param>
        /// <param name="includeStatistics">Should the results include the execution statistics for each rule? Default true (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<ApiResponse>> QueueGetWithHttpInfoAsync(int? from = default(int?), int? to = default(int?), bool? includeStatistics = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (includeStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "includeStatistics", includeStatistics));
            }

            localVarRequestOptions.Operation = "QueueApi.QueueGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponse>("/queue", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

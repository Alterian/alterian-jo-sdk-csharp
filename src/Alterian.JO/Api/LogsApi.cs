/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JO.Client;
using Alterian.JO.Model;

namespace Alterian.JO.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search across logs for this client and target
        /// </summary>
        /// <remarks>
        /// Provide a search string to search for
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogsApiResponse</returns>
        LogsApiResponse LogsTypeTargetClientGet(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Search across logs for this client and target
        /// </summary>
        /// <remarks>
        /// Provide a search string to search for
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogsApiResponse</returns>
        ApiResponse<LogsApiResponse> LogsTypeTargetClientGetWithHttpInfo(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get logs that have been recorded for this rule
        /// </summary>
        /// <remarks>
        /// If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogsApiResponse</returns>
        LogsApiResponse LogsTypeTargetClientRulenameGet(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get logs that have been recorded for this rule
        /// </summary>
        /// <remarks>
        /// If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogsApiResponse</returns>
        ApiResponse<LogsApiResponse> LogsTypeTargetClientRulenameGetWithHttpInfo(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search across logs for this client and target
        /// </summary>
        /// <remarks>
        /// Provide a search string to search for
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogsApiResponse</returns>
        System.Threading.Tasks.Task<LogsApiResponse> LogsTypeTargetClientGetAsync(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search across logs for this client and target
        /// </summary>
        /// <remarks>
        /// Provide a search string to search for
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogsApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogsApiResponse>> LogsTypeTargetClientGetWithHttpInfoAsync(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get logs that have been recorded for this rule
        /// </summary>
        /// <remarks>
        /// If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogsApiResponse</returns>
        System.Threading.Tasks.Task<LogsApiResponse> LogsTypeTargetClientRulenameGetAsync(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get logs that have been recorded for this rule
        /// </summary>
        /// <remarks>
        /// If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </remarks>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogsApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogsApiResponse>> LogsTypeTargetClientRulenameGetWithHttpInfoAsync(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogsApi : ILogsApiSync, ILogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogsApi : ILogsApi
    {
        private Alterian.JO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogsApi(string basePath)
        {
            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                new Alterian.JO.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogsApi(Alterian.JO.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JO.Client.Configuration.MergeConfigurations(
                Alterian.JO.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JO.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LogsApi(Alterian.JO.Client.ISynchronousClient client, Alterian.JO.Client.IAsynchronousClient asyncClient, Alterian.JO.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JO.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JO.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JO.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JO.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search across logs for this client and target Provide a search string to search for
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogsApiResponse</returns>
        public LogsApiResponse LogsTypeTargetClientGet(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<LogsApiResponse> localVarResponse = LogsTypeTargetClientGetWithHttpInfo(type, target, varClient, searchPhrase, sequenceNumber, templateUrl, limit, source, csv, startdate, enddate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search across logs for this client and target Provide a search string to search for
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogsApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<LogsApiResponse> LogsTypeTargetClientGetWithHttpInfo(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'type' when calling LogsApi->LogsTypeTargetClientGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling LogsApi->LogsTypeTargetClientGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling LogsApi->LogsTypeTargetClientGet");
            }

            // verify the required parameter 'searchPhrase' is set
            if (searchPhrase == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'searchPhrase' when calling LogsApi->LogsTypeTargetClientGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", Alterian.JO.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchPhrase", searchPhrase));
            if (sequenceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sequenceNumber", sequenceNumber));
            }
            if (templateUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateUrl", templateUrl));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (csv != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "csv", csv));
            }
            if (startdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "startdate", startdate));
            }
            if (enddate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "enddate", enddate));
            }

            localVarRequestOptions.Operation = "LogsApi.LogsTypeTargetClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LogsApiResponse>("/logs/{type}/{target}/{client}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogsTypeTargetClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search across logs for this client and target Provide a search string to search for
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogsApiResponse</returns>
        public async System.Threading.Tasks.Task<LogsApiResponse> LogsTypeTargetClientGetAsync(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<LogsApiResponse> localVarResponse = await LogsTypeTargetClientGetWithHttpInfoAsync(type, target, varClient, searchPhrase, sequenceNumber, templateUrl, limit, source, csv, startdate, enddate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search across logs for this client and target Provide a search string to search for
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogsApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<LogsApiResponse>> LogsTypeTargetClientGetWithHttpInfoAsync(LogType type, TargetEnum target, string varClient, string searchPhrase, string? sequenceNumber = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'type' when calling LogsApi->LogsTypeTargetClientGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling LogsApi->LogsTypeTargetClientGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling LogsApi->LogsTypeTargetClientGet");
            }

            // verify the required parameter 'searchPhrase' is set
            if (searchPhrase == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'searchPhrase' when calling LogsApi->LogsTypeTargetClientGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", Alterian.JO.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchPhrase", searchPhrase));
            if (sequenceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sequenceNumber", sequenceNumber));
            }
            if (templateUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateUrl", templateUrl));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (csv != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "csv", csv));
            }
            if (startdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "startdate", startdate));
            }
            if (enddate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "enddate", enddate));
            }

            localVarRequestOptions.Operation = "LogsApi.LogsTypeTargetClientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LogsApiResponse>("/logs/{type}/{target}/{client}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogsTypeTargetClientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get logs that have been recorded for this rule If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogsApiResponse</returns>
        public LogsApiResponse LogsTypeTargetClientRulenameGet(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0)
        {
            Alterian.JO.Client.ApiResponse<LogsApiResponse> localVarResponse = LogsTypeTargetClientRulenameGetWithHttpInfo(type, target, varClient, rulename, searchPhrase, searchQuery, sequenceNumber, tileName, tileId, templateUrl, limit, source, csv, startdate, enddate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs that have been recorded for this rule If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogsApiResponse</returns>
        public Alterian.JO.Client.ApiResponse<LogsApiResponse> LogsTypeTargetClientRulenameGetWithHttpInfo(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'type' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", Alterian.JO.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (searchPhrase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchPhrase", searchPhrase));
            }
            if (searchQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchQuery", searchQuery));
            }
            if (sequenceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sequenceNumber", sequenceNumber));
            }
            if (tileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "tileName", tileName));
            }
            if (tileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "tileId", tileId));
            }
            if (templateUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateUrl", templateUrl));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (csv != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "csv", csv));
            }
            if (startdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "startdate", startdate));
            }
            if (enddate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "enddate", enddate));
            }

            localVarRequestOptions.Operation = "LogsApi.LogsTypeTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LogsApiResponse>("/logs/{type}/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogsTypeTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get logs that have been recorded for this rule If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogsApiResponse</returns>
        public async System.Threading.Tasks.Task<LogsApiResponse> LogsTypeTargetClientRulenameGetAsync(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JO.Client.ApiResponse<LogsApiResponse> localVarResponse = await LogsTypeTargetClientRulenameGetWithHttpInfoAsync(type, target, varClient, rulename, searchPhrase, searchQuery, sequenceNumber, tileName, tileId, templateUrl, limit, source, csv, startdate, enddate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs that have been recorded for this rule If you haven&#39;t invoked the rule since you started logging then the writetolog list will always be empty.
        /// </summary>
        /// <exception cref="Alterian.JO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">What kind of logging do you want to see?</param>
        /// <param name="target">Target - is where rule is published.</param>
        /// <param name="varClient">Client name</param>
        /// <param name="rulename">Rule name</param>
        /// <param name="searchPhrase">The phrase to search for in the logs (optional)</param>
        /// <param name="searchQuery">Lucene query string to apply (optional)</param>
        /// <param name="sequenceNumber">Sequence Number to identify rule invoke logs (optional)</param>
        /// <param name="tileName">The name of the tile, if you want to filter your request by tile name (optional)</param>
        /// <param name="tileId">The id of the tile, if you want to filter your request by tile id (optional)</param>
        /// <param name="templateUrl">Template url, if you want to filter your request by template url (optional)</param>
        /// <param name="limit">The maximum number of items to return. (optional)</param>
        /// <param name="source">Pick the source of the logs. Currently only elastic search is supported (optional)</param>
        /// <param name="csv">if true then returns csv file (optional)</param>
        /// <param name="startdate">If you want to filter your request by date range, this is the starting date for the time period,   please provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="enddate">If you want to filter your request by date range, this is the ending date for the time period, please   provide in ISO-8601 (YYYY-MM-DDThh:mm:ssZ)  All times are UTC. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogsApiResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JO.Client.ApiResponse<LogsApiResponse>> LogsTypeTargetClientRulenameGetWithHttpInfoAsync(LogTypeOrTimeseries type, TargetEnum target, string varClient, string rulename, string? searchPhrase = default(string?), string? searchQuery = default(string?), string? sequenceNumber = default(string?), string? tileName = default(string?), string? tileId = default(string?), string? templateUrl = default(string?), int? limit = default(int?), LogSource? source = default(LogSource?), bool? csv = default(bool?), DateTime? startdate = default(DateTime?), DateTime? enddate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'type' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'target' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            // verify the required parameter 'varClient' is set
            if (varClient == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'varClient' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }

            // verify the required parameter 'rulename' is set
            if (rulename == null)
            {
                throw new Alterian.JO.Client.ApiException(400, "Missing required parameter 'rulename' when calling LogsApi->LogsTypeTargetClientRulenameGet");
            }


            Alterian.JO.Client.RequestOptions localVarRequestOptions = new Alterian.JO.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = Alterian.JO.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JO.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", Alterian.JO.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Alterian.JO.Client.ClientUtils.ParameterToString(target)); // path parameter
            localVarRequestOptions.PathParameters.Add("client", Alterian.JO.Client.ClientUtils.ParameterToString(varClient)); // path parameter
            localVarRequestOptions.PathParameters.Add("rulename", Alterian.JO.Client.ClientUtils.ParameterToString(rulename)); // path parameter
            if (searchPhrase != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchPhrase", searchPhrase));
            }
            if (searchQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "searchQuery", searchQuery));
            }
            if (sequenceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "sequenceNumber", sequenceNumber));
            }
            if (tileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "tileName", tileName));
            }
            if (tileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "tileId", tileId));
            }
            if (templateUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "templateUrl", templateUrl));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (csv != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "csv", csv));
            }
            if (startdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "startdate", startdate));
            }
            if (enddate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JO.Client.ClientUtils.ParameterToMultiMap("", "enddate", enddate));
            }

            localVarRequestOptions.Operation = "LogsApi.LogsTypeTargetClientRulenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LogsApiResponse>("/logs/{type}/{target}/{client}/{rulename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogsTypeTargetClientRulenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

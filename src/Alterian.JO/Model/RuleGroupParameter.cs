/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// RuleGroupParameter
    /// </summary>
    [DataContract(Name = "ruleGroupParameter")]
    public partial class RuleGroupParameter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleGroupParameter" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="usingGlobal">usingGlobal.</param>
        /// <param name="isEditable">isEditable.</param>
        /// <param name="description">description.</param>
        /// <param name="position">position.</param>
        /// <param name="referencedProperty">referencedProperty.</param>
        /// <param name="referencedRule">referencedRule.</param>
        /// <param name="propertyType">propertyType.</param>
        /// <param name="units">units.</param>
        /// <param name="globalParam">globalParam.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="isVisible">isVisible.</param>
        /// <param name="templatename">templatename.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="targets">targets.</param>
        /// <param name="pickListItems">pickListItems.</param>
        /// <param name="iconAndColor">iconAndColor.</param>
        /// <param name="templateId">templateId.</param>
        public RuleGroupParameter(string name = default(string), string usingGlobal = default(string), bool isEditable = default(bool), string description = default(string), int position = default(int), string referencedProperty = default(string), string referencedRule = default(string), string propertyType = default(string), string units = default(string), string globalParam = default(string), RuleGroupParameterDefaultValue defaultValue = default(RuleGroupParameterDefaultValue), bool isVisible = default(bool), string templatename = default(string), string dataType = default(string), List<TargetValue> targets = default(List<TargetValue>), List<PickListItem> pickListItems = default(List<PickListItem>), Icon iconAndColor = default(Icon), string templateId = default(string))
        {
            this.Name = name;
            this.UsingGlobal = usingGlobal;
            this.IsEditable = isEditable;
            this.Description = description;
            this.Position = position;
            this.ReferencedProperty = referencedProperty;
            this.ReferencedRule = referencedRule;
            this.PropertyType = propertyType;
            this.Units = units;
            this.GlobalParam = globalParam;
            this.DefaultValue = defaultValue;
            this.IsVisible = isVisible;
            this.Templatename = templatename;
            this.DataType = dataType;
            this.Targets = targets;
            this.PickListItems = pickListItems;
            this.IconAndColor = iconAndColor;
            this.TemplateId = templateId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UsingGlobal
        /// </summary>
        [DataMember(Name = "usingGlobal", EmitDefaultValue = false)]
        public string UsingGlobal { get; set; }

        /// <summary>
        /// Gets or Sets IsEditable
        /// </summary>
        [DataMember(Name = "IsEditable", EmitDefaultValue = true)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "Position", EmitDefaultValue = false)]
        public int Position { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedProperty
        /// </summary>
        [DataMember(Name = "ReferencedProperty", EmitDefaultValue = false)]
        public string ReferencedProperty { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedRule
        /// </summary>
        [DataMember(Name = "ReferencedRule", EmitDefaultValue = false)]
        public string ReferencedRule { get; set; }

        /// <summary>
        /// Gets or Sets PropertyType
        /// </summary>
        [DataMember(Name = "PropertyType", EmitDefaultValue = false)]
        public string PropertyType { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "Units", EmitDefaultValue = false)]
        public string Units { get; set; }

        /// <summary>
        /// Gets or Sets GlobalParam
        /// </summary>
        [DataMember(Name = "globalParam", EmitDefaultValue = false)]
        public string GlobalParam { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "DefaultValue", EmitDefaultValue = false)]
        public RuleGroupParameterDefaultValue DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [DataMember(Name = "IsVisible", EmitDefaultValue = true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// Gets or Sets Templatename
        /// </summary>
        [DataMember(Name = "Templatename", EmitDefaultValue = false)]
        public string Templatename { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "DataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "Targets", EmitDefaultValue = false)]
        public List<TargetValue> Targets { get; set; }

        /// <summary>
        /// Gets or Sets PickListItems
        /// </summary>
        [DataMember(Name = "PickListItems", EmitDefaultValue = false)]
        public List<PickListItem> PickListItems { get; set; }

        /// <summary>
        /// Gets or Sets IconAndColor
        /// </summary>
        [DataMember(Name = "IconAndColor", EmitDefaultValue = false)]
        public Icon IconAndColor { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "TemplateId", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleGroupParameter {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UsingGlobal: ").Append(UsingGlobal).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReferencedProperty: ").Append(ReferencedProperty).Append("\n");
            sb.Append("  ReferencedRule: ").Append(ReferencedRule).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  GlobalParam: ").Append(GlobalParam).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Templatename: ").Append(Templatename).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  PickListItems: ").Append(PickListItems).Append("\n");
            sb.Append("  IconAndColor: ").Append(IconAndColor).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// RuleComplexityReport
    /// </summary>
    [DataContract(Name = "RuleComplexityReport")]
    public partial class RuleComplexityReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleComplexityReport" /> class.
        /// </summary>
        /// <param name="numberOfRules">numberOfRules.</param>
        /// <param name="createFutureEventSteps">createFutureEventSteps.</param>
        /// <param name="processFutureEventSteps">processFutureEventSteps.</param>
        /// <param name="maxHopCount">maxHopCount.</param>
        /// <param name="minHopCount">minHopCount.</param>
        /// <param name="averageHopCount">averageHopCount.</param>
        /// <param name="minActiveCount">minActiveCount.</param>
        /// <param name="maxActiveCount">maxActiveCount.</param>
        /// <param name="averageActiveCount">averageActiveCount.</param>
        /// <param name="minStepCount">minStepCount.</param>
        /// <param name="maxStepCount">maxStepCount.</param>
        /// <param name="averageStepCount">averageStepCount.</param>
        /// <param name="cacheReadWriteRatio">cacheReadWriteRatio.</param>
        public RuleComplexityReport(int numberOfRules = default(int), int createFutureEventSteps = default(int), int processFutureEventSteps = default(int), int maxHopCount = default(int), int minHopCount = default(int), decimal averageHopCount = default(decimal), int minActiveCount = default(int), decimal maxActiveCount = default(decimal), int averageActiveCount = default(int), int minStepCount = default(int), int maxStepCount = default(int), decimal averageStepCount = default(decimal), decimal cacheReadWriteRatio = default(decimal))
        {
            this.NumberOfRules = numberOfRules;
            this.CreateFutureEventSteps = createFutureEventSteps;
            this.ProcessFutureEventSteps = processFutureEventSteps;
            this.MaxHopCount = maxHopCount;
            this.MinHopCount = minHopCount;
            this.AverageHopCount = averageHopCount;
            this.MinActiveCount = minActiveCount;
            this.MaxActiveCount = maxActiveCount;
            this.AverageActiveCount = averageActiveCount;
            this.MinStepCount = minStepCount;
            this.MaxStepCount = maxStepCount;
            this.AverageStepCount = averageStepCount;
            this.CacheReadWriteRatio = cacheReadWriteRatio;
        }

        /// <summary>
        /// Gets or Sets NumberOfRules
        /// </summary>
        [DataMember(Name = "numberOfRules", EmitDefaultValue = false)]
        public int NumberOfRules { get; set; }

        /// <summary>
        /// Gets or Sets CreateFutureEventSteps
        /// </summary>
        [DataMember(Name = "createFutureEventSteps", EmitDefaultValue = false)]
        public int CreateFutureEventSteps { get; set; }

        /// <summary>
        /// Gets or Sets ProcessFutureEventSteps
        /// </summary>
        [DataMember(Name = "processFutureEventSteps", EmitDefaultValue = false)]
        public int ProcessFutureEventSteps { get; set; }

        /// <summary>
        /// Gets or Sets MaxHopCount
        /// </summary>
        [DataMember(Name = "maxHopCount", EmitDefaultValue = false)]
        public int MaxHopCount { get; set; }

        /// <summary>
        /// Gets or Sets MinHopCount
        /// </summary>
        [DataMember(Name = "minHopCount", EmitDefaultValue = false)]
        public int MinHopCount { get; set; }

        /// <summary>
        /// Gets or Sets AverageHopCount
        /// </summary>
        [DataMember(Name = "averageHopCount", EmitDefaultValue = false)]
        public decimal AverageHopCount { get; set; }

        /// <summary>
        /// Gets or Sets MinActiveCount
        /// </summary>
        [DataMember(Name = "minActiveCount", EmitDefaultValue = false)]
        public int MinActiveCount { get; set; }

        /// <summary>
        /// Gets or Sets MaxActiveCount
        /// </summary>
        [DataMember(Name = "maxActiveCount", EmitDefaultValue = false)]
        public decimal MaxActiveCount { get; set; }

        /// <summary>
        /// Gets or Sets AverageActiveCount
        /// </summary>
        [DataMember(Name = "averageActiveCount", EmitDefaultValue = false)]
        public int AverageActiveCount { get; set; }

        /// <summary>
        /// Gets or Sets MinStepCount
        /// </summary>
        [DataMember(Name = "minStepCount", EmitDefaultValue = false)]
        public int MinStepCount { get; set; }

        /// <summary>
        /// Gets or Sets MaxStepCount
        /// </summary>
        [DataMember(Name = "maxStepCount", EmitDefaultValue = false)]
        public int MaxStepCount { get; set; }

        /// <summary>
        /// Gets or Sets AverageStepCount
        /// </summary>
        [DataMember(Name = "averageStepCount", EmitDefaultValue = false)]
        public decimal AverageStepCount { get; set; }

        /// <summary>
        /// Gets or Sets CacheReadWriteRatio
        /// </summary>
        [DataMember(Name = "cacheReadWriteRatio", EmitDefaultValue = false)]
        public decimal CacheReadWriteRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleComplexityReport {\n");
            sb.Append("  NumberOfRules: ").Append(NumberOfRules).Append("\n");
            sb.Append("  CreateFutureEventSteps: ").Append(CreateFutureEventSteps).Append("\n");
            sb.Append("  ProcessFutureEventSteps: ").Append(ProcessFutureEventSteps).Append("\n");
            sb.Append("  MaxHopCount: ").Append(MaxHopCount).Append("\n");
            sb.Append("  MinHopCount: ").Append(MinHopCount).Append("\n");
            sb.Append("  AverageHopCount: ").Append(AverageHopCount).Append("\n");
            sb.Append("  MinActiveCount: ").Append(MinActiveCount).Append("\n");
            sb.Append("  MaxActiveCount: ").Append(MaxActiveCount).Append("\n");
            sb.Append("  AverageActiveCount: ").Append(AverageActiveCount).Append("\n");
            sb.Append("  MinStepCount: ").Append(MinStepCount).Append("\n");
            sb.Append("  MaxStepCount: ").Append(MaxStepCount).Append("\n");
            sb.Append("  AverageStepCount: ").Append(AverageStepCount).Append("\n");
            sb.Append("  CacheReadWriteRatio: ").Append(CacheReadWriteRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

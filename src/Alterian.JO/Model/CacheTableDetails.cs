/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// CacheTableDetails
    /// </summary>
    [DataContract(Name = "CacheTableDetails")]
    public partial class CacheTableDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TableTypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CacheTableDetails" /> class.
        /// </summary>
        /// <param name="fields">fields.</param>
        /// <param name="key">key.</param>
        /// <param name="keys">keys.</param>
        /// <param name="name">name.</param>
        /// <param name="defaultTTL">defaultTTL.</param>
        /// <param name="size">size.</param>
        /// <param name="type">type.</param>
        public CacheTableDetails(List<CacheField> fields = default(List<CacheField>), string key = default(string), List<string> keys = default(List<string>), string name = default(string), int defaultTTL = default(int), int size = default(int), TableTypeEnum? type = default(TableTypeEnum?))
        {
            this.Fields = fields;
            this.Key = key;
            this.Keys = keys;
            this.Name = name;
            this.DefaultTTL = defaultTTL;
            this.Size = size;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<CacheField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Keys
        /// </summary>
        [DataMember(Name = "keys", EmitDefaultValue = false)]
        public List<string> Keys { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTTL
        /// </summary>
        [DataMember(Name = "defaultTTL", EmitDefaultValue = false)]
        public int DefaultTTL { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CacheTableDetails {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DefaultTTL: ").Append(DefaultTTL).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

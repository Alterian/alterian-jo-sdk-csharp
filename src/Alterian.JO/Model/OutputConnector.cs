/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// OutputConnector
    /// </summary>
    [DataContract(Name = "outputConnector")]
    public partial class OutputConnector : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputConnector" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="active">active.</param>
        /// <param name="disabled">disabled.</param>
        /// <param name="fields">fields.</param>
        /// <param name="realtimeOutputSteps">realtimeOutputSteps.</param>
        /// <param name="connectedInputs">connectedInputs.</param>
        public OutputConnector(string name = default(string), bool active = default(bool), bool disabled = default(bool), List<OutputField> fields = default(List<OutputField>), List<OutputConnectorRealtimeOutputStepsInner> realtimeOutputSteps = default(List<OutputConnectorRealtimeOutputStepsInner>), List<string> connectedInputs = default(List<string>))
        {
            this.Name = name;
            this.Active = active;
            this.Disabled = disabled;
            this.Fields = fields;
            this.RealtimeOutputSteps = realtimeOutputSteps;
            this.ConnectedInputs = connectedInputs;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<OutputField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets RealtimeOutputSteps
        /// </summary>
        [DataMember(Name = "realtimeOutputSteps", EmitDefaultValue = false)]
        public List<OutputConnectorRealtimeOutputStepsInner> RealtimeOutputSteps { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedInputs
        /// </summary>
        [DataMember(Name = "connectedInputs", EmitDefaultValue = false)]
        public List<string> ConnectedInputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputConnector {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  RealtimeOutputSteps: ").Append(RealtimeOutputSteps).Append("\n");
            sb.Append("  ConnectedInputs: ").Append(ConnectedInputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

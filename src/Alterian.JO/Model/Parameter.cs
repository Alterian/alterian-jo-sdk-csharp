/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// Parameter
    /// </summary>
    [DataContract(Name = "varParameter")]
    public partial class Parameter : IValidatableObject
    {
        /// <summary>
        /// The data type
        /// </summary>
        /// <value>The data type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum Picklist for value: picklist
            /// </summary>
            [EnumMember(Value = "picklist")]
            Picklist = 4,

            /// <summary>
            /// Enum Orderedlist for value: orderedlist
            /// </summary>
            [EnumMember(Value = "orderedlist")]
            Orderedlist = 5
        }


        /// <summary>
        /// The data type
        /// </summary>
        /// <value>The data type</value>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Parameter" /> class.
        /// </summary>
        /// <param name="businessGoal">businessGoal.</param>
        /// <param name="varClient">Client name.</param>
        /// <param name="dataType">The data type.</param>
        /// <param name="description">Description of the global parameter.</param>
        /// <param name="globalParam">globalParam.</param>
        /// <param name="isConfidential">Value is masked, e.g. for passwords/keys characters (true/false).</param>
        /// <param name="isEditable">Values can be edited by users without GLOBALPARAMETER_CAN_CONFIGURE permission characters (true/false).</param>
        /// <param name="isForcedValue">Rule parameter values will be overridden characters (true/false).</param>
        /// <param name="isVisible">Should display characters (true/false).</param>
        /// <param name="name">Global param name.</param>
        /// <param name="picklistItems">Array of items to select from.</param>
        /// <param name="requiresAdmin">requiresAdmin.</param>
        /// <param name="targets">Each target/value.</param>
        /// <param name="units">units.</param>
        /// <param name="url">url.</param>
        public Parameter(string businessGoal = default(string), string varClient = default(string), DataTypeEnum? dataType = default(DataTypeEnum?), string description = default(string), bool globalParam = default(bool), bool isConfidential = default(bool), bool isEditable = default(bool), bool isForcedValue = default(bool), bool isVisible = default(bool), string name = default(string), List<PickListItem> picklistItems = default(List<PickListItem>), bool requiresAdmin = default(bool), List<TargetValue> targets = default(List<TargetValue>), string units = default(string), string url = default(string))
        {
            this.BusinessGoal = businessGoal;
            this.VarClient = varClient;
            this.DataType = dataType;
            this.Description = description;
            this.GlobalParam = globalParam;
            this.IsConfidential = isConfidential;
            this.IsEditable = isEditable;
            this.IsForcedValue = isForcedValue;
            this.IsVisible = isVisible;
            this.Name = name;
            this.PicklistItems = picklistItems;
            this.RequiresAdmin = requiresAdmin;
            this.Targets = targets;
            this.Units = units;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets BusinessGoal
        /// </summary>
        [DataMember(Name = "businessGoal", EmitDefaultValue = false)]
        public string BusinessGoal { get; set; }

        /// <summary>
        /// Client name
        /// </summary>
        /// <value>Client name</value>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public string VarClient { get; set; }

        /// <summary>
        /// Description of the global parameter
        /// </summary>
        /// <value>Description of the global parameter</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets GlobalParam
        /// </summary>
        [DataMember(Name = "globalParam", EmitDefaultValue = true)]
        public bool GlobalParam { get; set; }

        /// <summary>
        /// Value is masked, e.g. for passwords/keys characters (true/false)
        /// </summary>
        /// <value>Value is masked, e.g. for passwords/keys characters (true/false)</value>
        [DataMember(Name = "isConfidential", EmitDefaultValue = true)]
        public bool IsConfidential { get; set; }

        /// <summary>
        /// Values can be edited by users without GLOBALPARAMETER_CAN_CONFIGURE permission characters (true/false)
        /// </summary>
        /// <value>Values can be edited by users without GLOBALPARAMETER_CAN_CONFIGURE permission characters (true/false)</value>
        [DataMember(Name = "isEditable", EmitDefaultValue = true)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// Rule parameter values will be overridden characters (true/false)
        /// </summary>
        /// <value>Rule parameter values will be overridden characters (true/false)</value>
        [DataMember(Name = "isForcedValue", EmitDefaultValue = true)]
        public bool IsForcedValue { get; set; }

        /// <summary>
        /// Should display characters (true/false)
        /// </summary>
        /// <value>Should display characters (true/false)</value>
        [DataMember(Name = "isVisible", EmitDefaultValue = true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// Global param name
        /// </summary>
        /// <value>Global param name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Array of items to select from
        /// </summary>
        /// <value>Array of items to select from</value>
        [DataMember(Name = "picklistItems", EmitDefaultValue = false)]
        public List<PickListItem> PicklistItems { get; set; }

        /// <summary>
        /// Gets or Sets RequiresAdmin
        /// </summary>
        [DataMember(Name = "requiresAdmin", EmitDefaultValue = true)]
        public bool RequiresAdmin { get; set; }

        /// <summary>
        /// Each target/value
        /// </summary>
        /// <value>Each target/value</value>
        [DataMember(Name = "targets", EmitDefaultValue = false)]
        public List<TargetValue> Targets { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", EmitDefaultValue = false)]
        public string Units { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Parameter {\n");
            sb.Append("  BusinessGoal: ").Append(BusinessGoal).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GlobalParam: ").Append(GlobalParam).Append("\n");
            sb.Append("  IsConfidential: ").Append(IsConfidential).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  IsForcedValue: ").Append(IsForcedValue).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PicklistItems: ").Append(PicklistItems).Append("\n");
            sb.Append("  RequiresAdmin: ").Append(RequiresAdmin).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

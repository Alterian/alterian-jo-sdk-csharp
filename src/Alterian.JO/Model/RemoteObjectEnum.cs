/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// Type of remote object
    /// </summary>
    /// <value>Type of remote object</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RemoteObjectEnum
    {
        /// <summary>
        /// Enum Client for value: client
        /// </summary>
        [EnumMember(Value = "client")]
        Client = 1,

        /// <summary>
        /// Enum Rule for value: rule
        /// </summary>
        [EnumMember(Value = "rule")]
        Rule = 2,

        /// <summary>
        /// Enum Template for value: template
        /// </summary>
        [EnumMember(Value = "template")]
        Template = 3,

        /// <summary>
        /// Enum Journey for value: journey
        /// </summary>
        [EnumMember(Value = "journey")]
        Journey = 4,

        /// <summary>
        /// Enum Queue for value: queue
        /// </summary>
        [EnumMember(Value = "queue")]
        Queue = 5,

        /// <summary>
        /// Enum License for value: license
        /// </summary>
        [EnumMember(Value = "license")]
        License = 6,

        /// <summary>
        /// Enum Recording for value: recording
        /// </summary>
        [EnumMember(Value = "recording")]
        Recording = 7,

        /// <summary>
        /// Enum TestData for value: test data
        /// </summary>
        [EnumMember(Value = "test data")]
        TestData = 8,

        /// <summary>
        /// Enum Role for value: role
        /// </summary>
        [EnumMember(Value = "role")]
        Role = 9,

        /// <summary>
        /// Enum User for value: user
        /// </summary>
        [EnumMember(Value = "user")]
        User = 10,

        /// <summary>
        /// Enum Site for value: site
        /// </summary>
        [EnumMember(Value = "site")]
        Site = 11
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// CacheColumn
    /// </summary>
    [DataContract(Name = "CacheColumn")]
    public partial class CacheColumn : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public CacheTableDirectionEnum? Direction { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public CacheFieldType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CacheColumn" /> class.
        /// </summary>
        /// <param name="direction">direction.</param>
        /// <param name="isClusteringColumn">Is this field something that the data is physically clustered on? (default to false).</param>
        /// <param name="isPartitionKey">Is this field part of the partition key? (default to false).</param>
        /// <param name="name">The name of the field.</param>
        /// <param name="type">type.</param>
        public CacheColumn(CacheTableDirectionEnum? direction = default(CacheTableDirectionEnum?), bool isClusteringColumn = false, bool isPartitionKey = false, string name = default(string), CacheFieldType? type = default(CacheFieldType?))
        {
            this.Direction = direction;
            this.IsClusteringColumn = isClusteringColumn;
            this.IsPartitionKey = isPartitionKey;
            this.Name = name;
            this.Type = type;
        }

        /// <summary>
        /// Is this field something that the data is physically clustered on?
        /// </summary>
        /// <value>Is this field something that the data is physically clustered on?</value>
        [DataMember(Name = "isClusteringColumn", EmitDefaultValue = true)]
        public bool IsClusteringColumn { get; set; }

        /// <summary>
        /// Is this field part of the partition key?
        /// </summary>
        /// <value>Is this field part of the partition key?</value>
        [DataMember(Name = "isPartitionKey", EmitDefaultValue = true)]
        public bool IsPartitionKey { get; set; }

        /// <summary>
        /// The name of the field
        /// </summary>
        /// <value>The name of the field</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CacheColumn {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  IsClusteringColumn: ").Append(IsClusteringColumn).Append("\n");
            sb.Append("  IsPartitionKey: ").Append(IsPartitionKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// ConsistencyReport
    /// </summary>
    [DataContract(Name = "ConsistencyReport")]
    public partial class ConsistencyReport : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name = "objectType", EmitDefaultValue = false)]
        public RemoteObjectEnum? ObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsistencyReport" /> class.
        /// </summary>
        /// <param name="objectType">objectType.</param>
        /// <param name="isConsistent">isConsistent.</param>
        /// <param name="localCount">localCount.</param>
        /// <param name="remoteCount">remoteCount.</param>
        /// <param name="missingRemotely">missingRemotely.</param>
        /// <param name="missingLocally">missingLocally.</param>
        /// <param name="differentLocally">differentLocally.</param>
        /// <param name="reportedExceptions">reportedExceptions.</param>
        public ConsistencyReport(RemoteObjectEnum? objectType = default(RemoteObjectEnum?), bool isConsistent = default(bool), int localCount = default(int), int remoteCount = default(int), List<string> missingRemotely = default(List<string>), List<string> missingLocally = default(List<string>), List<string> differentLocally = default(List<string>), List<string> reportedExceptions = default(List<string>))
        {
            this.ObjectType = objectType;
            this.IsConsistent = isConsistent;
            this.LocalCount = localCount;
            this.RemoteCount = remoteCount;
            this.MissingRemotely = missingRemotely;
            this.MissingLocally = missingLocally;
            this.DifferentLocally = differentLocally;
            this.ReportedExceptions = reportedExceptions;
        }

        /// <summary>
        /// Gets or Sets IsConsistent
        /// </summary>
        [DataMember(Name = "isConsistent", EmitDefaultValue = true)]
        public bool IsConsistent { get; set; }

        /// <summary>
        /// Gets or Sets LocalCount
        /// </summary>
        [DataMember(Name = "localCount", EmitDefaultValue = false)]
        public int LocalCount { get; set; }

        /// <summary>
        /// Gets or Sets RemoteCount
        /// </summary>
        [DataMember(Name = "remoteCount", EmitDefaultValue = false)]
        public int RemoteCount { get; set; }

        /// <summary>
        /// Gets or Sets MissingRemotely
        /// </summary>
        [DataMember(Name = "missingRemotely", EmitDefaultValue = false)]
        public List<string> MissingRemotely { get; set; }

        /// <summary>
        /// Gets or Sets MissingLocally
        /// </summary>
        [DataMember(Name = "missingLocally", EmitDefaultValue = false)]
        public List<string> MissingLocally { get; set; }

        /// <summary>
        /// Gets or Sets DifferentLocally
        /// </summary>
        [DataMember(Name = "differentLocally", EmitDefaultValue = false)]
        public List<string> DifferentLocally { get; set; }

        /// <summary>
        /// Gets or Sets ReportedExceptions
        /// </summary>
        [DataMember(Name = "reportedExceptions", EmitDefaultValue = false)]
        public List<string> ReportedExceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsistencyReport {\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  IsConsistent: ").Append(IsConsistent).Append("\n");
            sb.Append("  LocalCount: ").Append(LocalCount).Append("\n");
            sb.Append("  RemoteCount: ").Append(RemoteCount).Append("\n");
            sb.Append("  MissingRemotely: ").Append(MissingRemotely).Append("\n");
            sb.Append("  MissingLocally: ").Append(MissingLocally).Append("\n");
            sb.Append("  DifferentLocally: ").Append(DifferentLocally).Append("\n");
            sb.Append("  ReportedExceptions: ").Append(ReportedExceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

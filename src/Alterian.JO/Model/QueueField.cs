/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// QueueField
    /// </summary>
    [DataContract(Name = "QueueField")]
    public partial class QueueField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueField" /> class.
        /// </summary>
        /// <param name="isSystem">isSystem.</param>
        /// <param name="streamKey">streamKey.</param>
        /// <param name="indexLevel">indexLevel.</param>
        /// <param name="storageHint">storageHint.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="name">name.</param>
        /// <param name="width">width.</param>
        /// <param name="required">required.</param>
        /// <param name="issankey">issankey.</param>
        /// <param name="precision">precision.</param>
        /// <param name="keyName">keyName.</param>
        public QueueField(bool isSystem = default(bool), string streamKey = default(string), int indexLevel = default(int), string storageHint = default(string), string dataType = default(string), string name = default(string), int width = default(int), bool required = default(bool), bool issankey = default(bool), int precision = default(int), string keyName = default(string))
        {
            this.IsSystem = isSystem;
            this.StreamKey = streamKey;
            this.IndexLevel = indexLevel;
            this.StorageHint = storageHint;
            this.DataType = dataType;
            this.Name = name;
            this.Width = width;
            this.Required = required;
            this.Issankey = issankey;
            this.Precision = precision;
            this.KeyName = keyName;
        }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets StreamKey
        /// </summary>
        [DataMember(Name = "streamKey", EmitDefaultValue = true)]
        public string StreamKey { get; set; }

        /// <summary>
        /// Gets or Sets IndexLevel
        /// </summary>
        [DataMember(Name = "indexLevel", EmitDefaultValue = false)]
        public int IndexLevel { get; set; }

        /// <summary>
        /// Gets or Sets StorageHint
        /// </summary>
        [DataMember(Name = "storageHint", EmitDefaultValue = true)]
        public string StorageHint { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets Issankey
        /// </summary>
        [DataMember(Name = "issankey", EmitDefaultValue = true)]
        public bool Issankey { get; set; }

        /// <summary>
        /// Gets or Sets Precision
        /// </summary>
        [DataMember(Name = "precision", EmitDefaultValue = false)]
        public int Precision { get; set; }

        /// <summary>
        /// Gets or Sets KeyName
        /// </summary>
        [DataMember(Name = "keyName", EmitDefaultValue = false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueField {\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  StreamKey: ").Append(StreamKey).Append("\n");
            sb.Append("  IndexLevel: ").Append(IndexLevel).Append("\n");
            sb.Append("  StorageHint: ").Append(StorageHint).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Issankey: ").Append(Issankey).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

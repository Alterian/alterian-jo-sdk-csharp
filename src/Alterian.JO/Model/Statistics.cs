/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// Statistics
    /// </summary>
    [DataContract(Name = "statistics")]
    public partial class Statistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statistics" /> class.
        /// </summary>
        /// <param name="bulkLoad">bulkLoad.</param>
        /// <param name="cumulativeInvokeTime">cumulativeInvokeTime.</param>
        /// <param name="errorCount">errorCount.</param>
        /// <param name="errorCountHealthScore">errorCountHealthScore.</param>
        /// <param name="healthScore">healthScore.</param>
        /// <param name="invalidCount">invalidCount.</param>
        /// <param name="invokeCountHealthScore">invokeCountHealthScore.</param>
        /// <param name="invalidDataCountHealthScore">invalidDataCountHealthScore.</param>
        /// <param name="invokeCount">invokeCount.</param>
        /// <param name="newActiveConversation">newActiveConversation.</param>
        /// <param name="newConversation">newConversation.</param>
        /// <param name="rosCounts">rosCounts.</param>
        /// <param name="serviceCost">serviceCost.</param>
        /// <param name="totalTimeouts">totalTimeouts.</param>
        /// <param name="totalTimeoutsHealthScore">totalTimeoutsHealthScore.</param>
        public Statistics(int bulkLoad = default(int), int cumulativeInvokeTime = default(int), int errorCount = default(int), int errorCountHealthScore = default(int), int healthScore = default(int), int invalidCount = default(int), int invokeCountHealthScore = default(int), int invalidDataCountHealthScore = default(int), int invokeCount = default(int), int newActiveConversation = default(int), int newConversation = default(int), List<ROSCounts> rosCounts = default(List<ROSCounts>), int serviceCost = default(int), int totalTimeouts = default(int), int totalTimeoutsHealthScore = default(int))
        {
            this.BulkLoad = bulkLoad;
            this.CumulativeInvokeTime = cumulativeInvokeTime;
            this.ErrorCount = errorCount;
            this.ErrorCountHealthScore = errorCountHealthScore;
            this.HealthScore = healthScore;
            this.InvalidCount = invalidCount;
            this.InvokeCountHealthScore = invokeCountHealthScore;
            this.InvalidDataCountHealthScore = invalidDataCountHealthScore;
            this.InvokeCount = invokeCount;
            this.NewActiveConversation = newActiveConversation;
            this.NewConversation = newConversation;
            this.RosCounts = rosCounts;
            this.ServiceCost = serviceCost;
            this.TotalTimeouts = totalTimeouts;
            this.TotalTimeoutsHealthScore = totalTimeoutsHealthScore;
        }

        /// <summary>
        /// Gets or Sets BulkLoad
        /// </summary>
        [DataMember(Name = "bulkLoad", EmitDefaultValue = false)]
        public int BulkLoad { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeInvokeTime
        /// </summary>
        [DataMember(Name = "cumulativeInvokeTime", EmitDefaultValue = false)]
        public int CumulativeInvokeTime { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCount
        /// </summary>
        [DataMember(Name = "errorCount", EmitDefaultValue = false)]
        public int ErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCountHealthScore
        /// </summary>
        [DataMember(Name = "errorCountHealthScore", EmitDefaultValue = false)]
        public int ErrorCountHealthScore { get; set; }

        /// <summary>
        /// Gets or Sets HealthScore
        /// </summary>
        [DataMember(Name = "healthScore", EmitDefaultValue = false)]
        public int HealthScore { get; set; }

        /// <summary>
        /// Gets or Sets InvalidCount
        /// </summary>
        [DataMember(Name = "invalidCount", EmitDefaultValue = false)]
        public int InvalidCount { get; set; }

        /// <summary>
        /// Gets or Sets InvokeCountHealthScore
        /// </summary>
        [DataMember(Name = "invokeCountHealthScore", EmitDefaultValue = false)]
        public int InvokeCountHealthScore { get; set; }

        /// <summary>
        /// Gets or Sets InvalidDataCountHealthScore
        /// </summary>
        [DataMember(Name = "invalidDataCountHealthScore", EmitDefaultValue = false)]
        public int InvalidDataCountHealthScore { get; set; }

        /// <summary>
        /// Gets or Sets InvokeCount
        /// </summary>
        [DataMember(Name = "invokeCount", EmitDefaultValue = false)]
        public int InvokeCount { get; set; }

        /// <summary>
        /// Gets or Sets NewActiveConversation
        /// </summary>
        [DataMember(Name = "newActiveConversation", EmitDefaultValue = false)]
        public int NewActiveConversation { get; set; }

        /// <summary>
        /// Gets or Sets NewConversation
        /// </summary>
        [DataMember(Name = "newConversation", EmitDefaultValue = false)]
        public int NewConversation { get; set; }

        /// <summary>
        /// Gets or Sets RosCounts
        /// </summary>
        [DataMember(Name = "rosCounts", EmitDefaultValue = false)]
        public List<ROSCounts> RosCounts { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCost
        /// </summary>
        [DataMember(Name = "serviceCost", EmitDefaultValue = false)]
        public int ServiceCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalTimeouts
        /// </summary>
        [DataMember(Name = "totalTimeouts", EmitDefaultValue = false)]
        public int TotalTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets TotalTimeoutsHealthScore
        /// </summary>
        [DataMember(Name = "totalTimeoutsHealthScore", EmitDefaultValue = false)]
        public int TotalTimeoutsHealthScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Statistics {\n");
            sb.Append("  BulkLoad: ").Append(BulkLoad).Append("\n");
            sb.Append("  CumulativeInvokeTime: ").Append(CumulativeInvokeTime).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("  ErrorCountHealthScore: ").Append(ErrorCountHealthScore).Append("\n");
            sb.Append("  HealthScore: ").Append(HealthScore).Append("\n");
            sb.Append("  InvalidCount: ").Append(InvalidCount).Append("\n");
            sb.Append("  InvokeCountHealthScore: ").Append(InvokeCountHealthScore).Append("\n");
            sb.Append("  InvalidDataCountHealthScore: ").Append(InvalidDataCountHealthScore).Append("\n");
            sb.Append("  InvokeCount: ").Append(InvokeCount).Append("\n");
            sb.Append("  NewActiveConversation: ").Append(NewActiveConversation).Append("\n");
            sb.Append("  NewConversation: ").Append(NewConversation).Append("\n");
            sb.Append("  RosCounts: ").Append(RosCounts).Append("\n");
            sb.Append("  ServiceCost: ").Append(ServiceCost).Append("\n");
            sb.Append("  TotalTimeouts: ").Append(TotalTimeouts).Append("\n");
            sb.Append("  TotalTimeoutsHealthScore: ").Append(TotalTimeoutsHealthScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

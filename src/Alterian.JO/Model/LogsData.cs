/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// LogsData
    /// </summary>
    [DataContract(Name = "LogsData")]
    public partial class LogsData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Loglevel
        /// </summary>
        [DataMember(Name = "loglevel", EmitDefaultValue = false)]
        public LogLevelEnum? Loglevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogsData" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="agent">agent.</param>
        /// <param name="varClient">varClient.</param>
        /// <param name="ecs">ecs.</param>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="fields">fields.</param>
        /// <param name="host">host.</param>
        /// <param name="info">info.</param>
        /// <param name="input">input.</param>
        /// <param name="level">level.</param>
        /// <param name="log">log.</param>
        /// <param name="logType">logType.</param>
        /// <param name="loglevel">loglevel.</param>
        /// <param name="msg">msg.</param>
        /// <param name="node">node.</param>
        /// <param name="nodeName">nodeName.</param>
        /// <param name="nodeDesc">nodeDesc.</param>
        /// <param name="restartSequence">restartSequence.</param>
        /// <param name="rule">rule.</param>
        /// <param name="ruleLogEntry">ruleLogEntry.</param>
        /// <param name="seq">seq.</param>
        /// <param name="step">step.</param>
        /// <param name="tags">tags.</param>
        /// <param name="target">target.</param>
        /// <param name="templateUrl">templateUrl.</param>
        /// <param name="tileId">tileId.</param>
        /// <param name="tileName">tileName.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="varVersion">varVersion.</param>
        public LogsData(string timestamp = default(string), string varVersion = default(string), LogsDataAgent agent = default(LogsDataAgent), string varClient = default(string), LogsDataEcs ecs = default(LogsDataEcs), LogsDataEvent varEvent = default(LogsDataEvent), LogsDataFields fields = default(LogsDataFields), LogsDataHost host = default(LogsDataHost), string info = default(string), LogsDataInput input = default(LogsDataInput), string level = default(string), LogsDataLog log = default(LogsDataLog), string logType = default(string), LogLevelEnum? loglevel = default(LogLevelEnum?), string msg = default(string), string node = default(string), string nodeName = default(string), string nodeDesc = default(string), string restartSequence = default(string), string rule = default(string), string ruleLogEntry = default(string), string seq = default(string), string step = default(string), List<string> tags = default(List<string>), string target = default(string), string templateUrl = default(string), string tileId = default(string), string tileName = default(string), string timestamp = default(string), string varVersion = default(string))
        {
            this.Timestamp = timestamp;
            this.VarVersion = varVersion;
            this.Agent = agent;
            this.VarClient = varClient;
            this.Ecs = ecs;
            this.VarEvent = varEvent;
            this.Fields = fields;
            this.Host = host;
            this.Info = info;
            this.Input = input;
            this.Level = level;
            this.Log = log;
            this.LogType = logType;
            this.Loglevel = loglevel;
            this.Msg = msg;
            this.Node = node;
            this.NodeName = nodeName;
            this.NodeDesc = nodeDesc;
            this.RestartSequence = restartSequence;
            this.Rule = rule;
            this.RuleLogEntry = ruleLogEntry;
            this.Seq = seq;
            this.Step = step;
            this.Tags = tags;
            this.Target = target;
            this.TemplateUrl = templateUrl;
            this.TileId = tileId;
            this.TileName = tileName;
            this.Timestamp = timestamp;
            this.VarVersion = varVersion;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "@timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "@version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name = "agent", EmitDefaultValue = false)]
        public LogsDataAgent Agent { get; set; }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public string VarClient { get; set; }

        /// <summary>
        /// Gets or Sets Ecs
        /// </summary>
        [DataMember(Name = "ecs", EmitDefaultValue = false)]
        public LogsDataEcs Ecs { get; set; }

        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public LogsDataEvent VarEvent { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public LogsDataFields Fields { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public LogsDataHost Host { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name = "info", EmitDefaultValue = false)]
        public string Info { get; set; }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", EmitDefaultValue = false)]
        public LogsDataInput Input { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [DataMember(Name = "log", EmitDefaultValue = false)]
        public LogsDataLog Log { get; set; }

        /// <summary>
        /// Gets or Sets LogType
        /// </summary>
        [DataMember(Name = "log_type", EmitDefaultValue = false)]
        public string LogType { get; set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name = "msg", EmitDefaultValue = false)]
        public string Msg { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "node", EmitDefaultValue = false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets NodeName
        /// </summary>
        [DataMember(Name = "nodeName", EmitDefaultValue = false)]
        public string NodeName { get; set; }

        /// <summary>
        /// Gets or Sets NodeDesc
        /// </summary>
        [DataMember(Name = "node_desc", EmitDefaultValue = false)]
        public string NodeDesc { get; set; }

        /// <summary>
        /// Gets or Sets RestartSequence
        /// </summary>
        [DataMember(Name = "restartSequence", EmitDefaultValue = false)]
        public string RestartSequence { get; set; }

        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name = "rule", EmitDefaultValue = false)]
        public string Rule { get; set; }

        /// <summary>
        /// Gets or Sets RuleLogEntry
        /// </summary>
        [DataMember(Name = "rule_log_entry", EmitDefaultValue = false)]
        public string RuleLogEntry { get; set; }

        /// <summary>
        /// Gets or Sets Seq
        /// </summary>
        [DataMember(Name = "seq", EmitDefaultValue = false)]
        public string Seq { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name = "step", EmitDefaultValue = false)]
        public string Step { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets TemplateUrl
        /// </summary>
        [DataMember(Name = "templateUrl", EmitDefaultValue = false)]
        public string TemplateUrl { get; set; }

        /// <summary>
        /// Gets or Sets TileId
        /// </summary>
        [DataMember(Name = "tileId", EmitDefaultValue = false)]
        public string TileId { get; set; }

        /// <summary>
        /// Gets or Sets TileName
        /// </summary>
        [DataMember(Name = "tileName", EmitDefaultValue = false)]
        public string TileName { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogsData {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  Ecs: ").Append(Ecs).Append("\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  Loglevel: ").Append(Loglevel).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  NodeDesc: ").Append(NodeDesc).Append("\n");
            sb.Append("  RestartSequence: ").Append(RestartSequence).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  RuleLogEntry: ").Append(RuleLogEntry).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TemplateUrl: ").Append(TemplateUrl).Append("\n");
            sb.Append("  TileId: ").Append(TileId).Append("\n");
            sb.Append("  TileName: ").Append(TileName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// ParameterCopyDetails
    /// </summary>
    [DataContract(Name = "ParameterCopyDetails")]
    public partial class ParameterCopyDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterCopyDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParameterCopyDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterCopyDetails" /> class.
        /// </summary>
        /// <param name="newClient">(Optional) name of the client where the copy should be made.</param>
        /// <param name="newName">global param name (required).</param>
        /// <param name="removeOriginal">remove the original parameter after creating the copy (essentially a move / rename) (default to false).</param>
        public ParameterCopyDetails(string newClient = default(string), string newName = default(string), bool removeOriginal = false)
        {
            // to ensure "newName" is required (not null)
            if (newName == null)
            {
                throw new ArgumentNullException("newName is a required property for ParameterCopyDetails and cannot be null");
            }
            this.NewName = newName;
            this.NewClient = newClient;
            this.RemoveOriginal = removeOriginal;
        }

        /// <summary>
        /// (Optional) name of the client where the copy should be made
        /// </summary>
        /// <value>(Optional) name of the client where the copy should be made</value>
        [DataMember(Name = "newClient", EmitDefaultValue = false)]
        public string NewClient { get; set; }

        /// <summary>
        /// global param name
        /// </summary>
        /// <value>global param name</value>
        [DataMember(Name = "newName", IsRequired = true, EmitDefaultValue = true)]
        public string NewName { get; set; }

        /// <summary>
        /// remove the original parameter after creating the copy (essentially a move / rename)
        /// </summary>
        /// <value>remove the original parameter after creating the copy (essentially a move / rename)</value>
        [DataMember(Name = "removeOriginal", EmitDefaultValue = true)]
        public bool RemoveOriginal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterCopyDetails {\n");
            sb.Append("  NewClient: ").Append(NewClient).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  RemoveOriginal: ").Append(RemoveOriginal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

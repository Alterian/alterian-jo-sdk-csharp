/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// QueueMessage
    /// </summary>
    [DataContract(Name = "QueueMessage")]
    public partial class QueueMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueMessage" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="sentTimestamp">sentTimestamp.</param>
        /// <param name="bundleId">bundleId.</param>
        /// <param name="receipt">receipt.</param>
        /// <param name="message">message.</param>
        /// <param name="nonjsonmessage">nonjsonmessage.</param>
        public QueueMessage(string id = default(string), string sentTimestamp = default(string), int bundleId = default(int), string receipt = default(string), Object message = default(Object), string nonjsonmessage = default(string))
        {
            this.Id = id;
            this.SentTimestamp = sentTimestamp;
            this.BundleId = bundleId;
            this.Receipt = receipt;
            this.Message = message;
            this.Nonjsonmessage = nonjsonmessage;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SentTimestamp
        /// </summary>
        [DataMember(Name = "sentTimestamp", EmitDefaultValue = false)]
        public string SentTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets BundleId
        /// </summary>
        [DataMember(Name = "bundleId", EmitDefaultValue = false)]
        public int BundleId { get; set; }

        /// <summary>
        /// Gets or Sets Receipt
        /// </summary>
        [DataMember(Name = "receipt", EmitDefaultValue = false)]
        public string Receipt { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public Object Message { get; set; }

        /// <summary>
        /// Gets or Sets Nonjsonmessage
        /// </summary>
        [DataMember(Name = "nonjsonmessage", EmitDefaultValue = false)]
        public string Nonjsonmessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SentTimestamp: ").Append(SentTimestamp).Append("\n");
            sb.Append("  BundleId: ").Append(BundleId).Append("\n");
            sb.Append("  Receipt: ").Append(Receipt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Nonjsonmessage: ").Append(Nonjsonmessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// Cluster
    /// </summary>
    [DataContract(Name = "Cluster")]
    public partial class Cluster : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cluster" /> class.
        /// </summary>
        /// <param name="nodeName">nodeName.</param>
        /// <param name="publicIp">The public ip of the new instance.</param>
        /// <param name="lastSeen">lastSeen.</param>
        /// <param name="restartCount">restartCount.</param>
        /// <param name="host">The internal ip address of the new instance.</param>
        /// <param name="state">state.</param>
        /// <param name="firstDownTime">firstDownTime.</param>
        /// <param name="nodeDescription">nodeDescription.</param>
        /// <param name="reportedBy">reportedBy.</param>
        /// <param name="varVersion">The version number of the instance.</param>
        /// <param name="consistency">consistency.</param>
        /// <param name="bootstrapVersion">bootstrapVersion.</param>
        public Cluster(string nodeName = default(string), string publicIp = default(string), DateTime lastSeen = default(DateTime), int restartCount = default(int), string host = default(string), string state = default(string), string firstDownTime = default(string), string nodeDescription = default(string), string reportedBy = default(string), string varVersion = default(string), string consistency = default(string), int bootstrapVersion = default(int))
        {
            this.NodeName = nodeName;
            this.PublicIp = publicIp;
            this.LastSeen = lastSeen;
            this.RestartCount = restartCount;
            this.Host = host;
            this.State = state;
            this.FirstDownTime = firstDownTime;
            this.NodeDescription = nodeDescription;
            this.ReportedBy = reportedBy;
            this.VarVersion = varVersion;
            this.Consistency = consistency;
            this.BootstrapVersion = bootstrapVersion;
        }

        /// <summary>
        /// Gets or Sets NodeName
        /// </summary>
        [DataMember(Name = "nodeName", EmitDefaultValue = false)]
        public string NodeName { get; set; }

        /// <summary>
        /// The public ip of the new instance
        /// </summary>
        /// <value>The public ip of the new instance</value>
        [DataMember(Name = "public_ip", EmitDefaultValue = false)]
        public string PublicIp { get; set; }

        /// <summary>
        /// Gets or Sets LastSeen
        /// </summary>
        [DataMember(Name = "lastSeen", EmitDefaultValue = false)]
        public DateTime LastSeen { get; set; }

        /// <summary>
        /// Gets or Sets RestartCount
        /// </summary>
        [DataMember(Name = "restartCount", EmitDefaultValue = false)]
        public int RestartCount { get; set; }

        /// <summary>
        /// The internal ip address of the new instance
        /// </summary>
        /// <value>The internal ip address of the new instance</value>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets FirstDownTime
        /// </summary>
        [DataMember(Name = "firstDownTime", EmitDefaultValue = false)]
        public string FirstDownTime { get; set; }

        /// <summary>
        /// Gets or Sets NodeDescription
        /// </summary>
        [DataMember(Name = "nodeDescription", EmitDefaultValue = false)]
        public string NodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ReportedBy
        /// </summary>
        [DataMember(Name = "reportedBy", EmitDefaultValue = false)]
        public string ReportedBy { get; set; }

        /// <summary>
        /// The version number of the instance
        /// </summary>
        /// <value>The version number of the instance</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Consistency
        /// </summary>
        [DataMember(Name = "consistency", EmitDefaultValue = false)]
        public string Consistency { get; set; }

        /// <summary>
        /// Gets or Sets BootstrapVersion
        /// </summary>
        [DataMember(Name = "bootstrapVersion", EmitDefaultValue = false)]
        public int BootstrapVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cluster {\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  PublicIp: ").Append(PublicIp).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  RestartCount: ").Append(RestartCount).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  FirstDownTime: ").Append(FirstDownTime).Append("\n");
            sb.Append("  NodeDescription: ").Append(NodeDescription).Append("\n");
            sb.Append("  ReportedBy: ").Append(ReportedBy).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Consistency: ").Append(Consistency).Append("\n");
            sb.Append("  BootstrapVersion: ").Append(BootstrapVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// RuleData
    /// </summary>
    [DataContract(Name = "ruleData")]
    public partial class RuleData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LogLevel
        /// </summary>
        [DataMember(Name = "logLevel", EmitDefaultValue = false)]
        public LogLevelEnum? LogLevel { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public RuleStateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleData" /> class.
        /// </summary>
        /// <param name="apiVersion">apiVersion.</param>
        /// <param name="autoloader">autoloader.</param>
        /// <param name="varClient">varClient.</param>
        /// <param name="datagrids">datagrids.</param>
        /// <param name="description">A description of the rule.</param>
        /// <param name="edges">edges.</param>
        /// <param name="exampleData">exampleData.</param>
        /// <param name="hasAutoloader">hasAutoloader.</param>
        /// <param name="hasRuledesigner">hasRuledesigner.</param>
        /// <param name="helpLink">helpLink.</param>
        /// <param name="isValid">isValid.</param>
        /// <param name="journeys">journeys.</param>
        /// <param name="lastSeen">lastSeen.</param>
        /// <param name="latestTemplateVersions">latestTemplateVersions.</param>
        /// <param name="logLevel">logLevel.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="name">name.</param>
        /// <param name="newerTemplateVersion">newerTemplateVersion.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="priorityWeighting">priorityWeighting.</param>
        /// <param name="relativeTime">relativeTime.</param>
        /// <param name="requestedAt">requestedAt.</param>
        /// <param name="rulegroups">rulegroups.</param>
        /// <param name="securityOption">securityOption.</param>
        /// <param name="state">state.</param>
        /// <param name="stateModifiedDate">stateModifiedDate.</param>
        /// <param name="statistics">statistics.</param>
        /// <param name="target">target.</param>
        /// <param name="templateName">templateName.</param>
        /// <param name="templateURL">templateURL.</param>
        /// <param name="templateVersion">templateVersion.</param>
        /// <param name="tiles">tiles.</param>
        /// <param name="type">type.</param>
        /// <param name="urlPath">urlPath.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="wtlLoggingActive">wtlLoggingActive.</param>
        /// <param name="wtlLoggingAllowed">wtlLoggingAllowed.</param>
        /// <param name="requestContentType">requestContentType.</param>
        /// <param name="snoozed">snoozed.</param>
        public RuleData(string apiVersion = default(string), Object autoloader = default(Object), string varClient = default(string), List<Object> datagrids = default(List<Object>), string description = default(string), List<Object> edges = default(List<Object>), string exampleData = default(string), bool hasAutoloader = default(bool), bool hasRuledesigner = default(bool), string helpLink = default(string), bool isValid = default(bool), List<string> journeys = default(List<string>), string lastSeen = default(string), bool latestTemplateVersions = default(bool), LogLevelEnum? logLevel = default(LogLevelEnum?), string modifiedDate = default(string), string name = default(string), int newerTemplateVersion = default(int), List<RuleParameter> parameters = default(List<RuleParameter>), PriorityWeighting priorityWeighting = default(PriorityWeighting), string relativeTime = default(string), string requestedAt = default(string), List<string> rulegroups = default(List<string>), string securityOption = default(string), RuleStateEnum? state = default(RuleStateEnum?), string stateModifiedDate = default(string), Statistics statistics = default(Statistics), string target = default(string), string templateName = default(string), string templateURL = default(string), int templateVersion = default(int), List<Object> tiles = default(List<Object>), string type = default(string), string urlPath = default(string), int varVersion = default(int), bool wtlLoggingActive = default(bool), bool wtlLoggingAllowed = default(bool), string requestContentType = default(string), bool snoozed = default(bool))
        {
            this.ApiVersion = apiVersion;
            this.Autoloader = autoloader;
            this.VarClient = varClient;
            this.Datagrids = datagrids;
            this.Description = description;
            this.Edges = edges;
            this.ExampleData = exampleData;
            this.HasAutoloader = hasAutoloader;
            this.HasRuledesigner = hasRuledesigner;
            this.HelpLink = helpLink;
            this.IsValid = isValid;
            this.Journeys = journeys;
            this.LastSeen = lastSeen;
            this.LatestTemplateVersions = latestTemplateVersions;
            this.LogLevel = logLevel;
            this.ModifiedDate = modifiedDate;
            this.Name = name;
            this.NewerTemplateVersion = newerTemplateVersion;
            this.Parameters = parameters;
            this.PriorityWeighting = priorityWeighting;
            this.RelativeTime = relativeTime;
            this.RequestedAt = requestedAt;
            this.Rulegroups = rulegroups;
            this.SecurityOption = securityOption;
            this.State = state;
            this.StateModifiedDate = stateModifiedDate;
            this.Statistics = statistics;
            this.Target = target;
            this.TemplateName = templateName;
            this.TemplateURL = templateURL;
            this.TemplateVersion = templateVersion;
            this.Tiles = tiles;
            this.Type = type;
            this.UrlPath = urlPath;
            this.VarVersion = varVersion;
            this.WtlLoggingActive = wtlLoggingActive;
            this.WtlLoggingAllowed = wtlLoggingAllowed;
            this.RequestContentType = requestContentType;
            this.Snoozed = snoozed;
        }

        /// <summary>
        /// Gets or Sets ApiVersion
        /// </summary>
        [DataMember(Name = "apiVersion", EmitDefaultValue = false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets Autoloader
        /// </summary>
        [DataMember(Name = "autoloader", EmitDefaultValue = false)]
        public Object Autoloader { get; set; }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public string VarClient { get; set; }

        /// <summary>
        /// Gets or Sets Datagrids
        /// </summary>
        [DataMember(Name = "datagrids", EmitDefaultValue = false)]
        public List<Object> Datagrids { get; set; }

        /// <summary>
        /// A description of the rule
        /// </summary>
        /// <value>A description of the rule</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Edges
        /// </summary>
        [DataMember(Name = "edges", EmitDefaultValue = false)]
        public List<Object> Edges { get; set; }

        /// <summary>
        /// Gets or Sets ExampleData
        /// </summary>
        [DataMember(Name = "exampleData", EmitDefaultValue = false)]
        public string ExampleData { get; set; }

        /// <summary>
        /// Gets or Sets HasAutoloader
        /// </summary>
        [DataMember(Name = "hasAutoloader", EmitDefaultValue = true)]
        public bool HasAutoloader { get; set; }

        /// <summary>
        /// Gets or Sets HasRuledesigner
        /// </summary>
        [DataMember(Name = "hasRuledesigner", EmitDefaultValue = true)]
        public bool HasRuledesigner { get; set; }

        /// <summary>
        /// Gets or Sets HelpLink
        /// </summary>
        [DataMember(Name = "helpLink", EmitDefaultValue = false)]
        public string HelpLink { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name = "isValid", EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Gets or Sets Journeys
        /// </summary>
        [DataMember(Name = "journeys", EmitDefaultValue = false)]
        public List<string> Journeys { get; set; }

        /// <summary>
        /// Gets or Sets LastSeen
        /// </summary>
        [DataMember(Name = "lastSeen", EmitDefaultValue = false)]
        public string LastSeen { get; set; }

        /// <summary>
        /// Gets or Sets LatestTemplateVersions
        /// </summary>
        [DataMember(Name = "latestTemplateVersions", EmitDefaultValue = true)]
        public bool LatestTemplateVersions { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = false)]
        public string ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NewerTemplateVersion
        /// </summary>
        [DataMember(Name = "newerTemplateVersion", EmitDefaultValue = false)]
        public int NewerTemplateVersion { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<RuleParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets PriorityWeighting
        /// </summary>
        [DataMember(Name = "priorityWeighting", EmitDefaultValue = false)]
        public PriorityWeighting PriorityWeighting { get; set; }

        /// <summary>
        /// Gets or Sets RelativeTime
        /// </summary>
        [DataMember(Name = "relativeTime", EmitDefaultValue = false)]
        public string RelativeTime { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAt
        /// </summary>
        [DataMember(Name = "requestedAt", EmitDefaultValue = false)]
        public string RequestedAt { get; set; }

        /// <summary>
        /// Gets or Sets Rulegroups
        /// </summary>
        [DataMember(Name = "rulegroups", EmitDefaultValue = false)]
        public List<string> Rulegroups { get; set; }

        /// <summary>
        /// Gets or Sets SecurityOption
        /// </summary>
        [DataMember(Name = "securityOption", EmitDefaultValue = false)]
        public string SecurityOption { get; set; }

        /// <summary>
        /// Gets or Sets StateModifiedDate
        /// </summary>
        [DataMember(Name = "stateModifiedDate", EmitDefaultValue = false)]
        public string StateModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name = "statistics", EmitDefaultValue = false)]
        public Statistics Statistics { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name = "templateName", EmitDefaultValue = false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets TemplateURL
        /// </summary>
        [DataMember(Name = "templateURL", EmitDefaultValue = false)]
        public string TemplateURL { get; set; }

        /// <summary>
        /// Gets or Sets TemplateVersion
        /// </summary>
        [DataMember(Name = "templateVersion", EmitDefaultValue = false)]
        public int TemplateVersion { get; set; }

        /// <summary>
        /// Gets or Sets Tiles
        /// </summary>
        [DataMember(Name = "tiles", EmitDefaultValue = false)]
        public List<Object> Tiles { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UrlPath
        /// </summary>
        [DataMember(Name = "urlPath", EmitDefaultValue = false)]
        public string UrlPath { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets WtlLoggingActive
        /// </summary>
        [DataMember(Name = "wtlLoggingActive", EmitDefaultValue = true)]
        public bool WtlLoggingActive { get; set; }

        /// <summary>
        /// Gets or Sets WtlLoggingAllowed
        /// </summary>
        [DataMember(Name = "wtlLoggingAllowed", EmitDefaultValue = true)]
        public bool WtlLoggingAllowed { get; set; }

        /// <summary>
        /// Gets or Sets RequestContentType
        /// </summary>
        [DataMember(Name = "requestContentType", EmitDefaultValue = false)]
        public string RequestContentType { get; set; }

        /// <summary>
        /// Gets or Sets Snoozed
        /// </summary>
        [DataMember(Name = "snoozed", EmitDefaultValue = true)]
        public bool Snoozed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleData {\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Autoloader: ").Append(Autoloader).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  Datagrids: ").Append(Datagrids).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Edges: ").Append(Edges).Append("\n");
            sb.Append("  ExampleData: ").Append(ExampleData).Append("\n");
            sb.Append("  HasAutoloader: ").Append(HasAutoloader).Append("\n");
            sb.Append("  HasRuledesigner: ").Append(HasRuledesigner).Append("\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Journeys: ").Append(Journeys).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  LatestTemplateVersions: ").Append(LatestTemplateVersions).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewerTemplateVersion: ").Append(NewerTemplateVersion).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  PriorityWeighting: ").Append(PriorityWeighting).Append("\n");
            sb.Append("  RelativeTime: ").Append(RelativeTime).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("  Rulegroups: ").Append(Rulegroups).Append("\n");
            sb.Append("  SecurityOption: ").Append(SecurityOption).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateModifiedDate: ").Append(StateModifiedDate).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  TemplateURL: ").Append(TemplateURL).Append("\n");
            sb.Append("  TemplateVersion: ").Append(TemplateVersion).Append("\n");
            sb.Append("  Tiles: ").Append(Tiles).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UrlPath: ").Append(UrlPath).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WtlLoggingActive: ").Append(WtlLoggingActive).Append("\n");
            sb.Append("  WtlLoggingAllowed: ").Append(WtlLoggingAllowed).Append("\n");
            sb.Append("  RequestContentType: ").Append(RequestContentType).Append("\n");
            sb.Append("  Snoozed: ").Append(Snoozed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// Icon
    /// </summary>
    [DataContract(Name = "icon")]
    public partial class Icon : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Icon" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Icon() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Icon" /> class.
        /// </summary>
        /// <param name="background">background (required).</param>
        /// <param name="svgIcon">svgIcon.</param>
        /// <param name="foreground">foreground (required).</param>
        /// <param name="matIcon">matIcon.</param>
        public Icon(string background = default(string), string svgIcon = default(string), string foreground = default(string), string matIcon = default(string))
        {
            // to ensure "background" is required (not null)
            if (background == null)
            {
                throw new ArgumentNullException("background is a required property for Icon and cannot be null");
            }
            this.Background = background;
            // to ensure "foreground" is required (not null)
            if (foreground == null)
            {
                throw new ArgumentNullException("foreground is a required property for Icon and cannot be null");
            }
            this.Foreground = foreground;
            this.SvgIcon = svgIcon;
            this.MatIcon = matIcon;
        }

        /// <summary>
        /// Gets or Sets Background
        /// </summary>
        [DataMember(Name = "background", IsRequired = true, EmitDefaultValue = true)]
        public string Background { get; set; }

        /// <summary>
        /// Gets or Sets SvgIcon
        /// </summary>
        [DataMember(Name = "svgIcon", EmitDefaultValue = false)]
        public string SvgIcon { get; set; }

        /// <summary>
        /// Gets or Sets Foreground
        /// </summary>
        [DataMember(Name = "foreground", IsRequired = true, EmitDefaultValue = true)]
        public string Foreground { get; set; }

        /// <summary>
        /// Gets or Sets MatIcon
        /// </summary>
        [DataMember(Name = "matIcon", EmitDefaultValue = false)]
        public string MatIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Icon {\n");
            sb.Append("  Background: ").Append(Background).Append("\n");
            sb.Append("  SvgIcon: ").Append(SvgIcon).Append("\n");
            sb.Append("  Foreground: ").Append(Foreground).Append("\n");
            sb.Append("  MatIcon: ").Append(MatIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

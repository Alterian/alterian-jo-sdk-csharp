/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// RulegroupPostRequest
    /// </summary>
    [DataContract(Name = "_rulegroup_post_request")]
    public partial class RulegroupPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RulegroupPostRequest" /> class.
        /// </summary>
        /// <param name="description">A description of the rule group.</param>
        /// <param name="enableInvoke">If you want to allow this rule group to be invoked, set this to true.</param>
        /// <param name="name">The name of the rule group.</param>
        /// <param name="referencedRules">If you want the rule group to reference rules, provide the list here.</param>
        public RulegroupPostRequest(string description = default(string), bool enableInvoke = default(bool), string name = default(string), List<string> referencedRules = default(List<string>))
        {
            this.Description = description;
            this.EnableInvoke = enableInvoke;
            this.Name = name;
            this.ReferencedRules = referencedRules;
        }

        /// <summary>
        /// A description of the rule group
        /// </summary>
        /// <value>A description of the rule group</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// If you want to allow this rule group to be invoked, set this to true
        /// </summary>
        /// <value>If you want to allow this rule group to be invoked, set this to true</value>
        [DataMember(Name = "enableInvoke", EmitDefaultValue = true)]
        public bool EnableInvoke { get; set; }

        /// <summary>
        /// The name of the rule group
        /// </summary>
        /// <value>The name of the rule group</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If you want the rule group to reference rules, provide the list here
        /// </summary>
        /// <value>If you want the rule group to reference rules, provide the list here</value>
        [DataMember(Name = "referencedRules", EmitDefaultValue = false)]
        public List<string> ReferencedRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RulegroupPostRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnableInvoke: ").Append(EnableInvoke).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferencedRules: ").Append(ReferencedRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

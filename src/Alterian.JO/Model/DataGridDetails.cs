/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// DataGridDetails
    /// </summary>
    [DataContract(Name = "DataGridDetails")]
    public partial class DataGridDetails : IValidatableObject
    {
        /// <summary>
        /// Defines ColumnType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColumnTypeEnum
        {
            /// <summary>
            /// Enum String for value: String
            /// </summary>
            [EnumMember(Value = "String")]
            String = 1
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataGridDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataGridDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataGridDetails" /> class.
        /// </summary>
        /// <param name="columnType">columnType (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="columnHeader">columnHeader (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="columnFormat">columnFormat (required).</param>
        /// <param name="parameters">parameters (required).</param>
        public DataGridDetails(List<ColumnTypeEnum> columnType = default(List<ColumnTypeEnum>), List<List<string>> data = default(List<List<string>>), List<string> columnHeader = default(List<string>), string name = default(string), List<string> columnFormat = default(List<string>), List<Parameter> parameters = default(List<Parameter>))
        {
            // to ensure "columnType" is required (not null)
            if (columnType == null)
            {
                throw new ArgumentNullException("columnType is a required property for DataGridDetails and cannot be null");
            }
            this.ColumnType = columnType;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for DataGridDetails and cannot be null");
            }
            this.Data = data;
            // to ensure "columnHeader" is required (not null)
            if (columnHeader == null)
            {
                throw new ArgumentNullException("columnHeader is a required property for DataGridDetails and cannot be null");
            }
            this.ColumnHeader = columnHeader;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DataGridDetails and cannot be null");
            }
            this.Name = name;
            // to ensure "columnFormat" is required (not null)
            if (columnFormat == null)
            {
                throw new ArgumentNullException("columnFormat is a required property for DataGridDetails and cannot be null");
            }
            this.ColumnFormat = columnFormat;
            // to ensure "parameters" is required (not null)
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters is a required property for DataGridDetails and cannot be null");
            }
            this.Parameters = parameters;
        }

        /// <summary>
        /// Gets or Sets ColumnType
        /// </summary>
        [DataMember(Name = "columnType", IsRequired = true, EmitDefaultValue = true)]
        public List<DataGridDetails.ColumnTypeEnum> ColumnType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public List<List<string>> Data { get; set; }

        /// <summary>
        /// Gets or Sets ColumnHeader
        /// </summary>
        [DataMember(Name = "columnHeader", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ColumnHeader { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ColumnFormat
        /// </summary>
        [DataMember(Name = "columnFormat", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ColumnFormat { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", IsRequired = true, EmitDefaultValue = true)]
        public List<Parameter> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataGridDetails {\n");
            sb.Append("  ColumnType: ").Append(ColumnType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ColumnHeader: ").Append(ColumnHeader).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ColumnFormat: ").Append(ColumnFormat).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

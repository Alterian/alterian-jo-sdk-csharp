/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// QueueDetails
    /// </summary>
    [DataContract(Name = "QueueDetails")]
    public partial class QueueDetails : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QueueBackend
        /// </summary>
        [DataMember(Name = "queueBackend", EmitDefaultValue = false)]
        public QueueBackendEnum? QueueBackend { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueDetails" /> class.
        /// </summary>
        /// <param name="fifo">fifo.</param>
        /// <param name="queueBackend">queueBackend.</param>
        /// <param name="schema">schema.</param>
        public QueueDetails(bool fifo = default(bool), QueueBackendEnum? queueBackend = default(QueueBackendEnum?), Dictionary<string, List<QueueField>> schema = default(Dictionary<string, List<QueueField>>))
        {
            this.Fifo = fifo;
            this.QueueBackend = queueBackend;
            this.Schema = schema;
        }

        /// <summary>
        /// Gets or Sets Fifo
        /// </summary>
        [DataMember(Name = "fifo", EmitDefaultValue = true)]
        public bool Fifo { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public Dictionary<string, List<QueueField>> Schema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueDetails {\n");
            sb.Append("  Fifo: ").Append(Fifo).Append("\n");
            sb.Append("  QueueBackend: ").Append(QueueBackend).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

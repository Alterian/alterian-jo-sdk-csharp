/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// RuleGroupStatistics
    /// </summary>
    [DataContract(Name = "RuleGroupStatistics")]
    public partial class RuleGroupStatistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleGroupStatistics" /> class.
        /// </summary>
        /// <param name="relativeTime">relativeTime.</param>
        /// <param name="lastSeen">lastSeen.</param>
        /// <param name="cost">cost.</param>
        /// <param name="totalTime">totalTime.</param>
        /// <param name="newActiveConversation">newActiveConversation.</param>
        /// <param name="bulkLoad">bulkLoad.</param>
        /// <param name="invalidCount">invalidCount.</param>
        /// <param name="matchedCount">matchedCount.</param>
        /// <param name="newConversation">newConversation.</param>
        /// <param name="totalCount">totalCount.</param>
        /// <param name="timeoutCount">timeoutCount.</param>
        /// <param name="errorCount">errorCount.</param>
        public RuleGroupStatistics(string relativeTime = default(string), string lastSeen = default(string), string cost = default(string), string totalTime = default(string), string newActiveConversation = default(string), string bulkLoad = default(string), string invalidCount = default(string), string matchedCount = default(string), string newConversation = default(string), string totalCount = default(string), string timeoutCount = default(string), string errorCount = default(string))
        {
            this.RelativeTime = relativeTime;
            this.LastSeen = lastSeen;
            this.Cost = cost;
            this.TotalTime = totalTime;
            this.NewActiveConversation = newActiveConversation;
            this.BulkLoad = bulkLoad;
            this.InvalidCount = invalidCount;
            this.MatchedCount = matchedCount;
            this.NewConversation = newConversation;
            this.TotalCount = totalCount;
            this.TimeoutCount = timeoutCount;
            this.ErrorCount = errorCount;
        }

        /// <summary>
        /// Gets or Sets RelativeTime
        /// </summary>
        [DataMember(Name = "relativeTime", EmitDefaultValue = false)]
        public string RelativeTime { get; set; }

        /// <summary>
        /// Gets or Sets LastSeen
        /// </summary>
        [DataMember(Name = "lastSeen", EmitDefaultValue = false)]
        public string LastSeen { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public string Cost { get; set; }

        /// <summary>
        /// Gets or Sets TotalTime
        /// </summary>
        [DataMember(Name = "totalTime", EmitDefaultValue = false)]
        public string TotalTime { get; set; }

        /// <summary>
        /// Gets or Sets NewActiveConversation
        /// </summary>
        [DataMember(Name = "newActiveConversation", EmitDefaultValue = false)]
        public string NewActiveConversation { get; set; }

        /// <summary>
        /// Gets or Sets BulkLoad
        /// </summary>
        [DataMember(Name = "bulkLoad", EmitDefaultValue = false)]
        public string BulkLoad { get; set; }

        /// <summary>
        /// Gets or Sets InvalidCount
        /// </summary>
        [DataMember(Name = "invalidCount", EmitDefaultValue = false)]
        public string InvalidCount { get; set; }

        /// <summary>
        /// Gets or Sets MatchedCount
        /// </summary>
        [DataMember(Name = "matchedCount", EmitDefaultValue = false)]
        public string MatchedCount { get; set; }

        /// <summary>
        /// Gets or Sets NewConversation
        /// </summary>
        [DataMember(Name = "newConversation", EmitDefaultValue = false)]
        public string NewConversation { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public string TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutCount
        /// </summary>
        [DataMember(Name = "timeoutCount", EmitDefaultValue = false)]
        public string TimeoutCount { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCount
        /// </summary>
        [DataMember(Name = "errorCount", EmitDefaultValue = false)]
        public string ErrorCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleGroupStatistics {\n");
            sb.Append("  RelativeTime: ").Append(RelativeTime).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  NewActiveConversation: ").Append(NewActiveConversation).Append("\n");
            sb.Append("  BulkLoad: ").Append(BulkLoad).Append("\n");
            sb.Append("  InvalidCount: ").Append(InvalidCount).Append("\n");
            sb.Append("  MatchedCount: ").Append(MatchedCount).Append("\n");
            sb.Append("  NewConversation: ").Append(NewConversation).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  TimeoutCount: ").Append(TimeoutCount).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

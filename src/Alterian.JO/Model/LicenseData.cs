/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// LicenseData
    /// </summary>
    [DataContract(Name = "licenseData")]
    public partial class LicenseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicenseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseData" /> class.
        /// </summary>
        /// <param name="name">Name of the license (required).</param>
        /// <param name="varClient">Name of the license client (required).</param>
        /// <param name="hasAvailableQuota">Has available quota remaining.</param>
        /// <param name="startDate">Start date of the license (required).</param>
        /// <param name="endDate">End date of the license.</param>
        /// <param name="conversationQuotaUsed">Current conversation quota used (required).</param>
        /// <param name="conversationQuota">Conversation quota (required).</param>
        /// <param name="blockOverage">Does this license block overage once quota has been reached? (required).</param>
        /// <param name="quotaUsageHistory">History of quota usage.</param>
        /// <param name="signature">License signature.</param>
        /// <param name="isActive">isActive (required).</param>
        public LicenseData(string name = default(string), string varClient = default(string), bool hasAvailableQuota = default(bool), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), int conversationQuotaUsed = default(int), int conversationQuota = default(int), bool blockOverage = default(bool), List<QuotaUsageHistory> quotaUsageHistory = default(List<QuotaUsageHistory>), string signature = default(string), bool isActive = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LicenseData and cannot be null");
            }
            this.Name = name;
            // to ensure "varClient" is required (not null)
            if (varClient == null)
            {
                throw new ArgumentNullException("varClient is a required property for LicenseData and cannot be null");
            }
            this.VarClient = varClient;
            this.StartDate = startDate;
            this.ConversationQuotaUsed = conversationQuotaUsed;
            this.ConversationQuota = conversationQuota;
            this.BlockOverage = blockOverage;
            this.IsActive = isActive;
            this.HasAvailableQuota = hasAvailableQuota;
            this.EndDate = endDate;
            this.QuotaUsageHistory = quotaUsageHistory;
            this.Signature = signature;
        }

        /// <summary>
        /// Name of the license
        /// </summary>
        /// <value>Name of the license</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Name of the license client
        /// </summary>
        /// <value>Name of the license client</value>
        [DataMember(Name = "client", IsRequired = true, EmitDefaultValue = true)]
        public string VarClient { get; set; }

        /// <summary>
        /// Has available quota remaining
        /// </summary>
        /// <value>Has available quota remaining</value>
        [DataMember(Name = "hasAvailableQuota", EmitDefaultValue = true)]
        public bool HasAvailableQuota { get; set; }

        /// <summary>
        /// Start date of the license
        /// </summary>
        /// <value>Start date of the license</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End date of the license
        /// </summary>
        /// <value>End date of the license</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Current conversation quota used
        /// </summary>
        /// <value>Current conversation quota used</value>
        [DataMember(Name = "conversationQuotaUsed", IsRequired = true, EmitDefaultValue = true)]
        public int ConversationQuotaUsed { get; set; }

        /// <summary>
        /// Conversation quota
        /// </summary>
        /// <value>Conversation quota</value>
        [DataMember(Name = "conversationQuota", IsRequired = true, EmitDefaultValue = true)]
        public int ConversationQuota { get; set; }

        /// <summary>
        /// Does this license block overage once quota has been reached?
        /// </summary>
        /// <value>Does this license block overage once quota has been reached?</value>
        [DataMember(Name = "blockOverage", IsRequired = true, EmitDefaultValue = true)]
        public bool BlockOverage { get; set; }

        /// <summary>
        /// History of quota usage
        /// </summary>
        /// <value>History of quota usage</value>
        [DataMember(Name = "quotaUsageHistory", EmitDefaultValue = false)]
        public List<QuotaUsageHistory> QuotaUsageHistory { get; set; }

        /// <summary>
        /// License signature
        /// </summary>
        /// <value>License signature</value>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", IsRequired = true, EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LicenseData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  HasAvailableQuota: ").Append(HasAvailableQuota).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ConversationQuotaUsed: ").Append(ConversationQuotaUsed).Append("\n");
            sb.Append("  ConversationQuota: ").Append(ConversationQuota).Append("\n");
            sb.Append("  BlockOverage: ").Append(BlockOverage).Append("\n");
            sb.Append("  QuotaUsageHistory: ").Append(QuotaUsageHistory).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

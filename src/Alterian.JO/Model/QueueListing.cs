/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// QueueListing
    /// </summary>
    [DataContract(Name = "QueueListing")]
    public partial class QueueListing : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QueueBackend
        /// </summary>
        [DataMember(Name = "queueBackend", EmitDefaultValue = false)]
        public QueueBackendEnum? QueueBackend { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueListing" /> class.
        /// </summary>
        /// <param name="fifo">fifo.</param>
        /// <param name="queueBackend">queueBackend.</param>
        /// <param name="name">name.</param>
        /// <param name="varClient">varClient.</param>
        /// <param name="target">target.</param>
        /// <param name="url">url.</param>
        /// <param name="varLock">varLock.</param>
        /// <param name="status">status.</param>
        /// <param name="statusMessage">statusMessage.</param>
        /// <param name="numMessages">numMessages.</param>
        /// <param name="createdAt">createdAt.</param>
        public QueueListing(bool fifo = default(bool), QueueBackendEnum? queueBackend = default(QueueBackendEnum?), string name = default(string), string varClient = default(string), string target = default(string), string url = default(string), string varLock = default(string), string status = default(string), string statusMessage = default(string), int numMessages = default(int), DateTime createdAt = default(DateTime))
        {
            this.Fifo = fifo;
            this.QueueBackend = queueBackend;
            this.Name = name;
            this.VarClient = varClient;
            this.Target = target;
            this.Url = url;
            this.VarLock = varLock;
            this.Status = status;
            this.StatusMessage = statusMessage;
            this.NumMessages = numMessages;
            this.CreatedAt = createdAt;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Fifo
        /// </summary>
        [DataMember(Name = "fifo", EmitDefaultValue = true)]
        public bool Fifo { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public string VarClient { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets VarLock
        /// </summary>
        [DataMember(Name = "lock", EmitDefaultValue = false)]
        public string VarLock { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusMessage
        /// </summary>
        [DataMember(Name = "statusMessage", EmitDefaultValue = false)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// Gets or Sets NumMessages
        /// </summary>
        [DataMember(Name = "numMessages", EmitDefaultValue = false)]
        public int NumMessages { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueListing {\n");
            sb.Append("  Fifo: ").Append(Fifo).Append("\n");
            sb.Append("  QueueBackend: ").Append(QueueBackend).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VarLock: ").Append(VarLock).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  NumMessages: ").Append(NumMessages).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

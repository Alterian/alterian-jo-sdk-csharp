/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// TokenUseReport
    /// </summary>
    [DataContract(Name = "TokenUseReport")]
    public partial class TokenUseReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenUseReport" /> class.
        /// </summary>
        /// <param name="loginName">loginName.</param>
        /// <param name="tokenName">tokenName.</param>
        /// <param name="isStaticToken">isStaticToken.</param>
        /// <param name="lastUsed">lastUsed.</param>
        /// <param name="token">token.</param>
        public TokenUseReport(string loginName = default(string), string tokenName = default(string), bool isStaticToken = default(bool), string lastUsed = default(string), string token = default(string))
        {
            this.LoginName = loginName;
            this.TokenName = tokenName;
            this.IsStaticToken = isStaticToken;
            this.LastUsed = lastUsed;
            this.Token = token;
        }

        /// <summary>
        /// Gets or Sets LoginName
        /// </summary>
        [DataMember(Name = "LoginName", EmitDefaultValue = false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Gets or Sets TokenName
        /// </summary>
        [DataMember(Name = "TokenName", EmitDefaultValue = false)]
        public string TokenName { get; set; }

        /// <summary>
        /// Gets or Sets IsStaticToken
        /// </summary>
        [DataMember(Name = "IsStaticToken", EmitDefaultValue = true)]
        public bool IsStaticToken { get; set; }

        /// <summary>
        /// Gets or Sets LastUsed
        /// </summary>
        [DataMember(Name = "LastUsed", EmitDefaultValue = false)]
        public string LastUsed { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "Token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenUseReport {\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  IsStaticToken: ").Append(IsStaticToken).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

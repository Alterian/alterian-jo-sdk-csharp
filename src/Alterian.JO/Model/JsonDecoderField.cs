/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JO.Client.OpenAPIDateConverter;

namespace Alterian.JO.Model
{
    /// <summary>
    /// JsonDecoderField
    /// </summary>
    [DataContract(Name = "jsonDecoderField")]
    public partial class JsonDecoderField : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public KettleFieldType? Type { get; set; }
        /// <summary>
        /// Defines Required
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequiredEnum
        {
            /// <summary>
            /// Enum Allowed for value: Allowed
            /// </summary>
            [EnumMember(Value = "Allowed")]
            Allowed = 1
        }


        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", EmitDefaultValue = false)]
        public RequiredEnum? Required { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonDecoderField" /> class.
        /// </summary>
        /// <param name="outputName">outputName.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="required">required.</param>
        public JsonDecoderField(string outputName = default(string), string name = default(string), KettleFieldType? type = default(KettleFieldType?), RequiredEnum? required = default(RequiredEnum?))
        {
            this.OutputName = outputName;
            this.Name = name;
            this.Type = type;
            this.Required = required;
        }

        /// <summary>
        /// Gets or Sets OutputName
        /// </summary>
        [DataMember(Name = "outputName", EmitDefaultValue = false)]
        public string OutputName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonDecoderField {\n");
            sb.Append("  OutputName: ").Append(OutputName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

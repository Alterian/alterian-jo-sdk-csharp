/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Alterian.JO.Client;
using Alterian.JO.Api;
// uncomment below to import models
//using Alterian.JO.Model;

namespace Alterian.JO.Test.Api
{
    /// <summary>
    ///  Class for testing CacheApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CacheApiTests : IDisposable
    {
        private CacheApi instance;

        public CacheApiTests()
        {
            instance = new CacheApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CacheApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CacheApi
            //Assert.IsType<CacheApi>(instance);
        }

        /// <summary>
        /// Test CacheClientGet
        /// </summary>
        [Fact]
        public void CacheClientGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //var response = instance.CacheClientGet(varClient);
            //Assert.IsType<CacheDetailsResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetExecutePost
        /// </summary>
        [Fact]
        public void CacheClientTargetExecutePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //CacheCQL? cacheCQL = null;
            //var response = instance.CacheClientTargetExecutePost(varClient, target, cacheCQL);
            //Assert.IsType<CacheExecuteResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetGet
        /// </summary>
        [Fact]
        public void CacheClientTargetGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //TableTypeEnum? tabletype = null;
            //var response = instance.CacheClientTargetGet(varClient, target, tabletype);
            //Assert.IsType<CacheDetailsResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetTableColumnDelete
        /// </summary>
        [Fact]
        public void CacheClientTargetTableColumnDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string table = null;
            //string column = null;
            //string? key = null;
            //List<string>? keys = null;
            //var response = instance.CacheClientTargetTableColumnDelete(varClient, target, table, column, key, keys);
            //Assert.IsType<CacheApiResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetTableColumnsDelete
        /// </summary>
        [Fact]
        public void CacheClientTargetTableColumnsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string table = null;
            //bool preview = null;
            //var response = instance.CacheClientTargetTableColumnsDelete(varClient, target, table, preview);
            //Assert.IsType<CacheApiDeleteResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetTableDelete
        /// </summary>
        [Fact]
        public void CacheClientTargetTableDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string table = null;
            //string? key = null;
            //List<string>? keys = null;
            //var response = instance.CacheClientTargetTableDelete(varClient, target, table, key, keys);
            //Assert.IsType<CacheApiResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetTableGet
        /// </summary>
        [Fact]
        public void CacheClientTargetTableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string table = null;
            //string? key = null;
            //List<string>? keys = null;
            //int? sample = null;
            //bool? pivot = null;
            //string? fieldvalue = null;
            //int? limit = null;
            //var response = instance.CacheClientTargetTableGet(varClient, target, table, key, keys, sample, pivot, fieldvalue, limit);
            //Assert.IsType<CacheDetailsResponse>(response);
        }

        /// <summary>
        /// Test CacheClientTargetTablePost
        /// </summary>
        [Fact]
        public void CacheClientTargetTablePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //CacheTableDefinition? cacheTableDefinition = null;
            //var response = instance.CacheClientTargetTablePost(varClient, target, cacheTableDefinition);
            //Assert.IsType<CacheChangesResponse>(response);
        }
    }
}

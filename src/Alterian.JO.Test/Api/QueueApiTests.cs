/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Alterian.JO.Client;
using Alterian.JO.Api;
// uncomment below to import models
//using Alterian.JO.Model;

namespace Alterian.JO.Test.Api
{
    /// <summary>
    ///  Class for testing QueueApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class QueueApiTests : IDisposable
    {
        private QueueApi instance;

        public QueueApiTests()
        {
            instance = new QueueApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of QueueApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' QueueApi
            //Assert.IsType<QueueApi>(instance);
        }

        /// <summary>
        /// Test QueueClientDelete
        /// </summary>
        [Fact]
        public void QueueClientDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //var response = instance.QueueClientDelete(varClient);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test QueueClientGet
        /// </summary>
        [Fact]
        public void QueueClientGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //int? from = null;
            //int? to = null;
            //bool? includeStatistics = null;
            //var response = instance.QueueClientGet(varClient, from, to, includeStatistics);
            //Assert.IsType<QueueResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetDelete
        /// </summary>
        [Fact]
        public void QueueClientTargetDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //var response = instance.QueueClientTargetDelete(varClient, target);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetGet
        /// </summary>
        [Fact]
        public void QueueClientTargetGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //int? from = null;
            //int? to = null;
            //bool? includeStatistics = null;
            //var response = instance.QueueClientTargetGet(varClient, target, from, to, includeStatistics);
            //Assert.IsType<QueueResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNameAckPost
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNameAckPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //List<AckMessage>? ackMessage = null;
            //var response = instance.QueueClientTargetQueueNameAckPost(varClient, target, queueName, ackMessage);
            //Assert.IsType<QueueMessageResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNameDelete
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //var response = instance.QueueClientTargetQueueNameDelete(varClient, target, queueName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNameGet
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //bool? includeStatistics = null;
            //var response = instance.QueueClientTargetQueueNameGet(varClient, target, queueName, includeStatistics);
            //Assert.IsType<QueueResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNameMessagesGet
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNameMessagesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //int? numberOfMessages = null;
            //int? maxWaitTimeInSeconds = null;
            //bool? deleteAfterRead = null;
            //string? varLock = null;
            //var response = instance.QueueClientTargetQueueNameMessagesGet(varClient, target, queueName, numberOfMessages, maxWaitTimeInSeconds, deleteAfterRead, varLock);
            //Assert.IsType<QueueMessageResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNameMessagesPost
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNameMessagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //string body = null;
            //var response = instance.QueueClientTargetQueueNameMessagesPost(varClient, target, queueName, body);
            //Assert.IsType<QueuePostMessageResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNamePost
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //QueueDetails queueDetails = null;
            //var response = instance.QueueClientTargetQueueNamePost(varClient, target, queueName, queueDetails);
            //Assert.IsType<ResourceAndStatusResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNamePurgePost
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNamePurgePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //var response = instance.QueueClientTargetQueueNamePurgePost(varClient, target, queueName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test QueueClientTargetQueueNamePut
        /// </summary>
        [Fact]
        public void QueueClientTargetQueueNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varClient = null;
            //TargetEnum target = null;
            //string queueName = null;
            //QueueDetails queueDetails = null;
            //var response = instance.QueueClientTargetQueueNamePut(varClient, target, queueName, queueDetails);
            //Assert.IsType<ResourceAndStatusResponse>(response);
        }

        /// <summary>
        /// Test QueueGet
        /// </summary>
        [Fact]
        public void QueueGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? from = null;
            //int? to = null;
            //bool? includeStatistics = null;
            //var response = instance.QueueGet(from, to, includeStatistics);
            //Assert.IsType<QueueResponse>(response);
        }
    }
}

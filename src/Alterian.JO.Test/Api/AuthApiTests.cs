/*
 * Journey Orchestration API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Alterian.JO.Client;
using Alterian.JO.Api;
// uncomment below to import models
//using Alterian.JO.Model;

namespace Alterian.JO.Test.Api
{
    /// <summary>
    ///  Class for testing AuthApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthApiTests : IDisposable
    {
        private AuthApi instance;

        public AuthApiTests()
        {
            instance = new AuthApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AuthApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AuthApi
            //Assert.IsType<AuthApi>(instance);
        }

        /// <summary>
        /// Test AuthPermissionGet
        /// </summary>
        [Fact]
        public void AuthPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? from = null;
            //int? to = null;
            //var response = instance.AuthPermissionGet(from, to);
            //Assert.IsType<PermissionList>(response);
        }

        /// <summary>
        /// Test AuthRoleGet
        /// </summary>
        [Fact]
        public void AuthRoleGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? from = null;
            //int? to = null;
            //var response = instance.AuthRoleGet(from, to);
            //Assert.IsType<RoleList>(response);
        }

        /// <summary>
        /// Test AuthRoleNameClientClientNameDelete
        /// </summary>
        [Fact]
        public void AuthRoleNameClientClientNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string clientName = null;
            //var response = instance.AuthRoleNameClientClientNameDelete(name, clientName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthRoleNameClientClientNamePost
        /// </summary>
        [Fact]
        public void AuthRoleNameClientClientNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string clientName = null;
            //var response = instance.AuthRoleNameClientClientNamePost(name, clientName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthRoleNameClientGet
        /// </summary>
        [Fact]
        public void AuthRoleNameClientGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthRoleNameClientGet(name);
            //Assert.IsType<RefList>(response);
        }

        /// <summary>
        /// Test AuthRoleNameDelete
        /// </summary>
        [Fact]
        public void AuthRoleNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthRoleNameDelete(name);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthRoleNameGet
        /// </summary>
        [Fact]
        public void AuthRoleNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthRoleNameGet(name);
            //Assert.IsType<RoleList>(response);
        }

        /// <summary>
        /// Test AuthRoleNamePermissionDelete
        /// </summary>
        [Fact]
        public void AuthRoleNamePermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string permission = null;
            //var response = instance.AuthRoleNamePermissionDelete(name, permission);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthRoleNamePermissionGet
        /// </summary>
        [Fact]
        public void AuthRoleNamePermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthRoleNamePermissionGet(name);
            //Assert.IsType<PermissionList>(response);
        }

        /// <summary>
        /// Test AuthRoleNamePermissionPost
        /// </summary>
        [Fact]
        public void AuthRoleNamePermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string permission = null;
            //var response = instance.AuthRoleNamePermissionPost(name, permission);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthRolePost
        /// </summary>
        [Fact]
        public void AuthRolePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Role role = null;
            //var response = instance.AuthRolePost(role);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthSiteGet
        /// </summary>
        [Fact]
        public void AuthSiteGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? from = null;
            //int? to = null;
            //var response = instance.AuthSiteGet(from, to);
            //Assert.IsType<SiteList>(response);
        }

        /// <summary>
        /// Test AuthSiteIdDelete
        /// </summary>
        [Fact]
        public void AuthSiteIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AuthSiteIdDelete(id);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthSiteIdGet
        /// </summary>
        [Fact]
        public void AuthSiteIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AuthSiteIdGet(id);
            //Assert.IsType<SiteList>(response);
        }

        /// <summary>
        /// Test AuthSiteIdUserGet
        /// </summary>
        [Fact]
        public void AuthSiteIdUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AuthSiteIdUserGet(id);
            //Assert.IsType<RefList>(response);
        }

        /// <summary>
        /// Test AuthSiteIdUserNameDelete
        /// </summary>
        [Fact]
        public void AuthSiteIdUserNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.AuthSiteIdUserNameDelete(id, name);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthSiteIdUserNamePost
        /// </summary>
        [Fact]
        public void AuthSiteIdUserNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //var response = instance.AuthSiteIdUserNamePost(id, name);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthSitePost
        /// </summary>
        [Fact]
        public void AuthSitePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.AuthSitePost(body);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserGet
        /// </summary>
        [Fact]
        public void AuthUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? from = null;
            //int? to = null;
            //bool? getAllDetails = null;
            //var response = instance.AuthUserGet(from, to, getAllDetails);
            //Assert.IsType<UserList>(response);
        }

        /// <summary>
        /// Test AuthUserNameClientClientNameDelete
        /// </summary>
        [Fact]
        public void AuthUserNameClientClientNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string clientName = null;
            //var response = instance.AuthUserNameClientClientNameDelete(name, clientName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameClientClientNamePost
        /// </summary>
        [Fact]
        public void AuthUserNameClientClientNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string clientName = null;
            //var response = instance.AuthUserNameClientClientNamePost(name, clientName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameClientGet
        /// </summary>
        [Fact]
        public void AuthUserNameClientGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthUserNameClientGet(name);
            //Assert.IsType<RefList>(response);
        }

        /// <summary>
        /// Test AuthUserNameDelete
        /// </summary>
        [Fact]
        public void AuthUserNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthUserNameDelete(name);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameGet
        /// </summary>
        [Fact]
        public void AuthUserNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //bool? getAllDetails = null;
            //var response = instance.AuthUserNameGet(name, getAllDetails);
            //Assert.IsType<UserList>(response);
        }

        /// <summary>
        /// Test AuthUserNamePermissionGet
        /// </summary>
        [Fact]
        public void AuthUserNamePermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthUserNamePermissionGet(name);
            //Assert.IsType<PermissionList>(response);
        }

        /// <summary>
        /// Test AuthUserNamePermissionPermissionDelete
        /// </summary>
        [Fact]
        public void AuthUserNamePermissionPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string permission = null;
            //var response = instance.AuthUserNamePermissionPermissionDelete(name, permission);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNamePermissionPermissionPost
        /// </summary>
        [Fact]
        public void AuthUserNamePermissionPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string permission = null;
            //var response = instance.AuthUserNamePermissionPermissionPost(name, permission);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameRoleGet
        /// </summary>
        [Fact]
        public void AuthUserNameRoleGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.AuthUserNameRoleGet(name);
            //Assert.IsType<RefList>(response);
        }

        /// <summary>
        /// Test AuthUserNameRoleRoleNameDelete
        /// </summary>
        [Fact]
        public void AuthUserNameRoleRoleNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string roleName = null;
            //var response = instance.AuthUserNameRoleRoleNameDelete(name, roleName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameRoleRoleNamePost
        /// </summary>
        [Fact]
        public void AuthUserNameRoleRoleNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string roleName = null;
            //var response = instance.AuthUserNameRoleRoleNamePost(name, roleName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameTokenTokenNameDelete
        /// </summary>
        [Fact]
        public void AuthUserNameTokenTokenNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string tokenName = null;
            //var response = instance.AuthUserNameTokenTokenNameDelete(name, tokenName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserNameTokenTokenNamePost
        /// </summary>
        [Fact]
        public void AuthUserNameTokenTokenNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string tokenName = null;
            //var response = instance.AuthUserNameTokenTokenNamePost(name, tokenName);
            //Assert.IsType<ApiResponse>(response);
        }

        /// <summary>
        /// Test AuthUserPost
        /// </summary>
        [Fact]
        public void AuthUserPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //var response = instance.AuthUserPost(body);
            //Assert.IsType<ApiResponse>(response);
        }
    }
}
